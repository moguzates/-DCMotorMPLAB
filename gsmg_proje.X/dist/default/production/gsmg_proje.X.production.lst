

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Sun May 19 23:13:46 2024

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	strings,global,class=STRING,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2,group=3
    15                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    16                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    17                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    18                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    20                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    21                           	psect	text8,local,class=CODE,merge=1,delta=2,group=3
    22                           	psect	text9,local,class=CODE,merge=1,delta=2,group=3
    23                           	psect	text10,local,class=CODE,merge=1,delta=2,group=3
    24                           	psect	text11,local,class=CODE,merge=1,delta=2,group=3
    25                           	psect	text12,local,class=CODE,merge=1,delta=2,group=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,delta=2
    31                           	psect	text18,local,class=CODE,merge=1,delta=2
    32                           	psect	text19,local,class=CODE,merge=1,delta=2
    33                           	psect	text20,local,class=CODE,merge=1,delta=2
    34                           	psect	text21,local,class=CODE,merge=1,delta=2
    35                           	psect	text22,local,class=CODE,merge=1,delta=2
    36                           	psect	text23,local,class=CODE,merge=1,delta=2
    37                           	psect	text24,local,class=CODE,merge=1,delta=2
    38                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    39                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    40                           	dabs	1,0x7E,2
    41     0000                     
    42                           ; Version 2.40
    43                           ; Generated 17/11/2021 GMT
    44                           ; 
    45                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    46                           ; All rights reserved.
    47                           ; 
    48                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    49                           ; 
    50                           ; Redistribution and use in source and binary forms, with or without modification, are
    51                           ; permitted provided that the following conditions are met:
    52                           ; 
    53                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    54                           ;        conditions and the following disclaimer.
    55                           ; 
    56                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    57                           ;        of conditions and the following disclaimer in the documentation and/or other
    58                           ;        materials provided with the distribution. Publication is not required when
    59                           ;        this file is used in an embedded application.
    60                           ; 
    61                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    62                           ;        software without specific prior written permission.
    63                           ; 
    64                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    65                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    66                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    67                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    68                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    69                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    70                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    71                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    72                           ; 
    73                           ; 
    74                           ; Code-generator required, PIC16F877A Definitions
    75                           ; 
    76                           ; SFR Addresses
    77     0000                     	;# 
    78     0001                     	;# 
    79     0002                     	;# 
    80     0003                     	;# 
    81     0004                     	;# 
    82     0005                     	;# 
    83     0006                     	;# 
    84     0007                     	;# 
    85     0008                     	;# 
    86     0009                     	;# 
    87     000A                     	;# 
    88     000B                     	;# 
    89     000C                     	;# 
    90     000D                     	;# 
    91     000E                     	;# 
    92     000E                     	;# 
    93     000F                     	;# 
    94     0010                     	;# 
    95     0011                     	;# 
    96     0012                     	;# 
    97     0013                     	;# 
    98     0014                     	;# 
    99     0015                     	;# 
   100     0015                     	;# 
   101     0016                     	;# 
   102     0017                     	;# 
   103     0018                     	;# 
   104     0019                     	;# 
   105     001A                     	;# 
   106     001B                     	;# 
   107     001B                     	;# 
   108     001C                     	;# 
   109     001D                     	;# 
   110     001E                     	;# 
   111     001F                     	;# 
   112     0081                     	;# 
   113     0085                     	;# 
   114     0086                     	;# 
   115     0087                     	;# 
   116     0088                     	;# 
   117     0089                     	;# 
   118     008C                     	;# 
   119     008D                     	;# 
   120     008E                     	;# 
   121     0091                     	;# 
   122     0092                     	;# 
   123     0093                     	;# 
   124     0094                     	;# 
   125     0098                     	;# 
   126     0099                     	;# 
   127     009C                     	;# 
   128     009D                     	;# 
   129     009E                     	;# 
   130     009F                     	;# 
   131     010C                     	;# 
   132     010D                     	;# 
   133     010E                     	;# 
   134     010F                     	;# 
   135     018C                     	;# 
   136     018D                     	;# 
   137     0000                     	;# 
   138     0001                     	;# 
   139     0002                     	;# 
   140     0003                     	;# 
   141     0004                     	;# 
   142     0005                     	;# 
   143     0006                     	;# 
   144     0007                     	;# 
   145     0008                     	;# 
   146     0009                     	;# 
   147     000A                     	;# 
   148     000B                     	;# 
   149     000C                     	;# 
   150     000D                     	;# 
   151     000E                     	;# 
   152     000E                     	;# 
   153     000F                     	;# 
   154     0010                     	;# 
   155     0011                     	;# 
   156     0012                     	;# 
   157     0013                     	;# 
   158     0014                     	;# 
   159     0015                     	;# 
   160     0015                     	;# 
   161     0016                     	;# 
   162     0017                     	;# 
   163     0018                     	;# 
   164     0019                     	;# 
   165     001A                     	;# 
   166     001B                     	;# 
   167     001B                     	;# 
   168     001C                     	;# 
   169     001D                     	;# 
   170     001E                     	;# 
   171     001F                     	;# 
   172     0081                     	;# 
   173     0085                     	;# 
   174     0086                     	;# 
   175     0087                     	;# 
   176     0088                     	;# 
   177     0089                     	;# 
   178     008C                     	;# 
   179     008D                     	;# 
   180     008E                     	;# 
   181     0091                     	;# 
   182     0092                     	;# 
   183     0093                     	;# 
   184     0094                     	;# 
   185     0098                     	;# 
   186     0099                     	;# 
   187     009C                     	;# 
   188     009D                     	;# 
   189     009E                     	;# 
   190     009F                     	;# 
   191     010C                     	;# 
   192     010D                     	;# 
   193     010E                     	;# 
   194     010F                     	;# 
   195     018C                     	;# 
   196     018D                     	;# 
   197                           
   198                           	psect	idataBANK0
   199     0114                     __pidataBANK0:
   200                           
   201                           ;initializer for _sayac_hiz
   202     0114  341E               	retlw	30
   203     0115  3400               	retlw	0
   204     0011                     _TMR2	set	17
   205     0006                     _PORTB	set	6
   206     0007                     _PORTC	set	7
   207     0008                     _PORTD	set	8
   208     001B                     _CCPR2L	set	27
   209     0015                     _CCPR1L	set	21
   210     0037                     _RB7	set	55
   211     0036                     _RB6	set	54
   212     0031                     _RB1	set	49
   213     0030                     _RB0	set	48
   214     0092                     _TMR2ON	set	146
   215     0091                     _T2CKPS1	set	145
   216     0090                     _T2CKPS0	set	144
   217     00EA                     _CCP2M2	set	234
   218     00EB                     _CCP2M3	set	235
   219     00BA                     _CCP1M2	set	186
   220     00BB                     _CCP1M3	set	187
   221     00EC                     _CCP2Y	set	236
   222     00ED                     _CCP2X	set	237
   223     00BC                     _CCP1Y	set	188
   224     00BD                     _CCP1X	set	189
   225     003B                     _RC3	set	59
   226     0038                     _RC0	set	56
   227     0047                     _RD7	set	71
   228     0046                     _RD6	set	70
   229     0045                     _RD5	set	69
   230     0044                     _RD4	set	68
   231     0092                     _PR2	set	146
   232     0086                     _TRISB	set	134
   233     0087                     _TRISC	set	135
   234     0088                     _TRISD	set	136
   235                           
   236                           	psect	strings
   237     0003                     __pstrings:
   238     0003                     stringtab:
   239     0003                     __stringtab:
   240                           
   241                           ;	String table - string pointers are 1 byte each
   242     0003  1BFF               	btfsc	btemp+1,7
   243     0004  280D               	ljmp	stringcode
   244     0005  1383               	bcf	3,7
   245     0006  187F               	btfsc	btemp+1,0
   246     0007  1783               	bsf	3,7
   247     0008  0800               	movf	0,w
   248     0009  0A84               	incf	4,f
   249     000A  1903               	skipnz
   250     000B  0AFF               	incf	btemp+1,f
   251     000C  0008               	return
   252     000D                     stringcode:
   253     000D                     stringdir:
   254     000D  3000               	movlw	high stringdir
   255     000E  008A               	movwf	10
   256     000F  0804               	movf	4,w
   257     0010  0A84               	incf	4,f
   258     0011  0782               	addwf	2,f
   259     0012                     __stringbase:
   260     0012  3400               	retlw	0
   261     0013                     __end_of__stringtab:
   262     0013                     STR_2:
   263     0013  344D               	retlw	77	;'M'
   264     0014  3455               	retlw	85	;'U'
   265     0015  3453               	retlw	83	;'S'
   266     0016  3454               	retlw	84	;'T'
   267     0017  3441               	retlw	65	;'A'
   268     0018  3446               	retlw	70	;'F'
   269     0019  3441               	retlw	65	;'A'
   270     001A  344F               	retlw	79	;'O'
   271     001B  3447               	retlw	71	;'G'
   272     001C  3455               	retlw	85	;'U'
   273     001D  345A               	retlw	90	;'Z'
   274     001E  3420               	retlw	32	;' '
   275     001F  3441               	retlw	65	;'A'
   276     0020  3454               	retlw	84	;'T'
   277     0021  3445               	retlw	69	;'E'
   278     0022  3453               	retlw	83	;'S'
   279     0023  3400               	retlw	0
   280     0024                     STR_1:
   281     0024  3420               	retlw	32	;' '
   282     0025  3420               	retlw	32	;' '
   283     0026  3420               	retlw	32	;' '
   284     0027  3442               	retlw	66	;'B'
   285     0028  3432               	retlw	50	;'2'
   286     0029  3430               	retlw	48	;'0'
   287     002A  3430               	retlw	48	;'0'
   288     002B  3431               	retlw	49	;'1'
   289     002C  3430               	retlw	48	;'0'
   290     002D  3431               	retlw	49	;'1'
   291     002E  3430               	retlw	48	;'0'
   292     002F  3434               	retlw	52	;'4'
   293     0030  3433               	retlw	51	;'3'
   294     0031  3400               	retlw	0
   295     0032                     STR_6:
   296     0032  3459               	retlw	89	;'Y'
   297     0033  346F               	retlw	111	;'o'
   298     0034  346E               	retlw	110	;'n'
   299     0035  343A               	retlw	58	;':'
   300     0036  3400               	retlw	0
   301     0037                     STR_5:
   302     0037  3448               	retlw	72	;'H'
   303     0038  3469               	retlw	105	;'i'
   304     0039  347A               	retlw	122	;'z'
   305     003A  343A               	retlw	58	;':'
   306     003B  3400               	retlw	0
   307     003C                     STR_7:
   308     003C  3425               	retlw	37	;'%'
   309     003D  3433               	retlw	51	;'3'
   310     003E  3464               	retlw	100	;'d'
   311     003F  3400               	retlw	0
   312     0040                     STR_4:
   313     0040  3453               	retlw	83	;'S'
   314     0041  3461               	retlw	97	;'a'
   315     0042  3467               	retlw	103	;'g'
   316     0043  3400               	retlw	0
   317     0044                     STR_3:
   318     0044  3453               	retlw	83	;'S'
   319     0045  346F               	retlw	111	;'o'
   320     0046  346C               	retlw	108	;'l'
   321     0047  3400               	retlw	0
   322                           
   323                           	psect	cinit
   324     07E2                     start_initialization:	
   325                           ; #config settings
   326                           
   327     07E2                     __initialization:
   328                           
   329                           ; Initialize objects allocated to BANK0
   330     07E2  120A  118A  2114  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   331     07E7  00ED               	movwf	__pdataBANK0& (0+127)
   332     07E8  120A  118A  2115  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   333     07ED  00EE               	movwf	(__pdataBANK0+1)& (0+127)
   334                           
   335                           ; Clear objects allocated to BANK1
   336     07EE  1383               	bcf	3,7	;select IRP bank0
   337     07EF  30A0               	movlw	low __pbssBANK1
   338     07F0  0084               	movwf	4
   339     07F1  30C0               	movlw	low (__pbssBANK1+32)
   340     07F2  120A  118A  2116  120A  118A  	fcall	clear_ram0
   341                           
   342                           ; Clear objects allocated to BANK0
   343     07F7  01E8               	clrf	__pbssBANK0& (0+127)
   344     07F8  01E9               	clrf	(__pbssBANK0+1)& (0+127)
   345     07F9  01EA               	clrf	(__pbssBANK0+2)& (0+127)
   346     07FA  01EB               	clrf	(__pbssBANK0+3)& (0+127)
   347     07FB  01EC               	clrf	(__pbssBANK0+4)& (0+127)
   348     07FC                     end_of_initialization:	
   349                           ;End of C runtime variable initialization code
   350                           
   351     07FC                     __end_of__initialization:
   352     07FC  0183               	clrf	3
   353     07FD  120A  118A  2EEF   	ljmp	_main	;jump to C main() function
   354                           
   355                           	psect	bssBANK0
   356     0068                     __pbssBANK0:
   357     0068                     _width:
   358     0068                     	ds	2
   359     006A                     _prec:
   360     006A                     	ds	2
   361     006C                     _flags:
   362     006C                     	ds	1
   363                           
   364                           	psect	dataBANK0
   365     006D                     __pdataBANK0:
   366     006D                     _sayac_hiz:
   367     006D                     	ds	2
   368                           
   369                           	psect	bssBANK1
   370     00A0                     __pbssBANK1:
   371     00A0                     _dbuf:
   372     00A0                     	ds	32
   373                           
   374                           	psect	clrtext
   375     0116                     clear_ram0:	
   376                           ;	Called with FSR containing the base address, and
   377                           ;	W with the last address+1
   378                           
   379     0116  0064               	clrwdt	;clear the watchdog before getting into this loop
   380     0117                     clrloop0:
   381     0117  0180               	clrf	0	;clear RAM location pointed to by FSR
   382     0118  0A84               	incf	4,f	;increment pointer
   383     0119  0604               	xorwf	4,w	;XOR with final address
   384     011A  1903               	btfsc	3,2	;have we reached the end yet?
   385     011B  3400               	retlw	0	;all done for this memory range, return
   386     011C  0604               	xorwf	4,w	;XOR again to restore value
   387     011D  2917               	goto	clrloop0	;do the next byte
   388                           
   389                           	psect	cstackCOMMON
   390     0070                     __pcstackCOMMON:
   391     0070                     ?_putch:
   392     0070                     ??_putch:	
   393                           ; 1 bytes @ 0x0
   394                           
   395     0070                     ?_Lcd_Port:	
   396                           ; 1 bytes @ 0x0
   397                           
   398     0070                     ??_Lcd_Port:	
   399                           ; 1 bytes @ 0x0
   400                           
   401     0070                     ?_Lcd_Cmd:	
   402                           ; 1 bytes @ 0x0
   403                           
   404     0070                     ?_Lcd_Clear:	
   405                           ; 1 bytes @ 0x0
   406                           
   407     0070                     ?_Lcd_Init:	
   408                           ; 1 bytes @ 0x0
   409                           
   410     0070                     ?_Lcd_Write_Char:	
   411                           ; 1 bytes @ 0x0
   412                           
   413     0070                     ?_duty_sag:	
   414                           ; 1 bytes @ 0x0
   415                           
   416     0070                     ?_duty_sol:	
   417                           ; 1 bytes @ 0x0
   418                           
   419     0070                     ?_baslangic:	
   420                           ; 1 bytes @ 0x0
   421                           
   422     0070                     ?_main:	
   423                           ; 1 bytes @ 0x0
   424                           
   425     0070                     ?_fputc:	
   426                           ; 1 bytes @ 0x0
   427                           
   428     0070                     ?___wmul:	
   429                           ; 2 bytes @ 0x0
   430                           
   431     0070                     ?___awdiv:	
   432                           ; 2 bytes @ 0x0
   433                           
   434     0070                     ?___awmod:	
   435                           ; 2 bytes @ 0x0
   436                           
   437     0070                     Lcd_Port@a:	
   438                           ; 2 bytes @ 0x0
   439                           
   440     0070                     putch@c:	
   441                           ; 1 bytes @ 0x0
   442                           
   443     0070                     duty_sag@pwm:	
   444                           ; 1 bytes @ 0x0
   445                           
   446     0070                     duty_sol@pwm:	
   447                           ; 2 bytes @ 0x0
   448                           
   449     0070                     ___wmul@multiplier:	
   450                           ; 2 bytes @ 0x0
   451                           
   452     0070                     ___awdiv@divisor:	
   453                           ; 2 bytes @ 0x0
   454                           
   455     0070                     ___awmod@divisor:	
   456                           ; 2 bytes @ 0x0
   457                           
   458     0070                     fputc@c:	
   459                           ; 2 bytes @ 0x0
   460                           
   461                           
   462                           ; 2 bytes @ 0x0
   463     0070                     	ds	1
   464     0071                     ??_Lcd_Cmd:
   465     0071                     ??_Lcd_Write_Char:	
   466                           ; 1 bytes @ 0x1
   467                           
   468                           
   469                           ; 1 bytes @ 0x1
   470     0071                     	ds	1
   471     0072                     ??_duty_sag:
   472     0072                     ??_duty_sol:	
   473                           ; 1 bytes @ 0x2
   474                           
   475     0072                     Lcd_Write_Char@temp:	
   476                           ; 1 bytes @ 0x2
   477                           
   478     0072                     fputc@fp:	
   479                           ; 1 bytes @ 0x2
   480                           
   481     0072                     ___wmul@multiplicand:	
   482                           ; 1 bytes @ 0x2
   483                           
   484     0072                     ___awdiv@dividend:	
   485                           ; 2 bytes @ 0x2
   486                           
   487     0072                     ___awmod@dividend:	
   488                           ; 2 bytes @ 0x2
   489                           
   490                           
   491                           ; 2 bytes @ 0x2
   492     0072                     	ds	1
   493     0073                     ??_fputc:
   494     0073                     Lcd_Cmd@a:	
   495                           ; 1 bytes @ 0x3
   496                           
   497     0073                     Lcd_Write_Char@y:	
   498                           ; 1 bytes @ 0x3
   499                           
   500                           
   501                           ; 1 bytes @ 0x3
   502     0073                     	ds	1
   503     0074                     ??_Lcd_Clear:
   504     0074                     ?_Lcd_Set_Cursor:	
   505                           ; 1 bytes @ 0x4
   506                           
   507     0074                     ??_Lcd_Init:	
   508                           ; 1 bytes @ 0x4
   509                           
   510     0074                     ??___wmul:	
   511                           ; 1 bytes @ 0x4
   512                           
   513     0074                     ??___awdiv:	
   514                           ; 1 bytes @ 0x4
   515                           
   516     0074                     ??___awmod:	
   517                           ; 1 bytes @ 0x4
   518                           
   519     0074                     Lcd_Set_Cursor@b:	
   520                           ; 1 bytes @ 0x4
   521                           
   522     0074                     Lcd_Write_Char@a:	
   523                           ; 1 bytes @ 0x4
   524                           
   525     0074                     ___awdiv@counter:	
   526                           ; 1 bytes @ 0x4
   527                           
   528     0074                     ___awmod@counter:	
   529                           ; 1 bytes @ 0x4
   530                           
   531     0074                     ___wmul@product:	
   532                           ; 1 bytes @ 0x4
   533                           
   534                           
   535                           ; 2 bytes @ 0x4
   536     0074                     	ds	1
   537     0075                     ??_Lcd_Set_Cursor:
   538     0075                     ?_Lcd_Write_String:	
   539                           ; 1 bytes @ 0x5
   540                           
   541     0075                     ___awdiv@sign:	
   542                           ; 1 bytes @ 0x5
   543                           
   544     0075                     ___awmod@sign:	
   545                           ; 1 bytes @ 0x5
   546                           
   547     0075                     Lcd_Write_String@a:	
   548                           ; 1 bytes @ 0x5
   549                           
   550                           
   551                           ; 2 bytes @ 0x5
   552     0075                     	ds	1
   553     0076                     ?_abs:
   554     0076                     ?_read_prec_or_width:	
   555                           ; 2 bytes @ 0x6
   556                           
   557     0076                     Lcd_Set_Cursor@a:	
   558                           ; 2 bytes @ 0x6
   559                           
   560     0076                     read_prec_or_width@ap:	
   561                           ; 1 bytes @ 0x6
   562                           
   563     0076                     ___awdiv@quotient:	
   564                           ; 1 bytes @ 0x6
   565                           
   566     0076                     abs@a:	
   567                           ; 2 bytes @ 0x6
   568                           
   569                           
   570                           ; 2 bytes @ 0x6
   571     0076                     	ds	1
   572     0077                     ??_Lcd_Write_String:
   573     0077                     Lcd_Set_Cursor@z:	
   574                           ; 1 bytes @ 0x7
   575                           
   576                           
   577                           ; 1 bytes @ 0x7
   578     0077                     	ds	1
   579     0078                     ??_abs:
   580     0078                     ??_read_prec_or_width:	
   581                           ; 1 bytes @ 0x8
   582                           
   583     0078                     ?_fputs:	
   584                           ; 1 bytes @ 0x8
   585                           
   586     0078                     Lcd_Set_Cursor@y:	
   587                           ; 2 bytes @ 0x8
   588                           
   589     0078                     read_prec_or_width@c:	
   590                           ; 1 bytes @ 0x8
   591                           
   592     0078                     fputs@fp:	
   593                           ; 1 bytes @ 0x8
   594                           
   595                           
   596                           ; 1 bytes @ 0x8
   597     0078                     	ds	1
   598     0079                     ??_fputs:
   599     0079                     Lcd_Set_Cursor@temp:	
   600                           ; 1 bytes @ 0x9
   601                           
   602     0079                     read_prec_or_width@n:	
   603                           ; 1 bytes @ 0x9
   604                           
   605                           
   606                           ; 2 bytes @ 0x9
   607     0079                     	ds	1
   608     007A                     Lcd_Write_String@i:
   609                           
   610                           ; 2 bytes @ 0xA
   611     007A                     	ds	1
   612     007B                     ?_pad:
   613     007B                     pad@buf:	
   614                           ; 1 bytes @ 0xB
   615                           
   616     007B                     read_prec_or_width@fmt:	
   617                           ; 1 bytes @ 0xB
   618                           
   619                           
   620                           ; 1 bytes @ 0xB
   621     007B                     	ds	1
   622     007C                     ??_motor:
   623     007C                     pad@p:	
   624                           ; 1 bytes @ 0xC
   625                           
   626                           
   627                           ; 2 bytes @ 0xC
   628     007C                     	ds	2
   629     007E                     ??_vfprintf:
   630     007E                     ??_dtoa:	
   631                           ; 1 bytes @ 0xE
   632                           
   633                           
   634                           	psect	cstackBANK0
   635     0020                     __pcstackBANK0:	
   636                           ; 1 bytes @ 0xE
   637                           
   638     0020                     ??_baslangic:
   639     0020                     ?_motor:	
   640                           ; 1 bytes @ 0x0
   641                           
   642     0020                     fputs@c:	
   643                           ; 1 bytes @ 0x0
   644                           
   645     0020                     motor@sayac:	
   646                           ; 1 bytes @ 0x0
   647                           
   648                           
   649                           ; 2 bytes @ 0x0
   650     0020                     	ds	1
   651     0021                     fputs@i:
   652                           
   653                           ; 2 bytes @ 0x1
   654     0021                     	ds	1
   655     0022                     motor@hiz:
   656                           
   657                           ; 2 bytes @ 0x2
   658     0022                     	ds	1
   659     0023                     fputs@s:
   660                           
   661                           ; 1 bytes @ 0x3
   662     0023                     	ds	1
   663     0024                     ??_pad:
   664                           
   665                           ; 1 bytes @ 0x4
   666     0024                     	ds	1
   667     0025                     pad@i:
   668                           
   669                           ; 2 bytes @ 0x5
   670     0025                     	ds	2
   671     0027                     pad@fp:
   672                           
   673                           ; 1 bytes @ 0x7
   674     0027                     	ds	1
   675     0028                     ?_dtoa:
   676     0028                     dtoa@d:	
   677                           ; 1 bytes @ 0x8
   678                           
   679                           
   680                           ; 2 bytes @ 0x8
   681     0028                     	ds	2
   682     002A                     _dtoa$639:
   683                           
   684                           ; 2 bytes @ 0xA
   685     002A                     	ds	2
   686     002C                     dtoa@fp:
   687                           
   688                           ; 1 bytes @ 0xC
   689     002C                     	ds	1
   690     002D                     dtoa@w:
   691                           
   692                           ; 2 bytes @ 0xD
   693     002D                     	ds	2
   694     002F                     dtoa@p:
   695                           
   696                           ; 1 bytes @ 0xF
   697     002F                     	ds	1
   698     0030                     dtoa@s:
   699                           
   700                           ; 1 bytes @ 0x10
   701     0030                     	ds	1
   702     0031                     dtoa@i:
   703                           
   704                           ; 2 bytes @ 0x11
   705     0031                     	ds	2
   706     0033                     ?_vfpfcnvrt:
   707     0033                     vfpfcnvrt@fmt:	
   708                           ; 1 bytes @ 0x13
   709                           
   710                           
   711                           ; 1 bytes @ 0x13
   712     0033                     	ds	1
   713     0034                     vfpfcnvrt@ap:
   714                           
   715                           ; 1 bytes @ 0x14
   716     0034                     	ds	1
   717     0035                     ??_vfpfcnvrt:
   718                           
   719                           ; 1 bytes @ 0x15
   720     0035                     	ds	2
   721     0037                     vfpfcnvrt@convarg:
   722                           
   723                           ; 4 bytes @ 0x17
   724     0037                     	ds	4
   725     003B                     vfpfcnvrt@fp:
   726                           
   727                           ; 1 bytes @ 0x1B
   728     003B                     	ds	1
   729     003C                     vfpfcnvrt@cp:
   730                           
   731                           ; 1 bytes @ 0x1C
   732     003C                     	ds	1
   733     003D                     ?_vfprintf:
   734     003D                     vfprintf@fmt:	
   735                           ; 2 bytes @ 0x1D
   736                           
   737                           
   738                           ; 1 bytes @ 0x1D
   739     003D                     	ds	1
   740     003E                     vfprintf@ap:
   741                           
   742                           ; 1 bytes @ 0x1E
   743     003E                     	ds	1
   744     003F                     vfprintf@fp:
   745                           
   746                           ; 1 bytes @ 0x1F
   747     003F                     	ds	1
   748     0040                     vfprintf@cfmt:
   749                           
   750                           ; 1 bytes @ 0x20
   751     0040                     	ds	1
   752     0041                     ?_sprintf:
   753     0041                     sprintf@fmt:	
   754                           ; 2 bytes @ 0x21
   755                           
   756                           
   757                           ; 1 bytes @ 0x21
   758     0041                     	ds	3
   759     0044                     ??_sprintf:
   760                           
   761                           ; 1 bytes @ 0x24
   762     0044                     	ds	1
   763     0045                     sprintf@ap:
   764                           
   765                           ; 1 bytes @ 0x25
   766     0045                     	ds	1
   767     0046                     sprintf@s:
   768                           
   769                           ; 1 bytes @ 0x26
   770     0046                     	ds	1
   771     0047                     sprintf@f:
   772                           
   773                           ; 11 bytes @ 0x27
   774     0047                     	ds	11
   775     0052                     ??_main:
   776                           
   777                           ; 1 bytes @ 0x32
   778     0052                     	ds	2
   779     0054                     main@yuzde_veri:
   780                           
   781                           ; 16 bytes @ 0x34
   782     0054                     	ds	16
   783     0064                     main@hiz:
   784                           
   785                           ; 2 bytes @ 0x44
   786     0064                     	ds	2
   787     0066                     main@sayac:
   788                           
   789                           ; 2 bytes @ 0x46
   790     0066                     	ds	2
   791                           
   792                           	psect	maintext
   793     06EF                     __pmaintext:	
   794 ;;
   795 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   796 ;;
   797 ;; *************** function _main *****************
   798 ;; Defined at:
   799 ;;		line 186 in file "gsmg_c.c"
   800 ;; Parameters:    Size  Location     Type
   801 ;;		None
   802 ;; Auto vars:     Size  Location     Type
   803 ;;  yuzde_veri     16   52[BANK0 ] unsigned char [16]
   804 ;;  sayac           2   70[BANK0 ] int 
   805 ;;  hiz             2   68[BANK0 ] unsigned int 
   806 ;; Return value:  Size  Location     Type
   807 ;;                  1    wreg      void 
   808 ;; Registers used:
   809 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   810 ;; Tracked objects:
   811 ;;		On entry : B00/0
   812 ;;		On exit  : 0/0
   813 ;;		Unchanged: 0/0
   814 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   815 ;;      Params:         0       0       0       0       0
   816 ;;      Locals:         0      20       0       0       0
   817 ;;      Temps:          0       2       0       0       0
   818 ;;      Totals:         0      22       0       0       0
   819 ;;Total ram usage:       22 bytes
   820 ;; Hardware stack levels required when called: 8
   821 ;; This function calls:
   822 ;;		_Lcd_Init
   823 ;;		_Lcd_Set_Cursor
   824 ;;		_Lcd_Write_String
   825 ;;		___wmul
   826 ;;		_baslangic
   827 ;;		_motor
   828 ;;		_sprintf
   829 ;; This function is called by:
   830 ;;		Startup code after reset
   831 ;; This function uses a non-reentrant model
   832 ;;
   833                           
   834     06EF                     _main:	
   835                           ;psect for function _main
   836                           
   837     06EF                     l1626:	
   838                           ;incstack = 0
   839                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   840                           
   841                           
   842                           ;gsmg_c.c: 187:     int sayac;;gsmg_c.c: 190:     TRISD = 0X00;
   843     06EF  1683               	bsf	3,5	;RP0=1, select bank1
   844     06F0  1303               	bcf	3,6	;RP1=0, select bank1
   845     06F1  0188               	clrf	8	;volatile
   846                           
   847                           ;gsmg_c.c: 191:     TRISC = 0X00;
   848     06F2  0187               	clrf	7	;volatile
   849     06F3                     l1628:
   850                           
   851                           ;gsmg_c.c: 192:     TRISB = 0XFF;
   852     06F3  30FF               	movlw	255
   853     06F4  0086               	movwf	6	;volatile
   854     06F5                     l1630:
   855                           
   856                           ;gsmg_c.c: 193:     PORTD = 0X00;
   857     06F5  1283               	bcf	3,5	;RP0=0, select bank0
   858     06F6  1303               	bcf	3,6	;RP1=0, select bank0
   859     06F7  0188               	clrf	8	;volatile
   860     06F8                     l1632:
   861                           
   862                           ;gsmg_c.c: 194:     PORTC = 0X00;
   863     06F8  0187               	clrf	7	;volatile
   864     06F9                     l1634:
   865                           
   866                           ;gsmg_c.c: 195:     PORTB = 0X00;
   867     06F9  0186               	clrf	6	;volatile
   868     06FA                     l1636:
   869                           
   870                           ;gsmg_c.c: 197:     Lcd_Init();
   871     06FA  120A  118A  247F  120A  118A  	fcall	_Lcd_Init
   872     06FF                     l1638:
   873                           
   874                           ;gsmg_c.c: 199:     CCP1M3 = 1;
   875     06FF  1283               	bcf	3,5	;RP0=0, select bank0
   876     0700  1303               	bcf	3,6	;RP1=0, select bank0
   877     0701  1597               	bsf	23,3	;volatile
   878     0702                     l1640:
   879                           
   880                           ;gsmg_c.c: 200:     CCP1M2 = 1;
   881     0702  1517               	bsf	23,2	;volatile
   882     0703                     l1642:
   883                           
   884                           ;gsmg_c.c: 201:     CCP2M3 = 1;
   885     0703  159D               	bsf	29,3	;volatile
   886     0704                     l1644:
   887                           
   888                           ;gsmg_c.c: 202:     CCP2M2 = 1;
   889     0704  151D               	bsf	29,2	;volatile
   890     0705                     l1646:
   891                           
   892                           ;gsmg_c.c: 203:     T2CKPS0 = 1;
   893     0705  1412               	bsf	18,0	;volatile
   894     0706                     l1648:
   895                           
   896                           ;gsmg_c.c: 204:     T2CKPS1 = 0;
   897     0706  1092               	bcf	18,1	;volatile
   898     0707                     l1650:
   899                           
   900                           ;gsmg_c.c: 205:     TMR2ON = 1;
   901     0707  1512               	bsf	18,2	;volatile
   902     0708                     l1652:
   903                           
   904                           ;gsmg_c.c: 207:     TMR2 = 0;
   905     0708  0191               	clrf	17	;volatile
   906     0709                     l1654:
   907                           
   908                           ;gsmg_c.c: 208:     PR2 = 249;
   909     0709  30F9               	movlw	249
   910     070A  1683               	bsf	3,5	;RP0=1, select bank1
   911     070B  1303               	bcf	3,6	;RP1=0, select bank1
   912     070C  0092               	movwf	18	;volatile
   913     070D                     l1656:
   914                           
   915                           ;gsmg_c.c: 210:     baslangic();
   916     070D  120A  118A  226E  120A  118A  	fcall	_baslangic
   917     0712                     l1658:
   918                           
   919                           ;gsmg_c.c: 211:     unsigned int hiz;;gsmg_c.c: 212:     _delay((unsigned long)((2)*(400
      +                          0000/4000.0)));
   920     0712  3003               	movlw	3
   921     0713  1283               	bcf	3,5	;RP0=0, select bank0
   922     0714  1303               	bcf	3,6	;RP1=0, select bank0
   923     0715  00D3               	movwf	??_main+1
   924     0716  3097               	movlw	151
   925     0717  00D2               	movwf	??_main
   926     0718                     u1537:
   927     0718  0BD2               	decfsz	??_main,f
   928     0719  2F18               	goto	u1537
   929     071A  0BD3               	decfsz	??_main+1,f
   930     071B  2F18               	goto	u1537
   931     071C                     l1660:
   932                           
   933                           ;gsmg_c.c: 216:         Lcd_Set_Cursor(1,5);
   934     071C  3005               	movlw	5
   935     071D  00F4               	movwf	Lcd_Set_Cursor@b
   936     071E  3001               	movlw	1
   937     071F  120A  118A  22E6  120A  118A  	fcall	_Lcd_Set_Cursor
   938     0724                     l1662:
   939                           
   940                           ;gsmg_c.c: 217:         Lcd_Write_String("Hiz:");
   941     0724  3025               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
   942     0725  00F5               	movwf	Lcd_Write_String@a
   943     0726  3080               	movlw	128
   944     0727  00F6               	movwf	Lcd_Write_String@a+1
   945     0728  120A  118A  22A4  120A  118A  	fcall	_Lcd_Write_String
   946     072D                     l1664:
   947                           
   948                           ;gsmg_c.c: 218:         Lcd_Set_Cursor(2,5);
   949     072D  3005               	movlw	5
   950     072E  00F4               	movwf	Lcd_Set_Cursor@b
   951     072F  3002               	movlw	2
   952     0730  120A  118A  22E6  120A  118A  	fcall	_Lcd_Set_Cursor
   953     0735                     l1666:
   954                           
   955                           ;gsmg_c.c: 219:         Lcd_Write_String("Yon:");
   956     0735  3020               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
   957     0736  00F5               	movwf	Lcd_Write_String@a
   958     0737  3080               	movlw	128
   959     0738  00F6               	movwf	Lcd_Write_String@a+1
   960     0739  120A  118A  22A4  120A  118A  	fcall	_Lcd_Write_String
   961     073E                     l1668:
   962                           
   963                           ;gsmg_c.c: 222:         if(RB0 == 0){
   964     073E  1283               	bcf	3,5	;RP0=0, select bank0
   965     073F  1303               	bcf	3,6	;RP1=0, select bank0
   966     0740  1806               	btfsc	6,0	;volatile
   967     0741  2F43               	goto	u1431
   968     0742  2F44               	goto	u1430
   969     0743                     u1431:
   970     0743  2F64               	goto	l123
   971     0744                     u1430:
   972     0744                     l124:
   973     0744  1C06               	btfss	6,0	;volatile
   974     0745  2F47               	goto	u1441
   975     0746  2F48               	goto	u1440
   976     0747                     u1441:
   977     0747  2F44               	goto	l124
   978     0748                     u1440:
   979     0748                     l1672:
   980                           
   981                           ;gsmg_c.c: 225:             sayac_hiz = sayac_hiz + 1;
   982     0748  086D               	movf	_sayac_hiz,w
   983     0749  3E01               	addlw	1
   984     074A  00ED               	movwf	_sayac_hiz
   985     074B  086E               	movf	_sayac_hiz+1,w
   986     074C  1803               	skipnc
   987     074D  3E01               	addlw	1
   988     074E  3E00               	addlw	0
   989     074F  00EE               	movwf	_sayac_hiz+1
   990     0750                     l1674:
   991                           
   992                           ;gsmg_c.c: 227:             if(sayac_hiz >= 100){
   993     0750  086E               	movf	_sayac_hiz+1,w
   994     0751  3A80               	xorlw	128
   995     0752  00FF               	movwf	btemp+1
   996     0753  3080               	movlw	128
   997     0754  027F               	subwf	btemp+1,w
   998     0755  1D03               	skipz
   999     0756  2F59               	goto	u1455
  1000     0757  3064               	movlw	100
  1001     0758  026D               	subwf	_sayac_hiz,w
  1002     0759                     u1455:
  1003     0759  1C03               	skipc
  1004     075A  2F5C               	goto	u1451
  1005     075B  2F5D               	goto	u1450
  1006     075C                     u1451:
  1007     075C  2F9D               	goto	l1694
  1008     075D                     u1450:
  1009     075D                     l1676:
  1010                           
  1011                           ;gsmg_c.c: 228:                 sayac_hiz = 100;
  1012     075D  3064               	movlw	100
  1013     075E  1283               	bcf	3,5	;RP0=0, select bank0
  1014     075F  1303               	bcf	3,6	;RP1=0, select bank0
  1015     0760  00ED               	movwf	_sayac_hiz
  1016     0761  3000               	movlw	0
  1017     0762  00EE               	movwf	_sayac_hiz+1
  1018     0763  2F9D               	goto	l1694
  1019     0764                     l123:	
  1020                           ;gsmg_c.c: 232:         else if(RB1 == 0){
  1021                           
  1022     0764  1886               	btfsc	6,1	;volatile
  1023     0765  2F67               	goto	u1461
  1024     0766  2F68               	goto	u1460
  1025     0767                     u1461:
  1026     0767  2F86               	goto	l129
  1027     0768                     u1460:
  1028     0768                     l130:
  1029     0768  1C86               	btfss	6,1	;volatile
  1030     0769  2F6B               	goto	u1471
  1031     076A  2F6C               	goto	u1470
  1032     076B                     u1471:
  1033     076B  2F68               	goto	l130
  1034     076C                     u1470:
  1035     076C                     l1680:
  1036                           
  1037                           ;gsmg_c.c: 235:             sayac_hiz = sayac_hiz - 1;
  1038     076C  086D               	movf	_sayac_hiz,w
  1039     076D  3EFF               	addlw	255
  1040     076E  00ED               	movwf	_sayac_hiz
  1041     076F  086E               	movf	_sayac_hiz+1,w
  1042     0770  1803               	skipnc
  1043     0771  3E01               	addlw	1
  1044     0772  3EFF               	addlw	255
  1045     0773  00EE               	movwf	_sayac_hiz+1
  1046     0774                     l1682:
  1047                           
  1048                           ;gsmg_c.c: 237:             if(sayac_hiz <= 0){
  1049     0774  086E               	movf	_sayac_hiz+1,w
  1050     0775  3A80               	xorlw	128
  1051     0776  00FF               	movwf	btemp+1
  1052     0777  3080               	movlw	128
  1053     0778  027F               	subwf	btemp+1,w
  1054     0779  1D03               	skipz
  1055     077A  2F7D               	goto	u1485
  1056     077B  3001               	movlw	1
  1057     077C  026D               	subwf	_sayac_hiz,w
  1058     077D                     u1485:
  1059     077D  1803               	skipnc
  1060     077E  2F80               	goto	u1481
  1061     077F  2F81               	goto	u1480
  1062     0780                     u1481:
  1063     0780  2F9D               	goto	l1694
  1064     0781                     u1480:
  1065     0781                     l1684:
  1066                           
  1067                           ;gsmg_c.c: 238:                 sayac_hiz = 0;
  1068     0781  1283               	bcf	3,5	;RP0=0, select bank0
  1069     0782  1303               	bcf	3,6	;RP1=0, select bank0
  1070     0783  01ED               	clrf	_sayac_hiz
  1071     0784  01EE               	clrf	_sayac_hiz+1
  1072     0785  2F9D               	goto	l1694
  1073     0786                     l129:	
  1074                           ;gsmg_c.c: 242:         else if(RB6 == 0){
  1075                           
  1076     0786  1B06               	btfsc	6,6	;volatile
  1077     0787  2F89               	goto	u1491
  1078     0788  2F8A               	goto	u1490
  1079     0789                     u1491:
  1080     0789  2F93               	goto	l135
  1081     078A                     u1490:
  1082     078A                     l136:
  1083     078A  1F06               	btfss	6,6	;volatile
  1084     078B  2F8D               	goto	u1501
  1085     078C  2F8E               	goto	u1500
  1086     078D                     u1501:
  1087     078D  2F8A               	goto	l136
  1088     078E                     u1500:
  1089     078E                     l1688:
  1090                           
  1091                           ;gsmg_c.c: 245:             sayac = 1;
  1092     078E  3001               	movlw	1
  1093     078F  00E6               	movwf	main@sayac
  1094     0790  3000               	movlw	0
  1095     0791  00E7               	movwf	main@sayac+1
  1096                           
  1097                           ;gsmg_c.c: 247:         }
  1098     0792  2F9D               	goto	l1694
  1099     0793                     l135:	
  1100                           ;gsmg_c.c: 249:         else if(RB7 == 0){
  1101                           
  1102     0793  1B86               	btfsc	6,7	;volatile
  1103     0794  2F96               	goto	u1511
  1104     0795  2F97               	goto	u1510
  1105     0796                     u1511:
  1106     0796  2F9D               	goto	l1694
  1107     0797                     u1510:
  1108     0797                     l141:
  1109     0797  1F86               	btfss	6,7	;volatile
  1110     0798  2F9A               	goto	u1521
  1111     0799  2F9B               	goto	u1520
  1112     079A                     u1521:
  1113     079A  2F97               	goto	l141
  1114     079B                     u1520:
  1115     079B                     l1692:
  1116                           
  1117                           ;gsmg_c.c: 252:             sayac = 0;
  1118     079B  01E6               	clrf	main@sayac
  1119     079C  01E7               	clrf	main@sayac+1
  1120     079D                     l1694:
  1121                           
  1122                           ;gsmg_c.c: 255:         char yuzde_veri[16];;gsmg_c.c: 256:         hiz = sayac_hiz*10;
  1123     079D  1283               	bcf	3,5	;RP0=0, select bank0
  1124     079E  1303               	bcf	3,6	;RP1=0, select bank0
  1125     079F  086E               	movf	_sayac_hiz+1,w
  1126     07A0  00F1               	movwf	___wmul@multiplier+1
  1127     07A1  086D               	movf	_sayac_hiz,w
  1128     07A2  00F0               	movwf	___wmul@multiplier
  1129     07A3  300A               	movlw	10
  1130     07A4  00F2               	movwf	___wmul@multiplicand
  1131     07A5  3000               	movlw	0
  1132     07A6  00F3               	movwf	___wmul@multiplicand+1
  1133     07A7  120A  118A  21EC  120A  118A  	fcall	___wmul
  1134     07AC  0871               	movf	?___wmul+1,w
  1135     07AD  1283               	bcf	3,5	;RP0=0, select bank0
  1136     07AE  1303               	bcf	3,6	;RP1=0, select bank0
  1137     07AF  00E5               	movwf	main@hiz+1
  1138     07B0  0870               	movf	?___wmul,w
  1139     07B1  00E4               	movwf	main@hiz
  1140     07B2                     l1696:
  1141                           
  1142                           ;gsmg_c.c: 258:         sprintf(yuzde_veri, "%3d", sayac_hiz);
  1143     07B2  302A               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  1144     07B3  00C1               	movwf	sprintf@fmt
  1145     07B4  086E               	movf	_sayac_hiz+1,w
  1146     07B5  00C3               	movwf	?_sprintf+2
  1147     07B6  086D               	movf	_sayac_hiz,w
  1148     07B7  00C2               	movwf	?_sprintf+1
  1149     07B8  3054               	movlw	(low (main@yuzde_veri| 0))& (0+255)
  1150     07B9  120A  118A  218A  120A  118A  	fcall	_sprintf
  1151     07BE                     l1698:
  1152                           
  1153                           ;gsmg_c.c: 259:         Lcd_Set_Cursor(1,9);
  1154     07BE  3009               	movlw	9
  1155     07BF  00F4               	movwf	Lcd_Set_Cursor@b
  1156     07C0  3001               	movlw	1
  1157     07C1  120A  118A  22E6  120A  118A  	fcall	_Lcd_Set_Cursor
  1158     07C6                     l1700:
  1159                           
  1160                           ;gsmg_c.c: 260:         Lcd_Write_String(yuzde_veri);
  1161     07C6  3054               	movlw	(low (main@yuzde_veri| 0))& (0+255)
  1162     07C7  00F5               	movwf	Lcd_Write_String@a
  1163     07C8  3000               	movlw	0
  1164     07C9  00F6               	movwf	Lcd_Write_String@a+1
  1165     07CA  120A  118A  22A4  120A  118A  	fcall	_Lcd_Write_String
  1166     07CF                     l1702:
  1167                           
  1168                           ;gsmg_c.c: 263:         motor(sayac, hiz);
  1169     07CF  1283               	bcf	3,5	;RP0=0, select bank0
  1170     07D0  1303               	bcf	3,6	;RP1=0, select bank0
  1171     07D1  0867               	movf	main@sayac+1,w
  1172     07D2  00A1               	movwf	motor@sayac+1
  1173     07D3  0866               	movf	main@sayac,w
  1174     07D4  00A0               	movwf	motor@sayac
  1175     07D5  0865               	movf	main@hiz+1,w
  1176     07D6  00A3               	movwf	motor@hiz+1
  1177     07D7  0864               	movf	main@hiz,w
  1178     07D8  00A2               	movwf	motor@hiz
  1179     07D9  120A  118A  24DC  120A  118A  	fcall	_motor
  1180     07DE  2F1C               	goto	l1660
  1181     07DF  120A  118A  2800   	ljmp	start
  1182     07E2                     __end_of_main:
  1183                           
  1184                           	psect	text1
  1185     018A                     __ptext1:	
  1186 ;; *************** function _sprintf *****************
  1187 ;; Defined at:
  1188 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\nf_sprintf.c"
  1189 ;; Parameters:    Size  Location     Type
  1190 ;;  s               1    wreg     PTR unsigned char 
  1191 ;;		 -> main@yuzde_veri(16), 
  1192 ;;  fmt             1   33[BANK0 ] PTR const unsigned char 
  1193 ;;		 -> STR_7(4), 
  1194 ;; Auto vars:     Size  Location     Type
  1195 ;;  s               1   38[BANK0 ] PTR unsigned char 
  1196 ;;		 -> main@yuzde_veri(16), 
  1197 ;;  f              11   39[BANK0 ] struct _IO_FILE
  1198 ;;  ret             2    0        int 
  1199 ;;  ap              1   37[BANK0 ] PTR void [1]
  1200 ;;		 -> ?_sprintf(2), 
  1201 ;; Return value:  Size  Location     Type
  1202 ;;                  2   33[BANK0 ] int 
  1203 ;; Registers used:
  1204 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1205 ;; Tracked objects:
  1206 ;;		On entry : 0/0
  1207 ;;		On exit  : 0/0
  1208 ;;		Unchanged: 0/0
  1209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1210 ;;      Params:         0       3       0       0       0
  1211 ;;      Locals:         0      13       0       0       0
  1212 ;;      Temps:          0       1       0       0       0
  1213 ;;      Totals:         0      17       0       0       0
  1214 ;;Total ram usage:       17 bytes
  1215 ;; Hardware stack levels used: 1
  1216 ;; Hardware stack levels required when called: 7
  1217 ;; This function calls:
  1218 ;;		_vfprintf
  1219 ;; This function is called by:
  1220 ;;		_main
  1221 ;; This function uses a non-reentrant model
  1222 ;;
  1223                           
  1224     018A                     _sprintf:	
  1225                           ;psect for function _sprintf
  1226                           
  1227                           
  1228                           ;incstack = 0
  1229                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1230                           ;sprintf@s stored from wreg
  1231     018A  1283               	bcf	3,5	;RP0=0, select bank0
  1232     018B  1303               	bcf	3,6	;RP1=0, select bank0
  1233     018C  00C6               	movwf	sprintf@s
  1234     018D                     l1614:
  1235     018D  3042               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  1236     018E  00C5               	movwf	sprintf@ap
  1237     018F  0846               	movf	sprintf@s,w
  1238     0190  00C7               	movwf	sprintf@f
  1239     0191                     l1616:
  1240     0191  01C9               	clrf	sprintf@f+2
  1241     0192  01CA               	clrf	sprintf@f+3
  1242     0193                     l1618:
  1243     0193  01D0               	clrf	sprintf@f+9
  1244     0194  01D1               	clrf	sprintf@f+10
  1245     0195                     l1620:
  1246     0195  0841               	movf	sprintf@fmt,w
  1247     0196  00BD               	movwf	vfprintf@fmt
  1248     0197  3045               	movlw	(low (sprintf@ap| 0))& (0+255)
  1249     0198  00BE               	movwf	vfprintf@ap
  1250     0199  3047               	movlw	(low (sprintf@f| 0))& (0+255)
  1251     019A  120A  118A  21A9  120A  118A  	fcall	_vfprintf
  1252     019F                     l1622:
  1253     019F  1283               	bcf	3,5	;RP0=0, select bank0
  1254     01A0  1303               	bcf	3,6	;RP1=0, select bank0
  1255     01A1  0849               	movf	sprintf@f+2,w
  1256     01A2  0746               	addwf	sprintf@s,w
  1257     01A3  00C4               	movwf	??_sprintf
  1258     01A4  0844               	movf	??_sprintf,w
  1259     01A5  0084               	movwf	4
  1260     01A6  1383               	bcf	3,7	;select IRP bank0
  1261     01A7  0180               	clrf	0
  1262     01A8                     l695:
  1263     01A8  0008               	return
  1264     01A9                     __end_of_sprintf:
  1265                           
  1266                           	psect	text2
  1267     01A9                     __ptext2:	
  1268 ;; *************** function _vfprintf *****************
  1269 ;; Defined at:
  1270 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c"
  1271 ;; Parameters:    Size  Location     Type
  1272 ;;  fp              1    wreg     PTR struct _IO_FILE
  1273 ;;		 -> sprintf@f(11), 
  1274 ;;  fmt             1   29[BANK0 ] PTR const unsigned char 
  1275 ;;		 -> STR_7(4), 
  1276 ;;  ap              1   30[BANK0 ] PTR PTR void 
  1277 ;;		 -> sprintf@ap(1), 
  1278 ;; Auto vars:     Size  Location     Type
  1279 ;;  fp              1   31[BANK0 ] PTR struct _IO_FILE
  1280 ;;		 -> sprintf@f(11), 
  1281 ;;  cfmt            1   32[BANK0 ] PTR unsigned char 
  1282 ;;		 -> STR_7(4), 
  1283 ;; Return value:  Size  Location     Type
  1284 ;;                  2   29[BANK0 ] int 
  1285 ;; Registers used:
  1286 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1287 ;; Tracked objects:
  1288 ;;		On entry : 0/0
  1289 ;;		On exit  : 0/0
  1290 ;;		Unchanged: 0/0
  1291 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1292 ;;      Params:         0       2       0       0       0
  1293 ;;      Locals:         0       2       0       0       0
  1294 ;;      Temps:          0       0       0       0       0
  1295 ;;      Totals:         0       4       0       0       0
  1296 ;;Total ram usage:        4 bytes
  1297 ;; Hardware stack levels used: 1
  1298 ;; Hardware stack levels required when called: 6
  1299 ;; This function calls:
  1300 ;;		_vfpfcnvrt
  1301 ;; This function is called by:
  1302 ;;		_sprintf
  1303 ;; This function uses a non-reentrant model
  1304 ;;
  1305                           
  1306     01A9                     _vfprintf:	
  1307                           ;psect for function _vfprintf
  1308                           
  1309                           
  1310                           ;incstack = 0
  1311 ;; using string table level
  1312                           ; Regs used in _vfprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1313                           ;vfprintf@fp stored from wreg
  1314     01A9  1283               	bcf	3,5	;RP0=0, select bank0
  1315     01AA  1303               	bcf	3,6	;RP1=0, select bank0
  1316     01AB  00BF               	movwf	vfprintf@fp
  1317     01AC                     l1564:
  1318                           
  1319                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.46\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
  1320     01AC  083D               	movf	vfprintf@fmt,w
  1321     01AD  00C0               	movwf	vfprintf@cfmt
  1322                           
  1323                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  1324     01AE  29B9               	goto	l1568
  1325     01AF                     l1566:
  1326                           
  1327                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  1328     01AF  3040               	movlw	(low (vfprintf@cfmt| 0))& (0+255)
  1329     01B0  00B3               	movwf	vfpfcnvrt@fmt
  1330     01B1  083E               	movf	vfprintf@ap,w
  1331     01B2  00B4               	movwf	vfpfcnvrt@ap
  1332     01B3  083F               	movf	vfprintf@fp,w
  1333     01B4  120A  118A  25AA  120A  118A  	fcall	_vfpfcnvrt
  1334     01B9                     l1568:
  1335                           
  1336                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  1337     01B9  1283               	bcf	3,5	;RP0=0, select bank0
  1338     01BA  1303               	bcf	3,6	;RP1=0, select bank0
  1339     01BB  0840               	movf	vfprintf@cfmt,w
  1340     01BC  0084               	movwf	4
  1341     01BD  120A  118A  200D  120A  118A  	fcall	stringdir
  1342     01C2  3A00               	xorlw	0
  1343     01C3  1D03               	skipz
  1344     01C4  29C6               	goto	u1401
  1345     01C5  29C7               	goto	u1400
  1346     01C6                     u1401:
  1347     01C6  29AF               	goto	l1566
  1348     01C7                     u1400:
  1349     01C7                     l1570:
  1350                           
  1351                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1835:  return 0;
  1352     01C7  01BD               	clrf	?_vfprintf
  1353     01C8  01BE               	clrf	?_vfprintf+1
  1354     01C9                     l756:
  1355     01C9  0008               	return
  1356     01CA                     __end_of_vfprintf:
  1357                           
  1358                           	psect	text3
  1359     05AA                     __ptext3:	
  1360 ;; *************** function _vfpfcnvrt *****************
  1361 ;; Defined at:
  1362 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c"
  1363 ;; Parameters:    Size  Location     Type
  1364 ;;  fp              1    wreg     PTR struct _IO_FILE
  1365 ;;		 -> sprintf@f(11), 
  1366 ;;  fmt             1   19[BANK0 ] PTR PTR unsigned char 
  1367 ;;		 -> vfprintf@cfmt(1), 
  1368 ;;  ap              1   20[BANK0 ] PTR PTR void 
  1369 ;;		 -> sprintf@ap(1), 
  1370 ;; Auto vars:     Size  Location     Type
  1371 ;;  fp              1   27[BANK0 ] PTR struct _IO_FILE
  1372 ;;		 -> sprintf@f(11), 
  1373 ;;  convarg         4   23[BANK0 ] struct .
  1374 ;;  cp              1   28[BANK0 ] PTR unsigned char 
  1375 ;;		 -> STR_7(4), 
  1376 ;;  done            1    0        _Bool 
  1377 ;;  c               1    0        unsigned char 
  1378 ;; Return value:  Size  Location     Type
  1379 ;;                  1    wreg      void 
  1380 ;; Registers used:
  1381 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1382 ;; Tracked objects:
  1383 ;;		On entry : 0/0
  1384 ;;		On exit  : 0/0
  1385 ;;		Unchanged: 0/0
  1386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1387 ;;      Params:         0       2       0       0       0
  1388 ;;      Locals:         0       6       0       0       0
  1389 ;;      Temps:          0       2       0       0       0
  1390 ;;      Totals:         0      10       0       0       0
  1391 ;;Total ram usage:       10 bytes
  1392 ;; Hardware stack levels used: 1
  1393 ;; Hardware stack levels required when called: 5
  1394 ;; This function calls:
  1395 ;;		_dtoa
  1396 ;;		_fputc
  1397 ;;		_read_prec_or_width
  1398 ;; This function is called by:
  1399 ;;		_vfprintf
  1400 ;; This function uses a non-reentrant model
  1401 ;;
  1402                           
  1403     05AA                     _vfpfcnvrt:	
  1404                           ;psect for function _vfpfcnvrt
  1405                           
  1406                           
  1407                           ;incstack = 0
  1408 ;; using string table level
  1409                           ; Regs used in _vfpfcnvrt: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1410                           ;vfpfcnvrt@fp stored from wreg
  1411     05AA  1283               	bcf	3,5	;RP0=0, select bank0
  1412     05AB  1303               	bcf	3,6	;RP1=0, select bank0
  1413     05AC  00BB               	movwf	vfpfcnvrt@fp
  1414     05AD                     l1486:
  1415                           
  1416                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\co
      +                          mmon\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
  1417     05AD  0833               	movf	vfpfcnvrt@fmt,w
  1418     05AE  0084               	movwf	4
  1419     05AF  1383               	bcf	3,7	;select IRP bank0
  1420     05B0  0800               	movf	0,w
  1421     05B1  0084               	movwf	4
  1422     05B2  120A  118A  200D  120A  118A  	fcall	stringdir
  1423     05B7  3A25               	xorlw	37
  1424     05B8  1D03               	skipz
  1425     05B9  2DBB               	goto	u1251
  1426     05BA  2DBC               	goto	u1250
  1427     05BB                     u1251:
  1428     05BB  2E29               	goto	l1520
  1429     05BC                     u1250:
  1430     05BC                     l1488:
  1431                           
  1432                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  1433     05BC  3001               	movlw	1
  1434     05BD  00FF               	movwf	btemp+1
  1435     05BE  0833               	movf	vfpfcnvrt@fmt,w
  1436     05BF  0084               	movwf	4
  1437     05C0  087F               	movf	btemp+1,w
  1438     05C1  0780               	addwf	0,f
  1439     05C2                     l1490:
  1440                           
  1441                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  1442     05C2  01E8               	clrf	_width
  1443     05C3  01E9               	clrf	_width+1
  1444     05C4  1003               	clrc
  1445     05C5  3000               	movlw	0
  1446     05C6  1803               	btfsc	3,0
  1447     05C7  3001               	movlw	1
  1448     05C8  00EC               	movwf	_flags
  1449     05C9                     l1492:
  1450                           
  1451                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  1452     05C9  30FF               	movlw	255
  1453     05CA  00EA               	movwf	_prec
  1454     05CB  30FF               	movlw	255
  1455     05CC  00EB               	movwf	_prec+1
  1456     05CD                     l1494:
  1457                           
  1458                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1256:   width = r
      +                          ead_prec_or_width(fmt, ap);
  1459     05CD  0834               	movf	vfpfcnvrt@ap,w
  1460     05CE  00F6               	movwf	read_prec_or_width@ap
  1461     05CF  0833               	movf	vfpfcnvrt@fmt,w
  1462     05D0  120A  118A  23CE  120A  118A  	fcall	_read_prec_or_width
  1463     05D5  0877               	movf	?_read_prec_or_width+1,w
  1464     05D6  1283               	bcf	3,5	;RP0=0, select bank0
  1465     05D7  1303               	bcf	3,6	;RP1=0, select bank0
  1466     05D8  00E9               	movwf	_width+1
  1467     05D9  0876               	movf	?_read_prec_or_width,w
  1468     05DA  00E8               	movwf	_width
  1469     05DB                     l1496:
  1470                           
  1471                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1257:   if (width
      +                           < 0) {
  1472     05DB  1FE9               	btfss	_width+1,7
  1473     05DC  2DDE               	goto	u1261
  1474     05DD  2DDF               	goto	u1260
  1475     05DE                     u1261:
  1476     05DE  2DE5               	goto	l1502
  1477     05DF                     u1260:
  1478     05DF                     l1498:
  1479                           
  1480                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1258:    flags |=
      +                           (1 << 0);
  1481     05DF  146C               	bsf	_flags,0
  1482     05E0                     l1500:
  1483                           
  1484                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1259:    width = 
      +                          -width;
  1485     05E0  09E8               	comf	_width,f
  1486     05E1  09E9               	comf	_width+1,f
  1487     05E2  0AE8               	incf	_width,f
  1488     05E3  1903               	skipnz
  1489     05E4  0AE9               	incf	_width+1,f
  1490     05E5                     l1502:
  1491                           
  1492                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1291:   cp = *fmt
      +                          ;
  1493     05E5  0833               	movf	vfpfcnvrt@fmt,w
  1494     05E6  0084               	movwf	4
  1495     05E7  1383               	bcf	3,7	;select IRP bank0
  1496     05E8  0800               	movf	0,w
  1497     05E9  00BC               	movwf	vfpfcnvrt@cp
  1498     05EA                     l1504:
  1499                           
  1500                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1361:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  1501     05EA  083C               	movf	vfpfcnvrt@cp,w
  1502     05EB  0084               	movwf	4
  1503     05EC  120A  118A  200D  120A  118A  	fcall	stringdir
  1504     05F1  3A64               	xorlw	100
  1505     05F2  1903               	skipnz
  1506     05F3  2DF5               	goto	u1271
  1507     05F4  2DF6               	goto	u1270
  1508     05F5                     u1271:
  1509     05F5  2E02               	goto	l1508
  1510     05F6                     u1270:
  1511     05F6                     l1506:
  1512     05F6  083C               	movf	vfpfcnvrt@cp,w
  1513     05F7  0084               	movwf	4
  1514     05F8  120A  118A  200D  120A  118A  	fcall	stringdir
  1515     05FD  3A69               	xorlw	105
  1516     05FE  1D03               	skipz
  1517     05FF  2E01               	goto	u1281
  1518     0600  2E02               	goto	u1280
  1519     0601                     u1281:
  1520     0601  2E1F               	goto	l1516
  1521     0602                     u1280:
  1522     0602                     l1508:
  1523                           
  1524                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1404:    convarg.
      +                          sint = (vfpf_sint_t)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  1525     0602  0834               	movf	vfpfcnvrt@ap,w
  1526     0603  0084               	movwf	4
  1527     0604  0800               	movf	0,w
  1528     0605  00FF               	movwf	btemp+1
  1529     0606  3002               	movlw	2
  1530     0607  0780               	addwf	0,f
  1531     0608  087F               	movf	btemp+1,w
  1532     0609  0084               	movwf	4
  1533     060A  0800               	movf	0,w
  1534     060B  00B7               	movwf	vfpfcnvrt@convarg
  1535     060C  0A84               	incf	4,f
  1536     060D  0800               	movf	0,w
  1537     060E  00B8               	movwf	vfpfcnvrt@convarg+1
  1538     060F                     l1510:
  1539                           
  1540                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1406:    *fmt = c
      +                          p+1;
  1541     060F  0833               	movf	vfpfcnvrt@fmt,w
  1542     0610  0084               	movwf	4
  1543     0611  083C               	movf	vfpfcnvrt@cp,w
  1544     0612  3E01               	addlw	1
  1545     0613  0080               	movwf	0
  1546     0614                     l1512:
  1547                           
  1548                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1432:    return (
      +                          void) dtoa(fp, convarg.sint);;	Return value of _vfpfcnvrt is never used
  1549     0614  0838               	movf	vfpfcnvrt@convarg+1,w
  1550     0615  00A9               	movwf	dtoa@d+1
  1551     0616  0837               	movf	vfpfcnvrt@convarg,w
  1552     0617  00A8               	movwf	dtoa@d
  1553     0618  083B               	movf	vfpfcnvrt@fp,w
  1554     0619  120A  118A  2641  120A  118A  	fcall	_dtoa
  1555     061E  2E40               	goto	l750
  1556     061F                     l1516:
  1557                           
  1558                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  1559     061F  3001               	movlw	1
  1560     0620  00FF               	movwf	btemp+1
  1561     0621  1283               	bcf	3,5	;RP0=0, select bank0
  1562     0622  1303               	bcf	3,6	;RP1=0, select bank0
  1563     0623  0833               	movf	vfpfcnvrt@fmt,w
  1564     0624  0084               	movwf	4
  1565     0625  087F               	movf	btemp+1,w
  1566     0626  1383               	bcf	3,7	;select IRP bank0
  1567     0627  0780               	addwf	0,f
  1568     0628  2E40               	goto	l750
  1569     0629                     l1520:
  1570                           
  1571                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  1572     0629  0833               	movf	vfpfcnvrt@fmt,w
  1573     062A  0084               	movwf	4
  1574     062B  0800               	movf	0,w
  1575     062C  0084               	movwf	4
  1576     062D  120A  118A  200D  120A  118A  	fcall	stringdir
  1577     0632  00B5               	movwf	??_vfpfcnvrt
  1578     0633  01B6               	clrf	??_vfpfcnvrt+1
  1579     0634  0835               	movf	??_vfpfcnvrt,w
  1580     0635  00F0               	movwf	fputc@c
  1581     0636  0836               	movf	??_vfpfcnvrt+1,w
  1582     0637  00F1               	movwf	fputc@c+1
  1583     0638  083B               	movf	vfpfcnvrt@fp,w
  1584     0639  00F2               	movwf	fputc@fp
  1585     063A  120A  118A  2378  120A  118A  	fcall	_fputc
  1586     063F  2E1F               	goto	l1516
  1587     0640                     l750:
  1588     0640  0008               	return
  1589     0641                     __end_of_vfpfcnvrt:
  1590                           
  1591                           	psect	text4
  1592     03CE                     __ptext4:	
  1593 ;; *************** function _read_prec_or_width *****************
  1594 ;; Defined at:
  1595 ;;		line 1158 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c"
  1596 ;; Parameters:    Size  Location     Type
  1597 ;;  fmt             1    wreg     PTR PTR const unsigned c
  1598 ;;		 -> vfprintf@cfmt(1), 
  1599 ;;  ap              1    6[COMMON] PTR PTR void [1]
  1600 ;;		 -> sprintf@ap(1), 
  1601 ;; Auto vars:     Size  Location     Type
  1602 ;;  fmt             1   11[COMMON] PTR PTR const unsigned c
  1603 ;;		 -> vfprintf@cfmt(1), 
  1604 ;;  c               1    8[COMMON] unsigned char 
  1605 ;;  n               2    9[COMMON] int 
  1606 ;; Return value:  Size  Location     Type
  1607 ;;                  2    6[COMMON] int 
  1608 ;; Registers used:
  1609 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1610 ;; Tracked objects:
  1611 ;;		On entry : 0/0
  1612 ;;		On exit  : 0/0
  1613 ;;		Unchanged: 0/0
  1614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1615 ;;      Params:         2       0       0       0       0
  1616 ;;      Locals:         4       0       0       0       0
  1617 ;;      Temps:          0       0       0       0       0
  1618 ;;      Totals:         6       0       0       0       0
  1619 ;;Total ram usage:        6 bytes
  1620 ;; Hardware stack levels used: 1
  1621 ;; Hardware stack levels required when called: 1
  1622 ;; This function calls:
  1623 ;;		___wmul
  1624 ;; This function is called by:
  1625 ;;		_vfpfcnvrt
  1626 ;; This function uses a non-reentrant model
  1627 ;;
  1628                           
  1629     03CE                     _read_prec_or_width:	
  1630                           ;psect for function _read_prec_or_width
  1631                           
  1632                           
  1633                           ;incstack = 0
  1634                           ; Regs used in _read_prec_or_width: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1635                           ;read_prec_or_width@fmt stored from wreg
  1636     03CE  00FB               	movwf	read_prec_or_width@fmt
  1637     03CF                     l1440:
  1638                           
  1639                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1159:     int n =
      +                           0;
  1640     03CF  01F9               	clrf	read_prec_or_width@n
  1641     03D0  01FA               	clrf	read_prec_or_width@n+1
  1642     03D1                     l1442:
  1643                           
  1644                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1160:     if ((*f
      +                          mt)[0] == '*') {
  1645     03D1  087B               	movf	read_prec_or_width@fmt,w
  1646     03D2  0084               	movwf	4
  1647     03D3  1383               	bcf	3,7	;select IRP bank0
  1648     03D4  0800               	movf	0,w
  1649     03D5  0084               	movwf	4
  1650     03D6  120A  118A  200D  120A  118A  	fcall	stringdir
  1651     03DB  3A2A               	xorlw	42
  1652     03DC  1D03               	skipz
  1653     03DD  2BDF               	goto	u1221
  1654     03DE  2BE0               	goto	u1220
  1655     03DF                     u1221:
  1656     03DF  2C10               	goto	l1450
  1657     03E0                     u1220:
  1658     03E0                     l1444:
  1659                           
  1660                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1161:         ++*
      +                          fmt;
  1661     03E0  3001               	movlw	1
  1662     03E1  00FF               	movwf	btemp+1
  1663     03E2  087B               	movf	read_prec_or_width@fmt,w
  1664     03E3  0084               	movwf	4
  1665     03E4  087F               	movf	btemp+1,w
  1666     03E5  0780               	addwf	0,f
  1667                           
  1668                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1162:         n =
      +                           (*(int *)__va_arg(*(int **)*ap, (int)0));
  1669     03E6  0876               	movf	read_prec_or_width@ap,w
  1670     03E7  0084               	movwf	4
  1671     03E8  0800               	movf	0,w
  1672     03E9  00FF               	movwf	btemp+1
  1673     03EA  3002               	movlw	2
  1674     03EB  0780               	addwf	0,f
  1675     03EC  087F               	movf	btemp+1,w
  1676     03ED  0084               	movwf	4
  1677     03EE  0800               	movf	0,w
  1678     03EF  00F9               	movwf	read_prec_or_width@n
  1679     03F0  0A84               	incf	4,f
  1680     03F1  0800               	movf	0,w
  1681     03F2  00FA               	movwf	read_prec_or_width@n+1
  1682                           
  1683                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1163:     } else 
      +                          {
  1684     03F3  2C21               	goto	l1452
  1685     03F4                     l1446:
  1686                           
  1687                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1166:            
      +                           n = n * 10 + c;
  1688     03F4  087A               	movf	read_prec_or_width@n+1,w
  1689     03F5  00F1               	movwf	___wmul@multiplier+1
  1690     03F6  0879               	movf	read_prec_or_width@n,w
  1691     03F7  00F0               	movwf	___wmul@multiplier
  1692     03F8  300A               	movlw	10
  1693     03F9  00F2               	movwf	___wmul@multiplicand
  1694     03FA  3000               	movlw	0
  1695     03FB  00F3               	movwf	___wmul@multiplicand+1
  1696     03FC  120A  118A  21EC  120A  118A  	fcall	___wmul
  1697     0401  0878               	movf	read_prec_or_width@c,w
  1698     0402  0770               	addwf	?___wmul,w
  1699     0403  00F9               	movwf	read_prec_or_width@n
  1700     0404  3000               	movlw	0
  1701     0405  1803               	skipnc
  1702     0406  3001               	movlw	1
  1703     0407  0771               	addwf	?___wmul+1,w
  1704     0408  00FA               	movwf	read_prec_or_width@n+1
  1705     0409                     l1448:
  1706                           
  1707                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1167:            
      +                           ++*fmt;
  1708     0409  3001               	movlw	1
  1709     040A  00FF               	movwf	btemp+1
  1710     040B  087B               	movf	read_prec_or_width@fmt,w
  1711     040C  0084               	movwf	4
  1712     040D  087F               	movf	btemp+1,w
  1713     040E  1383               	bcf	3,7	;select IRP bank0
  1714     040F  0780               	addwf	0,f
  1715     0410                     l1450:
  1716                           
  1717                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1165:         whi
      +                          le ((c = ((unsigned)(*fmt)[0]) - '0') < 10) {
  1718     0410  087B               	movf	read_prec_or_width@fmt,w
  1719     0411  0084               	movwf	4
  1720     0412  0800               	movf	0,w
  1721     0413  0084               	movwf	4
  1722     0414  120A  118A  200D  120A  118A  	fcall	stringdir
  1723     0419  3ED0               	addlw	208
  1724     041A  00F8               	movwf	read_prec_or_width@c
  1725     041B  300A               	movlw	10
  1726     041C  0278               	subwf	read_prec_or_width@c,w
  1727     041D  1C03               	skipc
  1728     041E  2C20               	goto	u1231
  1729     041F  2C21               	goto	u1230
  1730     0420                     u1231:
  1731     0420  2BF4               	goto	l1446
  1732     0421                     u1230:
  1733     0421                     l1452:
  1734                           
  1735                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1170:     return 
      +                          n;
  1736     0421  087A               	movf	read_prec_or_width@n+1,w
  1737     0422  00F7               	movwf	?_read_prec_or_width+1
  1738     0423  0879               	movf	read_prec_or_width@n,w
  1739     0424  00F6               	movwf	?_read_prec_or_width
  1740     0425                     l742:
  1741     0425  0008               	return
  1742     0426                     __end_of_read_prec_or_width:
  1743                           
  1744                           	psect	text5
  1745     01EC                     __ptext5:	
  1746 ;; *************** function ___wmul *****************
  1747 ;; Defined at:
  1748 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\Umul16.c"
  1749 ;; Parameters:    Size  Location     Type
  1750 ;;  multiplier      2    0[COMMON] unsigned int 
  1751 ;;  multiplicand    2    2[COMMON] unsigned int 
  1752 ;; Auto vars:     Size  Location     Type
  1753 ;;  product         2    4[COMMON] unsigned int 
  1754 ;; Return value:  Size  Location     Type
  1755 ;;                  2    0[COMMON] unsigned int 
  1756 ;; Registers used:
  1757 ;;		wreg, status,2, status,0
  1758 ;; Tracked objects:
  1759 ;;		On entry : 0/0
  1760 ;;		On exit  : 0/0
  1761 ;;		Unchanged: 0/0
  1762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1763 ;;      Params:         4       0       0       0       0
  1764 ;;      Locals:         2       0       0       0       0
  1765 ;;      Temps:          0       0       0       0       0
  1766 ;;      Totals:         6       0       0       0       0
  1767 ;;Total ram usage:        6 bytes
  1768 ;; Hardware stack levels used: 1
  1769 ;; This function calls:
  1770 ;;		Nothing
  1771 ;; This function is called by:
  1772 ;;		_main
  1773 ;;		_read_prec_or_width
  1774 ;; This function uses a non-reentrant model
  1775 ;;
  1776                           
  1777     01EC                     ___wmul:	
  1778                           ;psect for function ___wmul
  1779                           
  1780     01EC                     l1268:	
  1781                           ;incstack = 0
  1782                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1783                           
  1784     01EC  01F4               	clrf	___wmul@product
  1785     01ED  01F5               	clrf	___wmul@product+1
  1786     01EE                     l1270:
  1787     01EE  1C70               	btfss	___wmul@multiplier,0
  1788     01EF  29F1               	goto	u821
  1789     01F0  29F2               	goto	u820
  1790     01F1                     u821:
  1791     01F1  29F8               	goto	l232
  1792     01F2                     u820:
  1793     01F2                     l1272:
  1794     01F2  0872               	movf	___wmul@multiplicand,w
  1795     01F3  07F4               	addwf	___wmul@product,f
  1796     01F4  1803               	skipnc
  1797     01F5  0AF5               	incf	___wmul@product+1,f
  1798     01F6  0873               	movf	___wmul@multiplicand+1,w
  1799     01F7  07F5               	addwf	___wmul@product+1,f
  1800     01F8                     l232:
  1801     01F8  3001               	movlw	1
  1802     01F9                     u835:
  1803     01F9  1003               	clrc
  1804     01FA  0DF2               	rlf	___wmul@multiplicand,f
  1805     01FB  0DF3               	rlf	___wmul@multiplicand+1,f
  1806     01FC  3EFF               	addlw	-1
  1807     01FD  1D03               	skipz
  1808     01FE  29F9               	goto	u835
  1809     01FF                     l1274:
  1810     01FF  3001               	movlw	1
  1811     0200                     u845:
  1812     0200  1003               	clrc
  1813     0201  0CF1               	rrf	___wmul@multiplier+1,f
  1814     0202  0CF0               	rrf	___wmul@multiplier,f
  1815     0203  3EFF               	addlw	-1
  1816     0204  1D03               	skipz
  1817     0205  2A00               	goto	u845
  1818     0206                     l1276:
  1819     0206  0870               	movf	___wmul@multiplier,w
  1820     0207  0471               	iorwf	___wmul@multiplier+1,w
  1821     0208  1D03               	btfss	3,2
  1822     0209  2A0B               	goto	u851
  1823     020A  2A0C               	goto	u850
  1824     020B                     u851:
  1825     020B  29EE               	goto	l1270
  1826     020C                     u850:
  1827     020C                     l1278:
  1828     020C  0875               	movf	___wmul@product+1,w
  1829     020D  00F1               	movwf	?___wmul+1
  1830     020E  0874               	movf	___wmul@product,w
  1831     020F  00F0               	movwf	?___wmul
  1832     0210                     l234:
  1833     0210  0008               	return
  1834     0211                     __end_of___wmul:
  1835                           
  1836                           	psect	text6
  1837     0641                     __ptext6:	
  1838 ;; *************** function _dtoa *****************
  1839 ;; Defined at:
  1840 ;;		line 513 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c"
  1841 ;; Parameters:    Size  Location     Type
  1842 ;;  fp              1    wreg     PTR struct _IO_FILE
  1843 ;;		 -> sprintf@f(11), 
  1844 ;;  d               2    8[BANK0 ] int 
  1845 ;; Auto vars:     Size  Location     Type
  1846 ;;  fp              1   12[BANK0 ] PTR struct _IO_FILE
  1847 ;;		 -> sprintf@f(11), 
  1848 ;;  i               2   17[BANK0 ] int 
  1849 ;;  w               2   13[BANK0 ] int 
  1850 ;;  s               1   16[BANK0 ] unsigned char 
  1851 ;;  p               1   15[BANK0 ] _Bool 
  1852 ;; Return value:  Size  Location     Type
  1853 ;;                  1    wreg      void 
  1854 ;; Registers used:
  1855 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1856 ;; Tracked objects:
  1857 ;;		On entry : 0/0
  1858 ;;		On exit  : 0/0
  1859 ;;		Unchanged: 0/0
  1860 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1861 ;;      Params:         0       2       0       0       0
  1862 ;;      Locals:         0       9       0       0       0
  1863 ;;      Temps:          0       0       0       0       0
  1864 ;;      Totals:         0      11       0       0       0
  1865 ;;Total ram usage:       11 bytes
  1866 ;; Hardware stack levels used: 1
  1867 ;; Hardware stack levels required when called: 4
  1868 ;; This function calls:
  1869 ;;		___awdiv
  1870 ;;		___awmod
  1871 ;;		_abs
  1872 ;;		_pad
  1873 ;; This function is called by:
  1874 ;;		_vfpfcnvrt
  1875 ;; This function uses a non-reentrant model
  1876 ;;
  1877                           
  1878     0641                     _dtoa:	
  1879                           ;psect for function _dtoa
  1880                           
  1881                           
  1882                           ;incstack = 0
  1883                           ; Regs used in _dtoa: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1884                           ;dtoa@fp stored from wreg
  1885     0641  1283               	bcf	3,5	;RP0=0, select bank0
  1886     0642  1303               	bcf	3,6	;RP1=0, select bank0
  1887     0643  00AC               	movwf	dtoa@fp
  1888     0644                     l1398:
  1889                           
  1890                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 513: static void 
      +                          dtoa(FILE *fp, vfpf_sint_t d);C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\commo
      +                          n\doprnt.c: 514: {;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c:
      +                           515:  char s;;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 516
      +                          :     int i, w;;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 52
      +                          0:  _Bool p = 1;
  1891     0644  01AF               	clrf	dtoa@p
  1892     0645  0AAF               	incf	dtoa@p,f
  1893     0646                     l1400:
  1894                           
  1895                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 524:     s = d < 
      +                          0 ? 1 : 0;
  1896     0646  1BA9               	btfsc	dtoa@d+1,7
  1897     0647  2E49               	goto	u1141
  1898     0648  2E4B               	goto	u1140
  1899     0649                     u1141:
  1900     0649  3001               	movlw	1
  1901     064A  2E4C               	goto	u1150
  1902     064B                     u1140:
  1903     064B  3000               	movlw	0
  1904     064C                     u1150:
  1905     064C  00B0               	movwf	dtoa@s
  1906                           
  1907                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 535:     w = widt
      +                          h;
  1908     064D  0869               	movf	_width+1,w
  1909     064E  00AE               	movwf	dtoa@w+1
  1910     064F  0868               	movf	_width,w
  1911     0650  00AD               	movwf	dtoa@w
  1912     0651                     l1402:
  1913                           
  1914                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 536:     if (s
  1915     0651  0830               	movf	dtoa@s,w
  1916     0652  1903               	btfsc	3,2
  1917     0653  2E55               	goto	u1161
  1918     0654  2E56               	goto	u1160
  1919     0655                     u1161:
  1920     0655  2E6C               	goto	l723
  1921     0656                     u1160:
  1922     0656                     l1404:
  1923                           
  1924                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 540:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 541:         --w;
  1925     0656  30FF               	movlw	255
  1926     0657  07AD               	addwf	dtoa@w,f
  1927     0658  1803               	skipnc
  1928     0659  0AAE               	incf	dtoa@w+1,f
  1929     065A  30FF               	movlw	255
  1930     065B  07AE               	addwf	dtoa@w+1,f
  1931     065C                     l1406:
  1932                           
  1933                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 542:   s = s ? '-
      +                          ' : '+';
  1934     065C  0830               	movf	dtoa@s,w
  1935     065D  1D03               	btfss	3,2
  1936     065E  2E60               	goto	u1171
  1937     065F  2E61               	goto	u1170
  1938     0660                     u1171:
  1939     0660  2E66               	goto	l1410
  1940     0661                     u1170:
  1941     0661                     l1408:
  1942     0661  302B               	movlw	43
  1943     0662  00AA               	movwf	_dtoa$639
  1944     0663  3000               	movlw	0
  1945     0664  00AB               	movwf	_dtoa$639+1
  1946     0665  2E6A               	goto	l727
  1947     0666                     l1410:
  1948     0666  302D               	movlw	45
  1949     0667  00AA               	movwf	_dtoa$639
  1950     0668  3000               	movlw	0
  1951     0669  00AB               	movwf	_dtoa$639+1
  1952     066A                     l727:
  1953     066A  082A               	movf	_dtoa$639,w
  1954     066B  00B0               	movwf	dtoa@s
  1955     066C                     l723:	
  1956                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 543:     }
  1957                           
  1958                           
  1959                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 552:     i = size
      +                          of(dbuf) - 1;
  1960     066C  301F               	movlw	31
  1961     066D  00B1               	movwf	dtoa@i
  1962     066E  3000               	movlw	0
  1963     066F  00B2               	movwf	dtoa@i+1
  1964     0670                     l1412:
  1965                           
  1966                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 553:     dbuf[i] 
      +                          = '\0';
  1967     0670  1683               	bsf	3,5	;RP0=1, select bank1
  1968     0671  1303               	bcf	3,6	;RP1=0, select bank1
  1969     0672  01BF               	clrf	(_dbuf^(0+128)+31)
  1970                           
  1971                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 554:     while (!
      +                          (i < 1) && (d != 0
  1972     0673  2EB3               	goto	l1424
  1973     0674                     l1414:
  1974                           
  1975                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 563:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 564:         --i;
  1976     0674  30FF               	movlw	255
  1977     0675  07B1               	addwf	dtoa@i,f
  1978     0676  1803               	skipnc
  1979     0677  0AB2               	incf	dtoa@i+1,f
  1980     0678  30FF               	movlw	255
  1981     0679  07B2               	addwf	dtoa@i+1,f
  1982     067A                     l1416:
  1983                           
  1984                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 565:         dbuf
      +                          [i] = (char)((int)'0' + abs(d % 10));
  1985     067A  0831               	movf	dtoa@i,w
  1986     067B  3EA0               	addlw	(low (_dbuf| 0))& (0+255)
  1987     067C  0084               	movwf	4
  1988     067D  300A               	movlw	10
  1989     067E  00F0               	movwf	___awmod@divisor
  1990     067F  3000               	movlw	0
  1991     0680  00F1               	movwf	___awmod@divisor+1
  1992     0681  0829               	movf	dtoa@d+1,w
  1993     0682  00F3               	movwf	___awmod@dividend+1
  1994     0683  0828               	movf	dtoa@d,w
  1995     0684  00F2               	movwf	___awmod@dividend
  1996     0685  120A  118A  2426  120A  118A  	fcall	___awmod
  1997     068A  0871               	movf	?___awmod+1,w
  1998     068B  00F7               	movwf	abs@a+1
  1999     068C  0870               	movf	?___awmod,w
  2000     068D  00F6               	movwf	abs@a
  2001     068E  120A  118A  212B  120A  118A  	fcall	_abs
  2002     0693  0876               	movf	?_abs,w
  2003     0694  3E30               	addlw	48
  2004     0695  1383               	bcf	3,7	;select IRP bank1
  2005     0696  0080               	movwf	0
  2006     0697                     l1418:
  2007                           
  2008                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 569:   p = 0;
  2009     0697  1283               	bcf	3,5	;RP0=0, select bank0
  2010     0698  1303               	bcf	3,6	;RP1=0, select bank0
  2011     0699  01AF               	clrf	dtoa@p
  2012     069A                     l1420:
  2013                           
  2014                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 571:         --w;
  2015     069A  30FF               	movlw	255
  2016     069B  07AD               	addwf	dtoa@w,f
  2017     069C  1803               	skipnc
  2018     069D  0AAE               	incf	dtoa@w+1,f
  2019     069E  30FF               	movlw	255
  2020     069F  07AE               	addwf	dtoa@w+1,f
  2021     06A0                     l1422:
  2022                           
  2023                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 572:         d = 
      +                          d / 10;
  2024     06A0  300A               	movlw	10
  2025     06A1  00F0               	movwf	___awdiv@divisor
  2026     06A2  3000               	movlw	0
  2027     06A3  00F1               	movwf	___awdiv@divisor+1
  2028     06A4  0829               	movf	dtoa@d+1,w
  2029     06A5  00F3               	movwf	___awdiv@dividend+1
  2030     06A6  0828               	movf	dtoa@d,w
  2031     06A7  00F2               	movwf	___awdiv@dividend
  2032     06A8  120A  118A  2543  120A  118A  	fcall	___awdiv
  2033     06AD  0871               	movf	?___awdiv+1,w
  2034     06AE  1283               	bcf	3,5	;RP0=0, select bank0
  2035     06AF  1303               	bcf	3,6	;RP1=0, select bank0
  2036     06B0  00A9               	movwf	dtoa@d+1
  2037     06B1  0870               	movf	?___awdiv,w
  2038     06B2  00A8               	movwf	dtoa@d
  2039     06B3                     l1424:
  2040                           
  2041                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 554:     while (!
      +                          (i < 1) && (d != 0
  2042     06B3  1283               	bcf	3,5	;RP0=0, select bank0
  2043     06B4  0832               	movf	dtoa@i+1,w
  2044     06B5  3A80               	xorlw	128
  2045     06B6  00FF               	movwf	btemp+1
  2046     06B7  3080               	movlw	128
  2047     06B8  027F               	subwf	btemp+1,w
  2048     06B9  1D03               	skipz
  2049     06BA  2EBD               	goto	u1185
  2050     06BB  3001               	movlw	1
  2051     06BC  0231               	subwf	dtoa@i,w
  2052     06BD                     u1185:
  2053     06BD  1C03               	skipc
  2054     06BE  2EC0               	goto	u1181
  2055     06BF  2EC1               	goto	u1180
  2056     06C0                     u1181:
  2057     06C0  2ECE               	goto	l1430
  2058     06C1                     u1180:
  2059     06C1                     l1426:
  2060     06C1  1283               	bcf	3,5	;RP0=0, select bank0
  2061     06C2  1303               	bcf	3,6	;RP1=0, select bank0
  2062     06C3  0828               	movf	dtoa@d,w
  2063     06C4  0429               	iorwf	dtoa@d+1,w
  2064     06C5  1D03               	btfss	3,2
  2065     06C6  2EC8               	goto	u1191
  2066     06C7  2EC9               	goto	u1190
  2067     06C8                     u1191:
  2068     06C8  2E74               	goto	l1414
  2069     06C9                     u1190:
  2070     06C9                     l1428:
  2071     06C9  082F               	movf	dtoa@p,w
  2072     06CA  1D03               	btfss	3,2
  2073     06CB  2ECD               	goto	u1201
  2074     06CC  2ECE               	goto	u1200
  2075     06CD                     u1201:
  2076     06CD  2E74               	goto	l1414
  2077     06CE                     u1200:
  2078     06CE                     l1430:
  2079                           
  2080                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 576:     if (s !=
      +                           0) {
  2081     06CE  1283               	bcf	3,5	;RP0=0, select bank0
  2082     06CF  1303               	bcf	3,6	;RP1=0, select bank0
  2083     06D0  0830               	movf	dtoa@s,w
  2084     06D1  1903               	btfsc	3,2
  2085     06D2  2ED4               	goto	u1211
  2086     06D3  2ED5               	goto	u1210
  2087     06D4                     u1211:
  2088     06D4  2EE1               	goto	l1436
  2089     06D5                     u1210:
  2090     06D5                     l1432:
  2091                           
  2092                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 577:         --i;
  2093     06D5  30FF               	movlw	255
  2094     06D6  07B1               	addwf	dtoa@i,f
  2095     06D7  1803               	skipnc
  2096     06D8  0AB2               	incf	dtoa@i+1,f
  2097     06D9  30FF               	movlw	255
  2098     06DA  07B2               	addwf	dtoa@i+1,f
  2099     06DB                     l1434:
  2100                           
  2101                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 578:         dbuf
      +                          [i] = s;
  2102     06DB  0831               	movf	dtoa@i,w
  2103     06DC  3EA0               	addlw	(low (_dbuf| 0))& (0+255)
  2104     06DD  0084               	movwf	4
  2105     06DE  0830               	movf	dtoa@s,w
  2106     06DF  1383               	bcf	3,7	;select IRP bank1
  2107     06E0  0080               	movwf	0
  2108     06E1                     l1436:
  2109                           
  2110                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 582:     return (
      +                          void) pad(fp, &dbuf[i], w);
  2111     06E1  0831               	movf	dtoa@i,w
  2112     06E2  3EA0               	addlw	(low (_dbuf| 0))& (0+255)
  2113     06E3  00FB               	movwf	pad@buf
  2114     06E4  082E               	movf	dtoa@w+1,w
  2115     06E5  00FD               	movwf	pad@p+1
  2116     06E6  082D               	movf	dtoa@w,w
  2117     06E7  00FC               	movwf	pad@p
  2118     06E8  082C               	movf	dtoa@fp,w
  2119     06E9  120A  118A  232C  120A  118A  	fcall	_pad
  2120     06EE                     l734:
  2121     06EE  0008               	return
  2122     06EF                     __end_of_dtoa:
  2123                           
  2124                           	psect	text7
  2125     032C                     __ptext7:	
  2126 ;; *************** function _pad *****************
  2127 ;; Defined at:
  2128 ;;		line 193 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c"
  2129 ;; Parameters:    Size  Location     Type
  2130 ;;  fp              1    wreg     PTR struct _IO_FILE
  2131 ;;		 -> sprintf@f(11), 
  2132 ;;  buf             1   11[COMMON] PTR unsigned char 
  2133 ;;		 -> dbuf(32), 
  2134 ;;  p               2   12[COMMON] int 
  2135 ;; Auto vars:     Size  Location     Type
  2136 ;;  fp              1    7[BANK0 ] PTR struct _IO_FILE
  2137 ;;		 -> sprintf@f(11), 
  2138 ;;  i               2    5[BANK0 ] int 
  2139 ;; Return value:  Size  Location     Type
  2140 ;;                  1    wreg      void 
  2141 ;; Registers used:
  2142 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2143 ;; Tracked objects:
  2144 ;;		On entry : 0/0
  2145 ;;		On exit  : 0/0
  2146 ;;		Unchanged: 0/0
  2147 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2148 ;;      Params:         3       0       0       0       0
  2149 ;;      Locals:         0       3       0       0       0
  2150 ;;      Temps:          0       1       0       0       0
  2151 ;;      Totals:         3       4       0       0       0
  2152 ;;Total ram usage:        7 bytes
  2153 ;; Hardware stack levels used: 1
  2154 ;; Hardware stack levels required when called: 3
  2155 ;; This function calls:
  2156 ;;		_fputc
  2157 ;;		_fputs
  2158 ;; This function is called by:
  2159 ;;		_dtoa
  2160 ;; This function uses a non-reentrant model
  2161 ;;
  2162                           
  2163     032C                     _pad:	
  2164                           ;psect for function _pad
  2165                           
  2166                           
  2167                           ;incstack = 0
  2168                           ; Regs used in _pad: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2169                           ;pad@fp stored from wreg
  2170     032C  1283               	bcf	3,5	;RP0=0, select bank0
  2171     032D  1303               	bcf	3,6	;RP1=0, select bank0
  2172     032E  00A7               	movwf	pad@fp
  2173     032F                     l1364:
  2174                           
  2175                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 193: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\com
      +                          mon\doprnt.c: 194: {;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.
      +                          c: 195:     int i;;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c:
      +                           199:     if (flags & (1 << 0)) {
  2176     032F  1C6C               	btfss	_flags,0
  2177     0330  2B32               	goto	u1051
  2178     0331  2B33               	goto	u1050
  2179     0332                     u1051:
  2180     0332  2B3B               	goto	l1368
  2181     0333                     u1050:
  2182     0333                     l1366:
  2183                           
  2184                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 200:         fput
      +                          s((const char *)buf, fp);
  2185     0333  0827               	movf	pad@fp,w
  2186     0334  00F8               	movwf	fputs@fp
  2187     0335  087B               	movf	pad@buf,w
  2188     0336  120A  118A  2211  120A  118A  	fcall	_fputs
  2189     033B                     l1368:
  2190                           
  2191                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 205:  if (p < 0) 
      +                          {
  2192     033B  1FFD               	btfss	pad@p+1,7
  2193     033C  2B3E               	goto	u1061
  2194     033D  2B3F               	goto	u1060
  2195     033E                     u1061:
  2196     033E  2B41               	goto	l715
  2197     033F                     u1060:
  2198     033F                     l1370:
  2199                           
  2200                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 206:   p = 0;
  2201     033F  01FC               	clrf	pad@p
  2202     0340  01FD               	clrf	pad@p+1
  2203     0341                     l715:	
  2204                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 207:  }
  2205                           
  2206                           
  2207                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 208:     i = 0;
  2208     0341  1283               	bcf	3,5	;RP0=0, select bank0
  2209     0342  1303               	bcf	3,6	;RP1=0, select bank0
  2210     0343  01A5               	clrf	pad@i
  2211     0344  01A6               	clrf	pad@i+1
  2212                           
  2213                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
  2214     0345  2B5B               	goto	l1376
  2215     0346                     l1372:
  2216                           
  2217                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 210:         fput
      +                          c(' ', fp);
  2218     0346  3020               	movlw	32
  2219     0347  00F0               	movwf	fputc@c
  2220     0348  3000               	movlw	0
  2221     0349  00F1               	movwf	fputc@c+1
  2222     034A  1283               	bcf	3,5	;RP0=0, select bank0
  2223     034B  1303               	bcf	3,6	;RP1=0, select bank0
  2224     034C  0827               	movf	pad@fp,w
  2225     034D  00F2               	movwf	fputc@fp
  2226     034E  120A  118A  2378  120A  118A  	fcall	_fputc
  2227     0353                     l1374:
  2228                           
  2229                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 211:         ++i;
  2230     0353  3001               	movlw	1
  2231     0354  1283               	bcf	3,5	;RP0=0, select bank0
  2232     0355  1303               	bcf	3,6	;RP1=0, select bank0
  2233     0356  07A5               	addwf	pad@i,f
  2234     0357  1803               	skipnc
  2235     0358  0AA6               	incf	pad@i+1,f
  2236     0359  3000               	movlw	0
  2237     035A  07A6               	addwf	pad@i+1,f
  2238     035B                     l1376:
  2239                           
  2240                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
  2241     035B  0826               	movf	pad@i+1,w
  2242     035C  3A80               	xorlw	128
  2243     035D  00A4               	movwf	??_pad
  2244     035E  087D               	movf	pad@p+1,w
  2245     035F  3A80               	xorlw	128
  2246     0360  0224               	subwf	??_pad,w
  2247     0361  1D03               	skipz
  2248     0362  2B65               	goto	u1075
  2249     0363  087C               	movf	pad@p,w
  2250     0364  0225               	subwf	pad@i,w
  2251     0365                     u1075:
  2252     0365  1C03               	skipc
  2253     0366  2B68               	goto	u1071
  2254     0367  2B69               	goto	u1070
  2255     0368                     u1071:
  2256     0368  2B46               	goto	l1372
  2257     0369                     u1070:
  2258     0369                     l718:
  2259                           
  2260                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 216:     if (!(fl
      +                          ags & (1 << 0))) {
  2261     0369  1283               	bcf	3,5	;RP0=0, select bank0
  2262     036A  1303               	bcf	3,6	;RP1=0, select bank0
  2263     036B  186C               	btfsc	_flags,0
  2264     036C  2B6E               	goto	u1081
  2265     036D  2B6F               	goto	u1080
  2266     036E                     u1081:
  2267     036E  2B77               	goto	l720
  2268     036F                     u1080:
  2269     036F                     l1378:
  2270                           
  2271                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 218:         fput
      +                          s((const char *)buf, fp);
  2272     036F  0827               	movf	pad@fp,w
  2273     0370  00F8               	movwf	fputs@fp
  2274     0371  087B               	movf	pad@buf,w
  2275     0372  120A  118A  2211  120A  118A  	fcall	_fputs
  2276     0377                     l720:
  2277     0377  0008               	return
  2278     0378                     __end_of_pad:
  2279                           
  2280                           	psect	text8
  2281     0211                     __ptext8:	
  2282 ;; *************** function _fputs *****************
  2283 ;; Defined at:
  2284 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\nf_fputs.c"
  2285 ;; Parameters:    Size  Location     Type
  2286 ;;  s               1    wreg     PTR const unsigned char 
  2287 ;;		 -> dbuf(32), 
  2288 ;;  fp              1    8[COMMON] PTR struct _IO_FILE
  2289 ;;		 -> sprintf@f(11), 
  2290 ;; Auto vars:     Size  Location     Type
  2291 ;;  s               1    3[BANK0 ] PTR const unsigned char 
  2292 ;;		 -> dbuf(32), 
  2293 ;;  i               2    1[BANK0 ] int 
  2294 ;;  c               1    0[BANK0 ] unsigned char 
  2295 ;; Return value:  Size  Location     Type
  2296 ;;                  2    8[COMMON] int 
  2297 ;; Registers used:
  2298 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2299 ;; Tracked objects:
  2300 ;;		On entry : 0/0
  2301 ;;		On exit  : 0/0
  2302 ;;		Unchanged: 0/0
  2303 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2304 ;;      Params:         1       0       0       0       0
  2305 ;;      Locals:         0       4       0       0       0
  2306 ;;      Temps:          2       0       0       0       0
  2307 ;;      Totals:         3       4       0       0       0
  2308 ;;Total ram usage:        7 bytes
  2309 ;; Hardware stack levels used: 1
  2310 ;; Hardware stack levels required when called: 2
  2311 ;; This function calls:
  2312 ;;		_fputc
  2313 ;; This function is called by:
  2314 ;;		_pad
  2315 ;; This function uses a non-reentrant model
  2316 ;;
  2317                           
  2318     0211                     _fputs:	
  2319                           ;psect for function _fputs
  2320                           
  2321                           
  2322                           ;incstack = 0
  2323                           ; Regs used in _fputs: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2324                           ;fputs@s stored from wreg
  2325     0211  1283               	bcf	3,5	;RP0=0, select bank0
  2326     0212  1303               	bcf	3,6	;RP1=0, select bank0
  2327     0213  00A3               	movwf	fputs@s
  2328     0214                     l1260:
  2329     0214  01A1               	clrf	fputs@i
  2330     0215  01A2               	clrf	fputs@i+1
  2331     0216  2A2D               	goto	l1266
  2332     0217                     l1262:
  2333     0217  0820               	movf	fputs@c,w
  2334     0218  00F9               	movwf	??_fputs
  2335     0219  01FA               	clrf	??_fputs+1
  2336     021A  0879               	movf	??_fputs,w
  2337     021B  00F0               	movwf	fputc@c
  2338     021C  087A               	movf	??_fputs+1,w
  2339     021D  00F1               	movwf	fputc@c+1
  2340     021E  0878               	movf	fputs@fp,w
  2341     021F  00F2               	movwf	fputc@fp
  2342     0220  120A  118A  2378  120A  118A  	fcall	_fputc
  2343     0225                     l1264:
  2344     0225  3001               	movlw	1
  2345     0226  1283               	bcf	3,5	;RP0=0, select bank0
  2346     0227  1303               	bcf	3,6	;RP1=0, select bank0
  2347     0228  07A1               	addwf	fputs@i,f
  2348     0229  1803               	skipnc
  2349     022A  0AA2               	incf	fputs@i+1,f
  2350     022B  3000               	movlw	0
  2351     022C  07A2               	addwf	fputs@i+1,f
  2352     022D                     l1266:
  2353     022D  0821               	movf	fputs@i,w
  2354     022E  0723               	addwf	fputs@s,w
  2355     022F  00F9               	movwf	??_fputs
  2356     0230  0879               	movf	??_fputs,w
  2357     0231  0084               	movwf	4
  2358     0232  1383               	bcf	3,7	;select IRP bank0
  2359     0233  0800               	movf	0,w
  2360     0234  00A0               	movwf	fputs@c
  2361     0235  0820               	movf	fputs@c,w
  2362     0236  1D03               	btfss	3,2
  2363     0237  2A39               	goto	u811
  2364     0238  2A3A               	goto	u810
  2365     0239                     u811:
  2366     0239  2A17               	goto	l1262
  2367     023A                     u810:
  2368     023A                     l783:
  2369     023A  0008               	return
  2370     023B                     __end_of_fputs:
  2371                           
  2372                           	psect	text9
  2373     0378                     __ptext9:	
  2374 ;; *************** function _fputc *****************
  2375 ;; Defined at:
  2376 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\nf_fputc.c"
  2377 ;; Parameters:    Size  Location     Type
  2378 ;;  c               2    0[COMMON] int 
  2379 ;;  fp              1    2[COMMON] PTR struct _IO_FILE
  2380 ;;		 -> sprintf@f(11), 
  2381 ;; Auto vars:     Size  Location     Type
  2382 ;;		None
  2383 ;; Return value:  Size  Location     Type
  2384 ;;                  2    0[COMMON] int 
  2385 ;; Registers used:
  2386 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2387 ;; Tracked objects:
  2388 ;;		On entry : 0/0
  2389 ;;		On exit  : 0/0
  2390 ;;		Unchanged: 0/0
  2391 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2392 ;;      Params:         3       0       0       0       0
  2393 ;;      Locals:         0       0       0       0       0
  2394 ;;      Temps:          5       0       0       0       0
  2395 ;;      Totals:         8       0       0       0       0
  2396 ;;Total ram usage:        8 bytes
  2397 ;; Hardware stack levels used: 1
  2398 ;; Hardware stack levels required when called: 1
  2399 ;; This function calls:
  2400 ;;		_putch
  2401 ;; This function is called by:
  2402 ;;		_pad
  2403 ;;		_vfpfcnvrt
  2404 ;;		_fputs
  2405 ;; This function uses a non-reentrant model
  2406 ;;
  2407                           
  2408     0378                     _fputc:	
  2409                           ;psect for function _fputc
  2410                           
  2411     0378                     l1246:	
  2412                           ;incstack = 0
  2413                           ; Regs used in _fputc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2414                           
  2415     0378  0872               	movf	fputc@fp,w
  2416     0379  1903               	btfsc	3,2
  2417     037A  2B7C               	goto	u771
  2418     037B  2B7D               	goto	u770
  2419     037C                     u771:
  2420     037C  2B82               	goto	l1250
  2421     037D                     u770:
  2422     037D                     l1248:
  2423     037D  0872               	movf	fputc@fp,w
  2424     037E  1D03               	btfss	3,2
  2425     037F  2B81               	goto	u781
  2426     0380  2B82               	goto	u780
  2427     0381                     u781:
  2428     0381  2B89               	goto	l1252
  2429     0382                     u780:
  2430     0382                     l1250:
  2431     0382  0870               	movf	fputc@c,w
  2432     0383  120A  118A  2113  120A  118A  	fcall	_putch
  2433     0388  2BCD               	goto	l775
  2434     0389                     l1252:
  2435     0389  0872               	movf	fputc@fp,w
  2436     038A  3E09               	addlw	9
  2437     038B  0084               	movwf	4
  2438     038C  1383               	bcf	3,7	;select IRP bank0
  2439     038D  0800               	movf	0,w
  2440     038E  00F3               	movwf	??_fputc
  2441     038F  0A84               	incf	4,f
  2442     0390  0800               	movf	0,w
  2443     0391  00F4               	movwf	??_fputc+1
  2444     0392  0873               	movf	??_fputc,w
  2445     0393  0474               	iorwf	??_fputc+1,w
  2446     0394  1903               	btfsc	3,2
  2447     0395  2B97               	goto	u791
  2448     0396  2B98               	goto	u790
  2449     0397                     u791:
  2450     0397  2BB6               	goto	l1256
  2451     0398                     u790:
  2452     0398                     l1254:
  2453     0398  0872               	movf	fputc@fp,w
  2454     0399  3E09               	addlw	9
  2455     039A  0084               	movwf	4
  2456     039B  0800               	movf	0,w
  2457     039C  00F3               	movwf	??_fputc
  2458     039D  0A84               	incf	4,f
  2459     039E  0800               	movf	0,w
  2460     039F  00F4               	movwf	??_fputc+1
  2461     03A0  0872               	movf	fputc@fp,w
  2462     03A1  3E02               	addlw	2
  2463     03A2  0084               	movwf	4
  2464     03A3  0800               	movf	0,w
  2465     03A4  00F5               	movwf	??_fputc+2
  2466     03A5  0A84               	incf	4,f
  2467     03A6  0800               	movf	0,w
  2468     03A7  00F6               	movwf	??_fputc+3
  2469     03A8  0876               	movf	??_fputc+3,w
  2470     03A9  3A80               	xorlw	128
  2471     03AA  00F7               	movwf	??_fputc+4
  2472     03AB  0874               	movf	??_fputc+1,w
  2473     03AC  3A80               	xorlw	128
  2474     03AD  0277               	subwf	??_fputc+4,w
  2475     03AE  1D03               	skipz
  2476     03AF  2BB2               	goto	u805
  2477     03B0  0873               	movf	??_fputc,w
  2478     03B1  0275               	subwf	??_fputc+2,w
  2479     03B2                     u805:
  2480     03B2  1803               	skipnc
  2481     03B3  2BB5               	goto	u801
  2482     03B4  2BB6               	goto	u800
  2483     03B5                     u801:
  2484     03B5  2BCD               	goto	l775
  2485     03B6                     u800:
  2486     03B6                     l1256:
  2487     03B6  0872               	movf	fputc@fp,w
  2488     03B7  3E02               	addlw	2
  2489     03B8  0084               	movwf	4
  2490     03B9  1383               	bcf	3,7	;select IRP bank0
  2491     03BA  0800               	movf	0,w
  2492     03BB  00F3               	movwf	??_fputc
  2493     03BC  0872               	movf	fputc@fp,w
  2494     03BD  0084               	movwf	4
  2495     03BE  0800               	movf	0,w
  2496     03BF  0773               	addwf	??_fputc,w
  2497     03C0  00F4               	movwf	??_fputc+1
  2498     03C1  0874               	movf	??_fputc+1,w
  2499     03C2  0084               	movwf	4
  2500     03C3  0870               	movf	fputc@c,w
  2501     03C4  0080               	movwf	0
  2502     03C5  0872               	movf	fputc@fp,w
  2503     03C6  3E02               	addlw	2
  2504     03C7  0084               	movwf	4
  2505     03C8  3001               	movlw	1
  2506     03C9  0780               	addwf	0,f
  2507     03CA  0A84               	incf	4,f
  2508     03CB  1803               	skipnc
  2509     03CC  0A80               	incf	0,f
  2510     03CD                     l775:
  2511     03CD  0008               	return
  2512     03CE                     __end_of_fputc:
  2513                           
  2514                           	psect	text10
  2515     0113                     __ptext10:	
  2516 ;; *************** function _putch *****************
  2517 ;; Defined at:
  2518 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\putch.c"
  2519 ;; Parameters:    Size  Location     Type
  2520 ;;  c               1    wreg     unsigned char 
  2521 ;; Auto vars:     Size  Location     Type
  2522 ;;  c               1    0[COMMON] unsigned char 
  2523 ;; Return value:  Size  Location     Type
  2524 ;;                  1    wreg      void 
  2525 ;; Registers used:
  2526 ;;		wreg
  2527 ;; Tracked objects:
  2528 ;;		On entry : 0/0
  2529 ;;		On exit  : 0/0
  2530 ;;		Unchanged: 0/0
  2531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2532 ;;      Params:         0       0       0       0       0
  2533 ;;      Locals:         0       0       0       0       0
  2534 ;;      Temps:          0       0       0       0       0
  2535 ;;      Totals:         0       0       0       0       0
  2536 ;;Total ram usage:        0 bytes
  2537 ;; Hardware stack levels used: 1
  2538 ;; This function calls:
  2539 ;;		Nothing
  2540 ;; This function is called by:
  2541 ;;		_fputc
  2542 ;; This function uses a non-reentrant model
  2543 ;;
  2544                           
  2545     0113                     _putch:	
  2546                           ;psect for function _putch
  2547                           
  2548     0113                     l786:	
  2549                           ;incstack = 0
  2550                           ; Regs used in _putch: [wreg]
  2551                           
  2552     0113  0008               	return
  2553     0114                     __end_of_putch:
  2554                           
  2555                           	psect	text11
  2556     012B                     __ptext11:	
  2557 ;; *************** function _abs *****************
  2558 ;; Defined at:
  2559 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\abs.c"
  2560 ;; Parameters:    Size  Location     Type
  2561 ;;  a               2    6[COMMON] int 
  2562 ;; Auto vars:     Size  Location     Type
  2563 ;;		None
  2564 ;; Return value:  Size  Location     Type
  2565 ;;                  2    6[COMMON] int 
  2566 ;; Registers used:
  2567 ;;		wreg, status,2, status,0
  2568 ;; Tracked objects:
  2569 ;;		On entry : 0/0
  2570 ;;		On exit  : 0/0
  2571 ;;		Unchanged: 0/0
  2572 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2573 ;;      Params:         2       0       0       0       0
  2574 ;;      Locals:         0       0       0       0       0
  2575 ;;      Temps:          2       0       0       0       0
  2576 ;;      Totals:         4       0       0       0       0
  2577 ;;Total ram usage:        4 bytes
  2578 ;; Hardware stack levels used: 1
  2579 ;; This function calls:
  2580 ;;		Nothing
  2581 ;; This function is called by:
  2582 ;;		_dtoa
  2583 ;; This function uses a non-reentrant model
  2584 ;;
  2585                           
  2586     012B                     _abs:	
  2587                           ;psect for function _abs
  2588                           
  2589     012B                     l1380:	
  2590                           ;incstack = 0
  2591                           ; Regs used in _abs: [wreg+status,2+status,0]
  2592                           
  2593     012B  1BF7               	btfsc	abs@a+1,7
  2594     012C  292E               	goto	u1091
  2595     012D  292F               	goto	u1090
  2596     012E                     u1091:
  2597     012E  2930               	goto	l1384
  2598     012F                     u1090:
  2599     012F                     l1382:
  2600     012F  293B               	goto	l763
  2601     0130                     l1384:
  2602     0130  0976               	comf	abs@a,w
  2603     0131  00F8               	movwf	??_abs
  2604     0132  0977               	comf	abs@a+1,w
  2605     0133  00F9               	movwf	??_abs+1
  2606     0134  0AF8               	incf	??_abs,f
  2607     0135  1903               	skipnz
  2608     0136  0AF9               	incf	??_abs+1,f
  2609     0137  0878               	movf	??_abs,w
  2610     0138  00F6               	movwf	?_abs
  2611     0139  0879               	movf	??_abs+1,w
  2612     013A  00F7               	movwf	?_abs+1
  2613     013B                     l763:
  2614     013B  0008               	return
  2615     013C                     __end_of_abs:
  2616                           
  2617                           	psect	text12
  2618     0426                     __ptext12:	
  2619 ;; *************** function ___awmod *****************
  2620 ;; Defined at:
  2621 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\awmod.c"
  2622 ;; Parameters:    Size  Location     Type
  2623 ;;  divisor         2    0[COMMON] int 
  2624 ;;  dividend        2    2[COMMON] int 
  2625 ;; Auto vars:     Size  Location     Type
  2626 ;;  sign            1    5[COMMON] unsigned char 
  2627 ;;  counter         1    4[COMMON] unsigned char 
  2628 ;; Return value:  Size  Location     Type
  2629 ;;                  2    0[COMMON] int 
  2630 ;; Registers used:
  2631 ;;		wreg, status,2, status,0, btemp+1
  2632 ;; Tracked objects:
  2633 ;;		On entry : 0/0
  2634 ;;		On exit  : 0/0
  2635 ;;		Unchanged: 0/0
  2636 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2637 ;;      Params:         4       0       0       0       0
  2638 ;;      Locals:         2       0       0       0       0
  2639 ;;      Temps:          0       0       0       0       0
  2640 ;;      Totals:         6       0       0       0       0
  2641 ;;Total ram usage:        6 bytes
  2642 ;; Hardware stack levels used: 1
  2643 ;; This function calls:
  2644 ;;		Nothing
  2645 ;; This function is called by:
  2646 ;;		_dtoa
  2647 ;; This function uses a non-reentrant model
  2648 ;;
  2649                           
  2650     0426                     ___awmod:	
  2651                           ;psect for function ___awmod
  2652                           
  2653     0426                     l1326:	
  2654                           ;incstack = 0
  2655                           ; Regs used in ___awmod: [wreg+status,2+status,0+btemp+1]
  2656                           
  2657     0426  01F5               	clrf	___awmod@sign
  2658     0427                     l1328:
  2659     0427  1FF3               	btfss	___awmod@dividend+1,7
  2660     0428  2C2A               	goto	u961
  2661     0429  2C2B               	goto	u960
  2662     042A                     u961:
  2663     042A  2C32               	goto	l1334
  2664     042B                     u960:
  2665     042B                     l1330:
  2666     042B  09F2               	comf	___awmod@dividend,f
  2667     042C  09F3               	comf	___awmod@dividend+1,f
  2668     042D  0AF2               	incf	___awmod@dividend,f
  2669     042E  1903               	skipnz
  2670     042F  0AF3               	incf	___awmod@dividend+1,f
  2671     0430                     l1332:
  2672     0430  01F5               	clrf	___awmod@sign
  2673     0431  0AF5               	incf	___awmod@sign,f
  2674     0432                     l1334:
  2675     0432  1FF1               	btfss	___awmod@divisor+1,7
  2676     0433  2C35               	goto	u971
  2677     0434  2C36               	goto	u970
  2678     0435                     u971:
  2679     0435  2C3B               	goto	l1338
  2680     0436                     u970:
  2681     0436                     l1336:
  2682     0436  09F0               	comf	___awmod@divisor,f
  2683     0437  09F1               	comf	___awmod@divisor+1,f
  2684     0438  0AF0               	incf	___awmod@divisor,f
  2685     0439  1903               	skipnz
  2686     043A  0AF1               	incf	___awmod@divisor+1,f
  2687     043B                     l1338:
  2688     043B  0870               	movf	___awmod@divisor,w
  2689     043C  0471               	iorwf	___awmod@divisor+1,w
  2690     043D  1903               	btfsc	3,2
  2691     043E  2C40               	goto	u981
  2692     043F  2C41               	goto	u980
  2693     0440                     u981:
  2694     0440  2C70               	goto	l1356
  2695     0441                     u980:
  2696     0441                     l1340:
  2697     0441  01F4               	clrf	___awmod@counter
  2698     0442  0AF4               	incf	___awmod@counter,f
  2699     0443  2C4F               	goto	l1346
  2700     0444                     l1342:
  2701     0444  3001               	movlw	1
  2702     0445                     u995:
  2703     0445  1003               	clrc
  2704     0446  0DF0               	rlf	___awmod@divisor,f
  2705     0447  0DF1               	rlf	___awmod@divisor+1,f
  2706     0448  3EFF               	addlw	-1
  2707     0449  1D03               	skipz
  2708     044A  2C45               	goto	u995
  2709     044B                     l1344:
  2710     044B  3001               	movlw	1
  2711     044C  00FF               	movwf	btemp+1
  2712     044D  087F               	movf	btemp+1,w
  2713     044E  07F4               	addwf	___awmod@counter,f
  2714     044F                     l1346:
  2715     044F  1FF1               	btfss	___awmod@divisor+1,7
  2716     0450  2C52               	goto	u1001
  2717     0451  2C53               	goto	u1000
  2718     0452                     u1001:
  2719     0452  2C44               	goto	l1342
  2720     0453                     u1000:
  2721     0453                     l1348:
  2722     0453  0871               	movf	___awmod@divisor+1,w
  2723     0454  0273               	subwf	___awmod@dividend+1,w
  2724     0455  1D03               	skipz
  2725     0456  2C59               	goto	u1015
  2726     0457  0870               	movf	___awmod@divisor,w
  2727     0458  0272               	subwf	___awmod@dividend,w
  2728     0459                     u1015:
  2729     0459  1C03               	skipc
  2730     045A  2C5C               	goto	u1011
  2731     045B  2C5D               	goto	u1010
  2732     045C                     u1011:
  2733     045C  2C63               	goto	l1352
  2734     045D                     u1010:
  2735     045D                     l1350:
  2736     045D  0870               	movf	___awmod@divisor,w
  2737     045E  02F2               	subwf	___awmod@dividend,f
  2738     045F  0871               	movf	___awmod@divisor+1,w
  2739     0460  1C03               	skipc
  2740     0461  03F3               	decf	___awmod@dividend+1,f
  2741     0462  02F3               	subwf	___awmod@dividend+1,f
  2742     0463                     l1352:
  2743     0463  3001               	movlw	1
  2744     0464                     u1025:
  2745     0464  1003               	clrc
  2746     0465  0CF1               	rrf	___awmod@divisor+1,f
  2747     0466  0CF0               	rrf	___awmod@divisor,f
  2748     0467  3EFF               	addlw	-1
  2749     0468  1D03               	skipz
  2750     0469  2C64               	goto	u1025
  2751     046A                     l1354:
  2752     046A  3001               	movlw	1
  2753     046B  02F4               	subwf	___awmod@counter,f
  2754     046C  1D03               	btfss	3,2
  2755     046D  2C6F               	goto	u1031
  2756     046E  2C70               	goto	u1030
  2757     046F                     u1031:
  2758     046F  2C53               	goto	l1348
  2759     0470                     u1030:
  2760     0470                     l1356:
  2761     0470  0875               	movf	___awmod@sign,w
  2762     0471  1903               	btfsc	3,2
  2763     0472  2C74               	goto	u1041
  2764     0473  2C75               	goto	u1040
  2765     0474                     u1041:
  2766     0474  2C7A               	goto	l1360
  2767     0475                     u1040:
  2768     0475                     l1358:
  2769     0475  09F2               	comf	___awmod@dividend,f
  2770     0476  09F3               	comf	___awmod@dividend+1,f
  2771     0477  0AF2               	incf	___awmod@dividend,f
  2772     0478  1903               	skipnz
  2773     0479  0AF3               	incf	___awmod@dividend+1,f
  2774     047A                     l1360:
  2775     047A  0873               	movf	___awmod@dividend+1,w
  2776     047B  00F1               	movwf	?___awmod+1
  2777     047C  0872               	movf	___awmod@dividend,w
  2778     047D  00F0               	movwf	?___awmod
  2779     047E                     l398:
  2780     047E  0008               	return
  2781     047F                     __end_of___awmod:
  2782                           
  2783                           	psect	text13
  2784     0543                     __ptext13:	
  2785 ;; *************** function ___awdiv *****************
  2786 ;; Defined at:
  2787 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\awdiv.c"
  2788 ;; Parameters:    Size  Location     Type
  2789 ;;  divisor         2    0[COMMON] int 
  2790 ;;  dividend        2    2[COMMON] int 
  2791 ;; Auto vars:     Size  Location     Type
  2792 ;;  quotient        2    6[COMMON] int 
  2793 ;;  sign            1    5[COMMON] unsigned char 
  2794 ;;  counter         1    4[COMMON] unsigned char 
  2795 ;; Return value:  Size  Location     Type
  2796 ;;                  2    0[COMMON] int 
  2797 ;; Registers used:
  2798 ;;		wreg, status,2, status,0, btemp+1
  2799 ;; Tracked objects:
  2800 ;;		On entry : 0/0
  2801 ;;		On exit  : 0/0
  2802 ;;		Unchanged: 0/0
  2803 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2804 ;;      Params:         4       0       0       0       0
  2805 ;;      Locals:         4       0       0       0       0
  2806 ;;      Temps:          0       0       0       0       0
  2807 ;;      Totals:         8       0       0       0       0
  2808 ;;Total ram usage:        8 bytes
  2809 ;; Hardware stack levels used: 1
  2810 ;; This function calls:
  2811 ;;		Nothing
  2812 ;; This function is called by:
  2813 ;;		_dtoa
  2814 ;; This function uses a non-reentrant model
  2815 ;;
  2816                           
  2817     0543                     ___awdiv:	
  2818                           ;psect for function ___awdiv
  2819                           
  2820     0543                     l1282:	
  2821                           ;incstack = 0
  2822                           ; Regs used in ___awdiv: [wreg+status,2+status,0+btemp+1]
  2823                           
  2824     0543  01F5               	clrf	___awdiv@sign
  2825     0544                     l1284:
  2826     0544  1FF1               	btfss	___awdiv@divisor+1,7
  2827     0545  2D47               	goto	u861
  2828     0546  2D48               	goto	u860
  2829     0547                     u861:
  2830     0547  2D4F               	goto	l1290
  2831     0548                     u860:
  2832     0548                     l1286:
  2833     0548  09F0               	comf	___awdiv@divisor,f
  2834     0549  09F1               	comf	___awdiv@divisor+1,f
  2835     054A  0AF0               	incf	___awdiv@divisor,f
  2836     054B  1903               	skipnz
  2837     054C  0AF1               	incf	___awdiv@divisor+1,f
  2838     054D                     l1288:
  2839     054D  01F5               	clrf	___awdiv@sign
  2840     054E  0AF5               	incf	___awdiv@sign,f
  2841     054F                     l1290:
  2842     054F  1FF3               	btfss	___awdiv@dividend+1,7
  2843     0550  2D52               	goto	u871
  2844     0551  2D53               	goto	u870
  2845     0552                     u871:
  2846     0552  2D5C               	goto	l1296
  2847     0553                     u870:
  2848     0553                     l1292:
  2849     0553  09F2               	comf	___awdiv@dividend,f
  2850     0554  09F3               	comf	___awdiv@dividend+1,f
  2851     0555  0AF2               	incf	___awdiv@dividend,f
  2852     0556  1903               	skipnz
  2853     0557  0AF3               	incf	___awdiv@dividend+1,f
  2854     0558                     l1294:
  2855     0558  3001               	movlw	1
  2856     0559  00FF               	movwf	btemp+1
  2857     055A  087F               	movf	btemp+1,w
  2858     055B  06F5               	xorwf	___awdiv@sign,f
  2859     055C                     l1296:
  2860     055C  01F6               	clrf	___awdiv@quotient
  2861     055D  01F7               	clrf	___awdiv@quotient+1
  2862     055E                     l1298:
  2863     055E  0870               	movf	___awdiv@divisor,w
  2864     055F  0471               	iorwf	___awdiv@divisor+1,w
  2865     0560  1903               	btfsc	3,2
  2866     0561  2D63               	goto	u881
  2867     0562  2D64               	goto	u880
  2868     0563                     u881:
  2869     0563  2D9B               	goto	l1318
  2870     0564                     u880:
  2871     0564                     l1300:
  2872     0564  01F4               	clrf	___awdiv@counter
  2873     0565  0AF4               	incf	___awdiv@counter,f
  2874     0566  2D72               	goto	l1306
  2875     0567                     l1302:
  2876     0567  3001               	movlw	1
  2877     0568                     u895:
  2878     0568  1003               	clrc
  2879     0569  0DF0               	rlf	___awdiv@divisor,f
  2880     056A  0DF1               	rlf	___awdiv@divisor+1,f
  2881     056B  3EFF               	addlw	-1
  2882     056C  1D03               	skipz
  2883     056D  2D68               	goto	u895
  2884     056E                     l1304:
  2885     056E  3001               	movlw	1
  2886     056F  00FF               	movwf	btemp+1
  2887     0570  087F               	movf	btemp+1,w
  2888     0571  07F4               	addwf	___awdiv@counter,f
  2889     0572                     l1306:
  2890     0572  1FF1               	btfss	___awdiv@divisor+1,7
  2891     0573  2D75               	goto	u901
  2892     0574  2D76               	goto	u900
  2893     0575                     u901:
  2894     0575  2D67               	goto	l1302
  2895     0576                     u900:
  2896     0576                     l1308:
  2897     0576  3001               	movlw	1
  2898     0577                     u915:
  2899     0577  1003               	clrc
  2900     0578  0DF6               	rlf	___awdiv@quotient,f
  2901     0579  0DF7               	rlf	___awdiv@quotient+1,f
  2902     057A  3EFF               	addlw	-1
  2903     057B  1D03               	skipz
  2904     057C  2D77               	goto	u915
  2905     057D  0871               	movf	___awdiv@divisor+1,w
  2906     057E  0273               	subwf	___awdiv@dividend+1,w
  2907     057F  1D03               	skipz
  2908     0580  2D83               	goto	u925
  2909     0581  0870               	movf	___awdiv@divisor,w
  2910     0582  0272               	subwf	___awdiv@dividend,w
  2911     0583                     u925:
  2912     0583  1C03               	skipc
  2913     0584  2D86               	goto	u921
  2914     0585  2D87               	goto	u920
  2915     0586                     u921:
  2916     0586  2D8E               	goto	l1314
  2917     0587                     u920:
  2918     0587                     l1310:
  2919     0587  0870               	movf	___awdiv@divisor,w
  2920     0588  02F2               	subwf	___awdiv@dividend,f
  2921     0589  0871               	movf	___awdiv@divisor+1,w
  2922     058A  1C03               	skipc
  2923     058B  03F3               	decf	___awdiv@dividend+1,f
  2924     058C  02F3               	subwf	___awdiv@dividend+1,f
  2925     058D                     l1312:
  2926     058D  1476               	bsf	___awdiv@quotient,0
  2927     058E                     l1314:
  2928     058E  3001               	movlw	1
  2929     058F                     u935:
  2930     058F  1003               	clrc
  2931     0590  0CF1               	rrf	___awdiv@divisor+1,f
  2932     0591  0CF0               	rrf	___awdiv@divisor,f
  2933     0592  3EFF               	addlw	-1
  2934     0593  1D03               	skipz
  2935     0594  2D8F               	goto	u935
  2936     0595                     l1316:
  2937     0595  3001               	movlw	1
  2938     0596  02F4               	subwf	___awdiv@counter,f
  2939     0597  1D03               	btfss	3,2
  2940     0598  2D9A               	goto	u941
  2941     0599  2D9B               	goto	u940
  2942     059A                     u941:
  2943     059A  2D76               	goto	l1308
  2944     059B                     u940:
  2945     059B                     l1318:
  2946     059B  0875               	movf	___awdiv@sign,w
  2947     059C  1903               	btfsc	3,2
  2948     059D  2D9F               	goto	u951
  2949     059E  2DA0               	goto	u950
  2950     059F                     u951:
  2951     059F  2DA5               	goto	l1322
  2952     05A0                     u950:
  2953     05A0                     l1320:
  2954     05A0  09F6               	comf	___awdiv@quotient,f
  2955     05A1  09F7               	comf	___awdiv@quotient+1,f
  2956     05A2  0AF6               	incf	___awdiv@quotient,f
  2957     05A3  1903               	skipnz
  2958     05A4  0AF7               	incf	___awdiv@quotient+1,f
  2959     05A5                     l1322:
  2960     05A5  0877               	movf	___awdiv@quotient+1,w
  2961     05A6  00F1               	movwf	?___awdiv+1
  2962     05A7  0876               	movf	___awdiv@quotient,w
  2963     05A8  00F0               	movwf	?___awdiv
  2964     05A9                     l385:
  2965     05A9  0008               	return
  2966     05AA                     __end_of___awdiv:
  2967                           
  2968                           	psect	text14
  2969     04DC                     __ptext14:	
  2970 ;; *************** function _motor *****************
  2971 ;; Defined at:
  2972 ;;		line 162 in file "gsmg_c.c"
  2973 ;; Parameters:    Size  Location     Type
  2974 ;;  sayac           2    0[BANK0 ] int 
  2975 ;;  hiz             2    2[BANK0 ] int 
  2976 ;; Auto vars:     Size  Location     Type
  2977 ;;		None
  2978 ;; Return value:  Size  Location     Type
  2979 ;;                  1    wreg      void 
  2980 ;; Registers used:
  2981 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2982 ;; Tracked objects:
  2983 ;;		On entry : 0/0
  2984 ;;		On exit  : 0/0
  2985 ;;		Unchanged: 0/0
  2986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2987 ;;      Params:         0       4       0       0       0
  2988 ;;      Locals:         0       0       0       0       0
  2989 ;;      Temps:          2       0       0       0       0
  2990 ;;      Totals:         2       4       0       0       0
  2991 ;;Total ram usage:        6 bytes
  2992 ;; Hardware stack levels used: 1
  2993 ;; Hardware stack levels required when called: 3
  2994 ;; This function calls:
  2995 ;;		_Lcd_Set_Cursor
  2996 ;;		_Lcd_Write_String
  2997 ;;		_duty_sag
  2998 ;;		_duty_sol
  2999 ;; This function is called by:
  3000 ;;		_main
  3001 ;; This function uses a non-reentrant model
  3002 ;;
  3003                           
  3004     04DC                     _motor:	
  3005                           ;psect for function _motor
  3006                           
  3007     04DC                     l1594:	
  3008                           ;incstack = 0
  3009                           ; Regs used in _motor: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3010                           
  3011                           
  3012                           ;gsmg_c.c: 164:     if (sayac == 0){
  3013     04DC  1283               	bcf	3,5	;RP0=0, select bank0
  3014     04DD  1303               	bcf	3,6	;RP1=0, select bank0
  3015     04DE  0820               	movf	motor@sayac,w
  3016     04DF  0421               	iorwf	motor@sayac+1,w
  3017     04E0  1D03               	btfss	3,2
  3018     04E1  2CE3               	goto	u1411
  3019     04E2  2CE4               	goto	u1410
  3020     04E3                     u1411:
  3021     04E3  2D0F               	goto	l1604
  3022     04E4                     u1410:
  3023     04E4                     l1596:
  3024                           
  3025                           ;gsmg_c.c: 166:         duty_sag(hiz);
  3026     04E4  0823               	movf	motor@hiz+1,w
  3027     04E5  00F1               	movwf	duty_sag@pwm+1
  3028     04E6  0822               	movf	motor@hiz,w
  3029     04E7  00F0               	movwf	duty_sag@pwm
  3030     04E8  120A  118A  2156  120A  118A  	fcall	_duty_sag
  3031                           
  3032                           ;gsmg_c.c: 167:         duty_sol(0);
  3033     04ED  3000               	movlw	0
  3034     04EE  00F0               	movwf	duty_sol@pwm
  3035     04EF  00F1               	movwf	duty_sol@pwm+1
  3036     04F0  120A  118A  2170  120A  118A  	fcall	_duty_sol
  3037     04F5                     l1598:
  3038                           
  3039                           ;gsmg_c.c: 168:         _delay((unsigned long)((2)*(4000000/4000.0)));
  3040     04F5  3003               	movlw	3
  3041     04F6  00FD               	movwf	??_motor+1
  3042     04F7  3097               	movlw	151
  3043     04F8  00FC               	movwf	??_motor
  3044     04F9                     u1547:
  3045     04F9  0BFC               	decfsz	??_motor,f
  3046     04FA  2CF9               	goto	u1547
  3047     04FB  0BFD               	decfsz	??_motor+1,f
  3048     04FC  2CF9               	goto	u1547
  3049     04FD  2CFE               	nop2
  3050     04FE                     l1600:
  3051                           
  3052                           ;gsmg_c.c: 169:         Lcd_Set_Cursor(2,9);
  3053     04FE  3009               	movlw	9
  3054     04FF  00F4               	movwf	Lcd_Set_Cursor@b
  3055     0500  3002               	movlw	2
  3056     0501  120A  118A  22E6  120A  118A  	fcall	_Lcd_Set_Cursor
  3057     0506                     l1602:
  3058                           
  3059                           ;gsmg_c.c: 170:         Lcd_Write_String("Sol");
  3060     0506  3032               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  3061     0507  00F5               	movwf	Lcd_Write_String@a
  3062     0508  3080               	movlw	128
  3063     0509  00F6               	movwf	Lcd_Write_String@a+1
  3064     050A  120A  118A  22A4  120A  118A  	fcall	_Lcd_Write_String
  3065     050F                     l1604:
  3066                           
  3067                           ;gsmg_c.c: 173:     if (sayac == 1){
  3068     050F  1283               	bcf	3,5	;RP0=0, select bank0
  3069     0510  1303               	bcf	3,6	;RP1=0, select bank0
  3070     0511  0320               	decf	motor@sayac,w
  3071     0512  0421               	iorwf	motor@sayac+1,w
  3072     0513  1D03               	btfss	3,2
  3073     0514  2D16               	goto	u1421
  3074     0515  2D17               	goto	u1420
  3075     0516                     u1421:
  3076     0516  2D42               	goto	l115
  3077     0517                     u1420:
  3078     0517                     l1606:
  3079                           
  3080                           ;gsmg_c.c: 175:         duty_sol(hiz);
  3081     0517  0823               	movf	motor@hiz+1,w
  3082     0518  00F1               	movwf	duty_sol@pwm+1
  3083     0519  0822               	movf	motor@hiz,w
  3084     051A  00F0               	movwf	duty_sol@pwm
  3085     051B  120A  118A  2170  120A  118A  	fcall	_duty_sol
  3086                           
  3087                           ;gsmg_c.c: 176:         duty_sag(0);
  3088     0520  3000               	movlw	0
  3089     0521  00F0               	movwf	duty_sag@pwm
  3090     0522  00F1               	movwf	duty_sag@pwm+1
  3091     0523  120A  118A  2156  120A  118A  	fcall	_duty_sag
  3092     0528                     l1608:
  3093                           
  3094                           ;gsmg_c.c: 177:         _delay((unsigned long)((2)*(4000000/4000.0)));
  3095     0528  3003               	movlw	3
  3096     0529  00FD               	movwf	??_motor+1
  3097     052A  3097               	movlw	151
  3098     052B  00FC               	movwf	??_motor
  3099     052C                     u1557:
  3100     052C  0BFC               	decfsz	??_motor,f
  3101     052D  2D2C               	goto	u1557
  3102     052E  0BFD               	decfsz	??_motor+1,f
  3103     052F  2D2C               	goto	u1557
  3104     0530  2D31               	nop2
  3105     0531                     l1610:
  3106                           
  3107                           ;gsmg_c.c: 178:         Lcd_Set_Cursor(2,9);
  3108     0531  3009               	movlw	9
  3109     0532  00F4               	movwf	Lcd_Set_Cursor@b
  3110     0533  3002               	movlw	2
  3111     0534  120A  118A  22E6  120A  118A  	fcall	_Lcd_Set_Cursor
  3112     0539                     l1612:
  3113                           
  3114                           ;gsmg_c.c: 179:         Lcd_Write_String("Sag");
  3115     0539  302E               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  3116     053A  00F5               	movwf	Lcd_Write_String@a
  3117     053B  3080               	movlw	128
  3118     053C  00F6               	movwf	Lcd_Write_String@a+1
  3119     053D  120A  118A  22A4  120A  118A  	fcall	_Lcd_Write_String
  3120     0542                     l115:
  3121     0542  0008               	return
  3122     0543                     __end_of_motor:
  3123                           
  3124                           	psect	text15
  3125     0170                     __ptext15:	
  3126 ;; *************** function _duty_sol *****************
  3127 ;; Defined at:
  3128 ;;		line 143 in file "gsmg_c.c"
  3129 ;; Parameters:    Size  Location     Type
  3130 ;;  pwm             2    0[COMMON] int 
  3131 ;; Auto vars:     Size  Location     Type
  3132 ;;		None
  3133 ;; Return value:  Size  Location     Type
  3134 ;;                  1    wreg      void 
  3135 ;; Registers used:
  3136 ;;		wreg
  3137 ;; Tracked objects:
  3138 ;;		On entry : 0/0
  3139 ;;		On exit  : 0/0
  3140 ;;		Unchanged: 0/0
  3141 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3142 ;;      Params:         2       0       0       0       0
  3143 ;;      Locals:         0       0       0       0       0
  3144 ;;      Temps:          2       0       0       0       0
  3145 ;;      Totals:         4       0       0       0       0
  3146 ;;Total ram usage:        4 bytes
  3147 ;; Hardware stack levels used: 1
  3148 ;; This function calls:
  3149 ;;		Nothing
  3150 ;; This function is called by:
  3151 ;;		_motor
  3152 ;; This function uses a non-reentrant model
  3153 ;;
  3154                           
  3155     0170                     _duty_sol:	
  3156                           ;psect for function _duty_sol
  3157                           
  3158     0170                     l1560:	
  3159                           ;incstack = 0
  3160                           ; Regs used in _duty_sol: [wreg]
  3161                           
  3162                           
  3163                           ;gsmg_c.c: 145:     CCP2X = pwm & 2;
  3164     0170  1283               	bcf	3,5	;RP0=0, select bank0
  3165     0171  1303               	bcf	3,6	;RP1=0, select bank0
  3166     0172  129D               	bcf	29,5	;volatile
  3167                           
  3168                           ;gsmg_c.c: 146:     CCP2Y = pwm & 1;
  3169     0173  1870               	btfsc	duty_sol@pwm,0
  3170     0174  2976               	goto	u1381
  3171     0175  297A               	goto	u1380
  3172     0176                     u1381:
  3173     0176  1283               	bcf	3,5	;RP0=0, select bank0
  3174     0177  1303               	bcf	3,6	;RP1=0, select bank0
  3175     0178  161D               	bsf	29,4	;volatile
  3176     0179  297D               	goto	u1394
  3177     017A                     u1380:
  3178     017A  1283               	bcf	3,5	;RP0=0, select bank0
  3179     017B  1303               	bcf	3,6	;RP1=0, select bank0
  3180     017C  121D               	bcf	29,4	;volatile
  3181     017D                     u1394:
  3182     017D                     l1562:
  3183                           
  3184                           ;gsmg_c.c: 147:     CCPR2L = pwm>>2;
  3185     017D  0871               	movf	duty_sol@pwm+1,w
  3186     017E  00F3               	movwf	??_duty_sol+1
  3187     017F  0870               	movf	duty_sol@pwm,w
  3188     0180  00F2               	movwf	??_duty_sol
  3189     0181  0D73               	rlf	??_duty_sol+1,w
  3190     0182  0CF3               	rrf	??_duty_sol+1,f
  3191     0183  0CF2               	rrf	??_duty_sol,f
  3192     0184  0D73               	rlf	??_duty_sol+1,w
  3193     0185  0CF3               	rrf	??_duty_sol+1,f
  3194     0186  0CF2               	rrf	??_duty_sol,f
  3195     0187  0872               	movf	??_duty_sol,w
  3196     0188  009B               	movwf	27	;volatile
  3197     0189                     l107:
  3198     0189  0008               	return
  3199     018A                     __end_of_duty_sol:
  3200                           
  3201                           	psect	text16
  3202     0156                     __ptext16:	
  3203 ;; *************** function _duty_sag *****************
  3204 ;; Defined at:
  3205 ;;		line 135 in file "gsmg_c.c"
  3206 ;; Parameters:    Size  Location     Type
  3207 ;;  pwm             2    0[COMMON] int 
  3208 ;; Auto vars:     Size  Location     Type
  3209 ;;		None
  3210 ;; Return value:  Size  Location     Type
  3211 ;;                  1    wreg      void 
  3212 ;; Registers used:
  3213 ;;		wreg
  3214 ;; Tracked objects:
  3215 ;;		On entry : 0/0
  3216 ;;		On exit  : 0/0
  3217 ;;		Unchanged: 0/0
  3218 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3219 ;;      Params:         2       0       0       0       0
  3220 ;;      Locals:         0       0       0       0       0
  3221 ;;      Temps:          2       0       0       0       0
  3222 ;;      Totals:         4       0       0       0       0
  3223 ;;Total ram usage:        4 bytes
  3224 ;; Hardware stack levels used: 1
  3225 ;; This function calls:
  3226 ;;		Nothing
  3227 ;; This function is called by:
  3228 ;;		_motor
  3229 ;; This function uses a non-reentrant model
  3230 ;;
  3231                           
  3232     0156                     _duty_sag:	
  3233                           ;psect for function _duty_sag
  3234                           
  3235     0156                     l1556:	
  3236                           ;incstack = 0
  3237                           ; Regs used in _duty_sag: [wreg]
  3238                           
  3239                           
  3240                           ;gsmg_c.c: 137:     CCP1X = pwm & 2;
  3241     0156  1283               	bcf	3,5	;RP0=0, select bank0
  3242     0157  1303               	bcf	3,6	;RP1=0, select bank0
  3243     0158  1297               	bcf	23,5	;volatile
  3244                           
  3245                           ;gsmg_c.c: 138:     CCP1Y = pwm & 1;
  3246     0159  1870               	btfsc	duty_sag@pwm,0
  3247     015A  295C               	goto	u1361
  3248     015B  2960               	goto	u1360
  3249     015C                     u1361:
  3250     015C  1283               	bcf	3,5	;RP0=0, select bank0
  3251     015D  1303               	bcf	3,6	;RP1=0, select bank0
  3252     015E  1617               	bsf	23,4	;volatile
  3253     015F  2963               	goto	u1374
  3254     0160                     u1360:
  3255     0160  1283               	bcf	3,5	;RP0=0, select bank0
  3256     0161  1303               	bcf	3,6	;RP1=0, select bank0
  3257     0162  1217               	bcf	23,4	;volatile
  3258     0163                     u1374:
  3259     0163                     l1558:
  3260                           
  3261                           ;gsmg_c.c: 139:     CCPR1L = pwm>>2;
  3262     0163  0871               	movf	duty_sag@pwm+1,w
  3263     0164  00F3               	movwf	??_duty_sag+1
  3264     0165  0870               	movf	duty_sag@pwm,w
  3265     0166  00F2               	movwf	??_duty_sag
  3266     0167  0D73               	rlf	??_duty_sag+1,w
  3267     0168  0CF3               	rrf	??_duty_sag+1,f
  3268     0169  0CF2               	rrf	??_duty_sag,f
  3269     016A  0D73               	rlf	??_duty_sag+1,w
  3270     016B  0CF3               	rrf	??_duty_sag+1,f
  3271     016C  0CF2               	rrf	??_duty_sag,f
  3272     016D  0872               	movf	??_duty_sag,w
  3273     016E  0095               	movwf	21	;volatile
  3274     016F                     l104:
  3275     016F  0008               	return
  3276     0170                     __end_of_duty_sag:
  3277                           
  3278                           	psect	text17
  3279     026E                     __ptext17:	
  3280 ;; *************** function _baslangic *****************
  3281 ;; Defined at:
  3282 ;;		line 151 in file "gsmg_c.c"
  3283 ;; Parameters:    Size  Location     Type
  3284 ;;		None
  3285 ;; Auto vars:     Size  Location     Type
  3286 ;;		None
  3287 ;; Return value:  Size  Location     Type
  3288 ;;                  1    wreg      void 
  3289 ;; Registers used:
  3290 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3291 ;; Tracked objects:
  3292 ;;		On entry : 0/0
  3293 ;;		On exit  : 0/0
  3294 ;;		Unchanged: 0/0
  3295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3296 ;;      Params:         0       0       0       0       0
  3297 ;;      Locals:         0       0       0       0       0
  3298 ;;      Temps:          0       3       0       0       0
  3299 ;;      Totals:         0       3       0       0       0
  3300 ;;Total ram usage:        3 bytes
  3301 ;; Hardware stack levels used: 1
  3302 ;; Hardware stack levels required when called: 3
  3303 ;; This function calls:
  3304 ;;		_Lcd_Clear
  3305 ;;		_Lcd_Set_Cursor
  3306 ;;		_Lcd_Write_String
  3307 ;; This function is called by:
  3308 ;;		_main
  3309 ;; This function uses a non-reentrant model
  3310 ;;
  3311                           
  3312     026E                     _baslangic:	
  3313                           ;psect for function _baslangic
  3314                           
  3315     026E                     l1584:	
  3316                           ;incstack = 0
  3317                           ; Regs used in _baslangic: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3318                           
  3319                           
  3320                           ;gsmg_c.c: 153:     Lcd_Set_Cursor(1,1);
  3321     026E  01F4               	clrf	Lcd_Set_Cursor@b
  3322     026F  0AF4               	incf	Lcd_Set_Cursor@b,f
  3323     0270  3001               	movlw	1
  3324     0271  120A  118A  22E6  120A  118A  	fcall	_Lcd_Set_Cursor
  3325     0276                     l1586:
  3326                           
  3327                           ;gsmg_c.c: 154:     Lcd_Write_String("   B200101043");
  3328     0276  3012               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  3329     0277  00F5               	movwf	Lcd_Write_String@a
  3330     0278  3080               	movlw	128
  3331     0279  00F6               	movwf	Lcd_Write_String@a+1
  3332     027A  120A  118A  22A4  120A  118A  	fcall	_Lcd_Write_String
  3333     027F                     l1588:
  3334                           
  3335                           ;gsmg_c.c: 155:     Lcd_Set_Cursor(2,1);
  3336     027F  01F4               	clrf	Lcd_Set_Cursor@b
  3337     0280  0AF4               	incf	Lcd_Set_Cursor@b,f
  3338     0281  3002               	movlw	2
  3339     0282  120A  118A  22E6  120A  118A  	fcall	_Lcd_Set_Cursor
  3340                           
  3341                           ;gsmg_c.c: 156:     Lcd_Write_String("MUSTAFAOGUZ ATES");
  3342     0287  3001               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  3343     0288  00F5               	movwf	Lcd_Write_String@a
  3344     0289  3080               	movlw	128
  3345     028A  00F6               	movwf	Lcd_Write_String@a+1
  3346     028B  120A  118A  22A4  120A  118A  	fcall	_Lcd_Write_String
  3347     0290                     l1590:
  3348                           
  3349                           ;gsmg_c.c: 157:     _delay((unsigned long)((3000)*(4000000/4000.0)));
  3350     0290  3010               	movlw	16
  3351     0291  1283               	bcf	3,5	;RP0=0, select bank0
  3352     0292  1303               	bcf	3,6	;RP1=0, select bank0
  3353     0293  00A2               	movwf	??_baslangic+2
  3354     0294  3039               	movlw	57
  3355     0295  00A1               	movwf	??_baslangic+1
  3356     0296  300D               	movlw	13
  3357     0297  00A0               	movwf	??_baslangic
  3358     0298                     u1567:
  3359     0298  0BA0               	decfsz	??_baslangic,f
  3360     0299  2A98               	goto	u1567
  3361     029A  0BA1               	decfsz	??_baslangic+1,f
  3362     029B  2A98               	goto	u1567
  3363     029C  0BA2               	decfsz	??_baslangic+2,f
  3364     029D  2A98               	goto	u1567
  3365     029E                     l1592:
  3366                           
  3367                           ;gsmg_c.c: 158:     Lcd_Clear();
  3368     029E  120A  118A  211E  120A  118A  	fcall	_Lcd_Clear
  3369     02A3                     l110:
  3370     02A3  0008               	return
  3371     02A4                     __end_of_baslangic:
  3372                           
  3373                           	psect	text18
  3374     02A4                     __ptext18:	
  3375 ;; *************** function _Lcd_Write_String *****************
  3376 ;; Defined at:
  3377 ;;		line 126 in file "gsmg_c.c"
  3378 ;; Parameters:    Size  Location     Type
  3379 ;;  a               2    5[COMMON] PTR unsigned char 
  3380 ;;		 -> main@yuzde_veri(16), STR_6(5), STR_5(5), STR_4(4), 
  3381 ;;		 -> STR_3(4), STR_2(17), STR_1(14), 
  3382 ;; Auto vars:     Size  Location     Type
  3383 ;;  i               2   10[COMMON] int 
  3384 ;; Return value:  Size  Location     Type
  3385 ;;                  1    wreg      void 
  3386 ;; Registers used:
  3387 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3388 ;; Tracked objects:
  3389 ;;		On entry : 0/0
  3390 ;;		On exit  : 0/0
  3391 ;;		Unchanged: 0/0
  3392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3393 ;;      Params:         2       0       0       0       0
  3394 ;;      Locals:         2       0       0       0       0
  3395 ;;      Temps:          3       0       0       0       0
  3396 ;;      Totals:         7       0       0       0       0
  3397 ;;Total ram usage:        7 bytes
  3398 ;; Hardware stack levels used: 1
  3399 ;; Hardware stack levels required when called: 2
  3400 ;; This function calls:
  3401 ;;		_Lcd_Write_Char
  3402 ;; This function is called by:
  3403 ;;		_baslangic
  3404 ;;		_motor
  3405 ;;		_main
  3406 ;; This function uses a non-reentrant model
  3407 ;;
  3408                           
  3409     02A4                     _Lcd_Write_String:	
  3410                           ;psect for function _Lcd_Write_String
  3411                           
  3412     02A4                     l1548:	
  3413                           ;incstack = 0
  3414                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3415                           
  3416                           
  3417                           ;gsmg_c.c: 126: void Lcd_Write_String(char *a);gsmg_c.c: 128: {;gsmg_c.c: 129:     int i
      +                          ;;gsmg_c.c: 130:     for(i=0;a[i]!='\0';i++)
  3418     02A4  01FA               	clrf	Lcd_Write_String@i
  3419     02A5  01FB               	clrf	Lcd_Write_String@i+1
  3420     02A6  2AC9               	goto	l1554
  3421     02A7                     l1550:
  3422                           
  3423                           ;gsmg_c.c: 131:      Lcd_Write_Char(a[i]);
  3424     02A7  087A               	movf	Lcd_Write_String@i,w
  3425     02A8  0775               	addwf	Lcd_Write_String@a,w
  3426     02A9  00F8               	movwf	??_Lcd_Write_String+1
  3427     02AA  0876               	movf	Lcd_Write_String@a+1,w
  3428     02AB  00F7               	movwf	??_Lcd_Write_String
  3429     02AC  1803               	skipnc
  3430     02AD  0AF7               	incf	??_Lcd_Write_String,f
  3431     02AE  1FFA               	btfss	Lcd_Write_String@i,7
  3432     02AF  2AB1               	goto	u1330
  3433     02B0  03F7               	decf	??_Lcd_Write_String,f
  3434     02B1                     u1330:
  3435     02B1  0877               	movf	??_Lcd_Write_String,w
  3436     02B2  00F9               	movwf	??_Lcd_Write_String+2
  3437     02B3  0879               	movf	??_Lcd_Write_String+2,w
  3438     02B4  1283               	bcf	3,5	;RP0=0, select bank0
  3439     02B5  1303               	bcf	3,6	;RP1=0, select bank0
  3440     02B6  00FF               	movwf	btemp+1
  3441     02B7  0878               	movf	??_Lcd_Write_String+1,w
  3442     02B8  0084               	movwf	4
  3443     02B9  120A  118A  2003  120A  118A  	fcall	stringtab
  3444     02BE  120A  118A  223B  120A  118A  	fcall	_Lcd_Write_Char
  3445     02C3                     l1552:
  3446     02C3  3001               	movlw	1
  3447     02C4  07FA               	addwf	Lcd_Write_String@i,f
  3448     02C5  1803               	skipnc
  3449     02C6  0AFB               	incf	Lcd_Write_String@i+1,f
  3450     02C7  3000               	movlw	0
  3451     02C8  07FB               	addwf	Lcd_Write_String@i+1,f
  3452     02C9                     l1554:
  3453     02C9  087A               	movf	Lcd_Write_String@i,w
  3454     02CA  0775               	addwf	Lcd_Write_String@a,w
  3455     02CB  00F8               	movwf	??_Lcd_Write_String+1
  3456     02CC  0876               	movf	Lcd_Write_String@a+1,w
  3457     02CD  00F7               	movwf	??_Lcd_Write_String
  3458     02CE  1803               	skipnc
  3459     02CF  0AF7               	incf	??_Lcd_Write_String,f
  3460     02D0  1FFA               	btfss	Lcd_Write_String@i,7
  3461     02D1  2AD3               	goto	u1340
  3462     02D2  03F7               	decf	??_Lcd_Write_String,f
  3463     02D3                     u1340:
  3464     02D3  0877               	movf	??_Lcd_Write_String,w
  3465     02D4  00F9               	movwf	??_Lcd_Write_String+2
  3466     02D5  0879               	movf	??_Lcd_Write_String+2,w
  3467     02D6  1283               	bcf	3,5	;RP0=0, select bank0
  3468     02D7  1303               	bcf	3,6	;RP1=0, select bank0
  3469     02D8  00FF               	movwf	btemp+1
  3470     02D9  0878               	movf	??_Lcd_Write_String+1,w
  3471     02DA  0084               	movwf	4
  3472     02DB  120A  118A  2003  120A  118A  	fcall	stringtab
  3473     02E0  3A00               	xorlw	0
  3474     02E1  1D03               	skipz
  3475     02E2  2AE4               	goto	u1351
  3476     02E3  2AE5               	goto	u1350
  3477     02E4                     u1351:
  3478     02E4  2AA7               	goto	l1550
  3479     02E5                     u1350:
  3480     02E5                     l101:
  3481     02E5  0008               	return
  3482     02E6                     __end_of_Lcd_Write_String:
  3483                           
  3484                           	psect	text19
  3485     023B                     __ptext19:	
  3486 ;; *************** function _Lcd_Write_Char *****************
  3487 ;; Defined at:
  3488 ;;		line 110 in file "gsmg_c.c"
  3489 ;; Parameters:    Size  Location     Type
  3490 ;;  a               1    wreg     unsigned char 
  3491 ;; Auto vars:     Size  Location     Type
  3492 ;;  a               1    4[COMMON] unsigned char 
  3493 ;;  y               1    3[COMMON] unsigned char 
  3494 ;;  temp            1    2[COMMON] unsigned char 
  3495 ;; Return value:  Size  Location     Type
  3496 ;;                  1    wreg      void 
  3497 ;; Registers used:
  3498 ;;		wreg, status,2, status,0, pclath, cstack
  3499 ;; Tracked objects:
  3500 ;;		On entry : 0/0
  3501 ;;		On exit  : 0/0
  3502 ;;		Unchanged: 0/0
  3503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3504 ;;      Params:         0       0       0       0       0
  3505 ;;      Locals:         3       0       0       0       0
  3506 ;;      Temps:          1       0       0       0       0
  3507 ;;      Totals:         4       0       0       0       0
  3508 ;;Total ram usage:        4 bytes
  3509 ;; Hardware stack levels used: 1
  3510 ;; Hardware stack levels required when called: 1
  3511 ;; This function calls:
  3512 ;;		_Lcd_Port
  3513 ;; This function is called by:
  3514 ;;		_Lcd_Write_String
  3515 ;; This function uses a non-reentrant model
  3516 ;;
  3517                           
  3518     023B                     _Lcd_Write_Char:	
  3519                           ;psect for function _Lcd_Write_Char
  3520                           
  3521                           
  3522                           ;incstack = 0
  3523                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  3524                           ;Lcd_Write_Char@a stored from wreg
  3525     023B  00F4               	movwf	Lcd_Write_Char@a
  3526     023C                     l1466:
  3527                           
  3528                           ;gsmg_c.c: 110: void Lcd_Write_Char(char a);gsmg_c.c: 112: {;gsmg_c.c: 113:     char tem
      +                          p,y;;gsmg_c.c: 114:     temp = a&0x0F;
  3529     023C  0874               	movf	Lcd_Write_Char@a,w
  3530     023D  390F               	andlw	15
  3531     023E  00F2               	movwf	Lcd_Write_Char@temp
  3532                           
  3533                           ;gsmg_c.c: 115:     y = a&0xF0;
  3534     023F  0874               	movf	Lcd_Write_Char@a,w
  3535     0240  39F0               	andlw	240
  3536     0241  00F3               	movwf	Lcd_Write_Char@y
  3537     0242                     l1468:
  3538                           
  3539                           ;gsmg_c.c: 116:     RC0 = 1;
  3540     0242  1283               	bcf	3,5	;RP0=0, select bank0
  3541     0243  1303               	bcf	3,6	;RP1=0, select bank0
  3542     0244  1407               	bsf	7,0	;volatile
  3543     0245                     l1470:
  3544                           
  3545                           ;gsmg_c.c: 117:     Lcd_Port(y>>4);
  3546     0245  0873               	movf	Lcd_Write_Char@y,w
  3547     0246  00F1               	movwf	??_Lcd_Write_Char
  3548     0247  3004               	movlw	4
  3549     0248                     u1245:
  3550     0248  1003               	clrc
  3551     0249  0CF1               	rrf	??_Lcd_Write_Char,f
  3552     024A  3EFF               	addlw	-1
  3553     024B  1D03               	skipz
  3554     024C  2A48               	goto	u1245
  3555     024D  0871               	movf	??_Lcd_Write_Char,w
  3556     024E  120A  118A  21CA  120A  118A  	fcall	_Lcd_Port
  3557     0253                     l1472:
  3558                           
  3559                           ;gsmg_c.c: 118:     RC3 = 1;
  3560     0253  1283               	bcf	3,5	;RP0=0, select bank0
  3561     0254  1303               	bcf	3,6	;RP1=0, select bank0
  3562     0255  1587               	bsf	7,3	;volatile
  3563     0256                     l1474:
  3564                           
  3565                           ;gsmg_c.c: 119:     _delay((unsigned long)((40)*(4000000/4000000.0)));
  3566     0256  300D               	movlw	13
  3567     0257  00F1               	movwf	??_Lcd_Write_Char
  3568     0258                     u1577:
  3569     0258  0BF1               	decfsz	??_Lcd_Write_Char,f
  3570     0259  2A58               	goto	u1577
  3571     025A                     l1476:
  3572                           
  3573                           ;gsmg_c.c: 120:     RC3 = 0;
  3574     025A  1283               	bcf	3,5	;RP0=0, select bank0
  3575     025B  1303               	bcf	3,6	;RP1=0, select bank0
  3576     025C  1187               	bcf	7,3	;volatile
  3577     025D                     l1478:
  3578                           
  3579                           ;gsmg_c.c: 121:     Lcd_Port(temp);
  3580     025D  0872               	movf	Lcd_Write_Char@temp,w
  3581     025E  120A  118A  21CA  120A  118A  	fcall	_Lcd_Port
  3582     0263                     l1480:
  3583                           
  3584                           ;gsmg_c.c: 122:     RC3 = 1;
  3585     0263  1283               	bcf	3,5	;RP0=0, select bank0
  3586     0264  1303               	bcf	3,6	;RP1=0, select bank0
  3587     0265  1587               	bsf	7,3	;volatile
  3588     0266                     l1482:
  3589                           
  3590                           ;gsmg_c.c: 123:     _delay((unsigned long)((40)*(4000000/4000000.0)));
  3591     0266  300D               	movlw	13
  3592     0267  00F1               	movwf	??_Lcd_Write_Char
  3593     0268                     u1587:
  3594     0268  0BF1               	decfsz	??_Lcd_Write_Char,f
  3595     0269  2A68               	goto	u1587
  3596     026A                     l1484:
  3597                           
  3598                           ;gsmg_c.c: 124:     RC3 = 0;
  3599     026A  1283               	bcf	3,5	;RP0=0, select bank0
  3600     026B  1303               	bcf	3,6	;RP1=0, select bank0
  3601     026C  1187               	bcf	7,3	;volatile
  3602     026D                     l95:
  3603     026D  0008               	return
  3604     026E                     __end_of_Lcd_Write_Char:
  3605                           
  3606                           	psect	text20
  3607     02E6                     __ptext20:	
  3608 ;; *************** function _Lcd_Set_Cursor *****************
  3609 ;; Defined at:
  3610 ;;		line 71 in file "gsmg_c.c"
  3611 ;; Parameters:    Size  Location     Type
  3612 ;;  a               1    wreg     unsigned char 
  3613 ;;  b               1    4[COMMON] unsigned char 
  3614 ;; Auto vars:     Size  Location     Type
  3615 ;;  a               1    6[COMMON] unsigned char 
  3616 ;;  temp            1    9[COMMON] unsigned char 
  3617 ;;  y               1    8[COMMON] unsigned char 
  3618 ;;  z               1    7[COMMON] unsigned char 
  3619 ;; Return value:  Size  Location     Type
  3620 ;;                  1    wreg      void 
  3621 ;; Registers used:
  3622 ;;		wreg, status,2, status,0, pclath, cstack
  3623 ;; Tracked objects:
  3624 ;;		On entry : 0/0
  3625 ;;		On exit  : 0/0
  3626 ;;		Unchanged: 0/0
  3627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3628 ;;      Params:         1       0       0       0       0
  3629 ;;      Locals:         4       0       0       0       0
  3630 ;;      Temps:          1       0       0       0       0
  3631 ;;      Totals:         6       0       0       0       0
  3632 ;;Total ram usage:        6 bytes
  3633 ;; Hardware stack levels used: 1
  3634 ;; Hardware stack levels required when called: 2
  3635 ;; This function calls:
  3636 ;;		_Lcd_Cmd
  3637 ;; This function is called by:
  3638 ;;		_baslangic
  3639 ;;		_motor
  3640 ;;		_main
  3641 ;; This function uses a non-reentrant model
  3642 ;;
  3643                           
  3644     02E6                     _Lcd_Set_Cursor:	
  3645                           ;psect for function _Lcd_Set_Cursor
  3646                           
  3647                           
  3648                           ;incstack = 0
  3649                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  3650                           ;Lcd_Set_Cursor@a stored from wreg
  3651     02E6  00F6               	movwf	Lcd_Set_Cursor@a
  3652     02E7                     l1528:
  3653                           
  3654                           ;gsmg_c.c: 71: void Lcd_Set_Cursor(char a, char b);gsmg_c.c: 73: {;gsmg_c.c: 74:     cha
      +                          r temp,z,y;;gsmg_c.c: 75:     if(a == 1)
  3655     02E7  0376               	decf	Lcd_Set_Cursor@a,w
  3656     02E8  1D03               	btfss	3,2
  3657     02E9  2AEB               	goto	u1291
  3658     02EA  2AEC               	goto	u1290
  3659     02EB                     u1291:
  3660     02EB  2B09               	goto	l1538
  3661     02EC                     u1290:
  3662     02EC                     l1530:
  3663                           
  3664                           ;gsmg_c.c: 76:         {;gsmg_c.c: 77:          temp = 0x80 + b - 1;
  3665     02EC  0874               	movf	Lcd_Set_Cursor@b,w
  3666     02ED  3E7F               	addlw	127
  3667     02EE  00F9               	movwf	Lcd_Set_Cursor@temp
  3668                           
  3669                           ;gsmg_c.c: 78:         z = temp>>4;
  3670     02EF  0879               	movf	Lcd_Set_Cursor@temp,w
  3671     02F0  00F5               	movwf	??_Lcd_Set_Cursor
  3672     02F1  3004               	movlw	4
  3673     02F2                     u1305:
  3674     02F2  1003               	clrc
  3675     02F3  0CF5               	rrf	??_Lcd_Set_Cursor,f
  3676     02F4  3EFF               	addlw	-1
  3677     02F5  1D03               	skipz
  3678     02F6  2AF2               	goto	u1305
  3679     02F7  0875               	movf	??_Lcd_Set_Cursor,w
  3680     02F8  00F7               	movwf	Lcd_Set_Cursor@z
  3681     02F9                     l1532:
  3682                           
  3683                           ;gsmg_c.c: 79:         y = temp & 0x0F;
  3684     02F9  0879               	movf	Lcd_Set_Cursor@temp,w
  3685     02FA  390F               	andlw	15
  3686     02FB  00F8               	movwf	Lcd_Set_Cursor@y
  3687     02FC                     l1534:
  3688                           
  3689                           ;gsmg_c.c: 80:         Lcd_Cmd(z);
  3690     02FC  0877               	movf	Lcd_Set_Cursor@z,w
  3691     02FD  120A  118A  213C  120A  118A  	fcall	_Lcd_Cmd
  3692     0302                     l1536:
  3693                           
  3694                           ;gsmg_c.c: 81:         Lcd_Cmd(y);
  3695     0302  0878               	movf	Lcd_Set_Cursor@y,w
  3696     0303  120A  118A  213C  120A  118A  	fcall	_Lcd_Cmd
  3697                           
  3698                           ;gsmg_c.c: 82:     }
  3699     0308  2B2B               	goto	l89
  3700     0309                     l1538:
  3701     0309  3002               	movlw	2
  3702     030A  0676               	xorwf	Lcd_Set_Cursor@a,w
  3703     030B  1D03               	btfss	3,2
  3704     030C  2B0E               	goto	u1311
  3705     030D  2B0F               	goto	u1310
  3706     030E                     u1311:
  3707     030E  2B2B               	goto	l89
  3708     030F                     u1310:
  3709     030F                     l1540:
  3710                           
  3711                           ;gsmg_c.c: 84:     {;gsmg_c.c: 85:         temp = 0xC0 + b - 1;
  3712     030F  0874               	movf	Lcd_Set_Cursor@b,w
  3713     0310  3EBF               	addlw	191
  3714     0311  00F9               	movwf	Lcd_Set_Cursor@temp
  3715                           
  3716                           ;gsmg_c.c: 86:         z = temp>>4;
  3717     0312  0879               	movf	Lcd_Set_Cursor@temp,w
  3718     0313  00F5               	movwf	??_Lcd_Set_Cursor
  3719     0314  3004               	movlw	4
  3720     0315                     u1325:
  3721     0315  1003               	clrc
  3722     0316  0CF5               	rrf	??_Lcd_Set_Cursor,f
  3723     0317  3EFF               	addlw	-1
  3724     0318  1D03               	skipz
  3725     0319  2B15               	goto	u1325
  3726     031A  0875               	movf	??_Lcd_Set_Cursor,w
  3727     031B  00F7               	movwf	Lcd_Set_Cursor@z
  3728     031C                     l1542:
  3729                           
  3730                           ;gsmg_c.c: 87:         y = temp & 0x0F;
  3731     031C  0879               	movf	Lcd_Set_Cursor@temp,w
  3732     031D  390F               	andlw	15
  3733     031E  00F8               	movwf	Lcd_Set_Cursor@y
  3734     031F                     l1544:
  3735                           
  3736                           ;gsmg_c.c: 88:         Lcd_Cmd(z);
  3737     031F  0877               	movf	Lcd_Set_Cursor@z,w
  3738     0320  120A  118A  213C  120A  118A  	fcall	_Lcd_Cmd
  3739     0325                     l1546:
  3740                           
  3741                           ;gsmg_c.c: 89:         Lcd_Cmd(y);
  3742     0325  0878               	movf	Lcd_Set_Cursor@y,w
  3743     0326  120A  118A  213C  120A  118A  	fcall	_Lcd_Cmd
  3744     032B                     l89:
  3745     032B  0008               	return
  3746     032C                     __end_of_Lcd_Set_Cursor:
  3747                           
  3748                           	psect	text21
  3749     011E                     __ptext21:	
  3750 ;; *************** function _Lcd_Clear *****************
  3751 ;; Defined at:
  3752 ;;		line 66 in file "gsmg_c.c"
  3753 ;; Parameters:    Size  Location     Type
  3754 ;;		None
  3755 ;; Auto vars:     Size  Location     Type
  3756 ;;		None
  3757 ;; Return value:  Size  Location     Type
  3758 ;;                  1    wreg      void 
  3759 ;; Registers used:
  3760 ;;		wreg, status,2, status,0, pclath, cstack
  3761 ;; Tracked objects:
  3762 ;;		On entry : 0/0
  3763 ;;		On exit  : 0/0
  3764 ;;		Unchanged: 0/0
  3765 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3766 ;;      Params:         0       0       0       0       0
  3767 ;;      Locals:         0       0       0       0       0
  3768 ;;      Temps:          0       0       0       0       0
  3769 ;;      Totals:         0       0       0       0       0
  3770 ;;Total ram usage:        0 bytes
  3771 ;; Hardware stack levels used: 1
  3772 ;; Hardware stack levels required when called: 2
  3773 ;; This function calls:
  3774 ;;		_Lcd_Cmd
  3775 ;; This function is called by:
  3776 ;;		_baslangic
  3777 ;; This function uses a non-reentrant model
  3778 ;;
  3779                           
  3780     011E                     _Lcd_Clear:	
  3781                           ;psect for function _Lcd_Clear
  3782                           
  3783     011E                     l1526:	
  3784                           ;incstack = 0
  3785                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  3786                           
  3787                           
  3788                           ;gsmg_c.c: 68:     Lcd_Cmd(0);
  3789     011E  3000               	movlw	0
  3790     011F  120A  118A  213C  120A  118A  	fcall	_Lcd_Cmd
  3791                           
  3792                           ;gsmg_c.c: 69:     Lcd_Cmd(1);
  3793     0124  3001               	movlw	1
  3794     0125  120A  118A  213C  120A  118A  	fcall	_Lcd_Cmd
  3795     012A                     l83:
  3796     012A  0008               	return
  3797     012B                     __end_of_Lcd_Clear:
  3798                           
  3799                           	psect	text22
  3800     047F                     __ptext22:	
  3801 ;; *************** function _Lcd_Init *****************
  3802 ;; Defined at:
  3803 ;;		line 92 in file "gsmg_c.c"
  3804 ;; Parameters:    Size  Location     Type
  3805 ;;		None
  3806 ;; Auto vars:     Size  Location     Type
  3807 ;;		None
  3808 ;; Return value:  Size  Location     Type
  3809 ;;                  1    wreg      void 
  3810 ;; Registers used:
  3811 ;;		wreg, status,2, status,0, pclath, cstack
  3812 ;; Tracked objects:
  3813 ;;		On entry : 0/0
  3814 ;;		On exit  : 0/0
  3815 ;;		Unchanged: 0/0
  3816 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3817 ;;      Params:         0       0       0       0       0
  3818 ;;      Locals:         0       0       0       0       0
  3819 ;;      Temps:          2       0       0       0       0
  3820 ;;      Totals:         2       0       0       0       0
  3821 ;;Total ram usage:        2 bytes
  3822 ;; Hardware stack levels used: 1
  3823 ;; Hardware stack levels required when called: 2
  3824 ;; This function calls:
  3825 ;;		_Lcd_Cmd
  3826 ;;		_Lcd_Port
  3827 ;; This function is called by:
  3828 ;;		_main
  3829 ;; This function uses a non-reentrant model
  3830 ;;
  3831                           
  3832     047F                     _Lcd_Init:	
  3833                           ;psect for function _Lcd_Init
  3834                           
  3835     047F                     l1574:	
  3836                           ;incstack = 0
  3837                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  3838                           
  3839                           
  3840                           ;gsmg_c.c: 95:     Lcd_Port(0x00);
  3841     047F  3000               	movlw	0
  3842     0480  120A  118A  21CA  120A  118A  	fcall	_Lcd_Port
  3843     0485                     l1576:
  3844                           
  3845                           ;gsmg_c.c: 96:     _delay((unsigned long)((20)*(4000000/4000.0)));
  3846     0485  301A               	movlw	26
  3847     0486  00F5               	movwf	??_Lcd_Init+1
  3848     0487  30F8               	movlw	248
  3849     0488  00F4               	movwf	??_Lcd_Init
  3850     0489                     u1597:
  3851     0489  0BF4               	decfsz	??_Lcd_Init,f
  3852     048A  2C89               	goto	u1597
  3853     048B  0BF5               	decfsz	??_Lcd_Init+1,f
  3854     048C  2C89               	goto	u1597
  3855     048D  0000               	nop
  3856     048E                     l1578:
  3857                           
  3858                           ;gsmg_c.c: 97:     Lcd_Cmd(0x03);
  3859     048E  3003               	movlw	3
  3860     048F  120A  118A  213C  120A  118A  	fcall	_Lcd_Cmd
  3861                           
  3862                           ;gsmg_c.c: 98:    _delay((unsigned long)((5)*(4000000/4000.0)));
  3863     0494  3007               	movlw	7
  3864     0495  00F5               	movwf	??_Lcd_Init+1
  3865     0496  307D               	movlw	125
  3866     0497  00F4               	movwf	??_Lcd_Init
  3867     0498                     u1607:
  3868     0498  0BF4               	decfsz	??_Lcd_Init,f
  3869     0499  2C98               	goto	u1607
  3870     049A  0BF5               	decfsz	??_Lcd_Init+1,f
  3871     049B  2C98               	goto	u1607
  3872     049C                     l1580:
  3873                           
  3874                           ;gsmg_c.c: 99:     Lcd_Cmd(0x03);
  3875     049C  3003               	movlw	3
  3876     049D  120A  118A  213C  120A  118A  	fcall	_Lcd_Cmd
  3877     04A2                     l1582:
  3878                           
  3879                           ;gsmg_c.c: 100:    _delay((unsigned long)((11)*(4000000/4000.0)));
  3880     04A2  300F               	movlw	15
  3881     04A3  00F5               	movwf	??_Lcd_Init+1
  3882     04A4  3047               	movlw	71
  3883     04A5  00F4               	movwf	??_Lcd_Init
  3884     04A6                     u1617:
  3885     04A6  0BF4               	decfsz	??_Lcd_Init,f
  3886     04A7  2CA6               	goto	u1617
  3887     04A8  0BF5               	decfsz	??_Lcd_Init+1,f
  3888     04A9  2CA6               	goto	u1617
  3889     04AA  2CAB               	nop2
  3890                           
  3891                           ;gsmg_c.c: 101:     Lcd_Cmd(0x03);
  3892     04AB  3003               	movlw	3
  3893     04AC  120A  118A  213C  120A  118A  	fcall	_Lcd_Cmd
  3894                           
  3895                           ;gsmg_c.c: 102:     Lcd_Cmd(0x02);
  3896     04B1  3002               	movlw	2
  3897     04B2  120A  118A  213C  120A  118A  	fcall	_Lcd_Cmd
  3898                           
  3899                           ;gsmg_c.c: 103:     Lcd_Cmd(0x02);
  3900     04B7  3002               	movlw	2
  3901     04B8  120A  118A  213C  120A  118A  	fcall	_Lcd_Cmd
  3902                           
  3903                           ;gsmg_c.c: 104:     Lcd_Cmd(0x08);
  3904     04BD  3008               	movlw	8
  3905     04BE  120A  118A  213C  120A  118A  	fcall	_Lcd_Cmd
  3906                           
  3907                           ;gsmg_c.c: 105:     Lcd_Cmd(0x00);
  3908     04C3  3000               	movlw	0
  3909     04C4  120A  118A  213C  120A  118A  	fcall	_Lcd_Cmd
  3910                           
  3911                           ;gsmg_c.c: 106:     Lcd_Cmd(0x0C);
  3912     04C9  300C               	movlw	12
  3913     04CA  120A  118A  213C  120A  118A  	fcall	_Lcd_Cmd
  3914                           
  3915                           ;gsmg_c.c: 107:     Lcd_Cmd(0x00);
  3916     04CF  3000               	movlw	0
  3917     04D0  120A  118A  213C  120A  118A  	fcall	_Lcd_Cmd
  3918                           
  3919                           ;gsmg_c.c: 108:     Lcd_Cmd(0x06);
  3920     04D5  3006               	movlw	6
  3921     04D6  120A  118A  213C  120A  118A  	fcall	_Lcd_Cmd
  3922     04DB                     l92:
  3923     04DB  0008               	return
  3924     04DC                     __end_of_Lcd_Init:
  3925                           
  3926                           	psect	text23
  3927     013C                     __ptext23:	
  3928 ;; *************** function _Lcd_Cmd *****************
  3929 ;; Defined at:
  3930 ;;		line 57 in file "gsmg_c.c"
  3931 ;; Parameters:    Size  Location     Type
  3932 ;;  a               1    wreg     unsigned char 
  3933 ;; Auto vars:     Size  Location     Type
  3934 ;;  a               1    3[COMMON] unsigned char 
  3935 ;; Return value:  Size  Location     Type
  3936 ;;                  1    wreg      void 
  3937 ;; Registers used:
  3938 ;;		wreg, status,2, status,0, pclath, cstack
  3939 ;; Tracked objects:
  3940 ;;		On entry : 0/0
  3941 ;;		On exit  : 0/0
  3942 ;;		Unchanged: 0/0
  3943 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3944 ;;      Params:         0       0       0       0       0
  3945 ;;      Locals:         1       0       0       0       0
  3946 ;;      Temps:          2       0       0       0       0
  3947 ;;      Totals:         3       0       0       0       0
  3948 ;;Total ram usage:        3 bytes
  3949 ;; Hardware stack levels used: 1
  3950 ;; Hardware stack levels required when called: 1
  3951 ;; This function calls:
  3952 ;;		_Lcd_Port
  3953 ;; This function is called by:
  3954 ;;		_Lcd_Clear
  3955 ;;		_Lcd_Set_Cursor
  3956 ;;		_Lcd_Init
  3957 ;; This function uses a non-reentrant model
  3958 ;;
  3959                           
  3960     013C                     _Lcd_Cmd:	
  3961                           ;psect for function _Lcd_Cmd
  3962                           
  3963                           
  3964                           ;incstack = 0
  3965                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  3966                           ;Lcd_Cmd@a stored from wreg
  3967     013C  00F3               	movwf	Lcd_Cmd@a
  3968     013D                     l1456:
  3969                           
  3970                           ;gsmg_c.c: 57: void Lcd_Cmd(char a);gsmg_c.c: 58: {;gsmg_c.c: 59:     RC0 = 0;
  3971     013D  1283               	bcf	3,5	;RP0=0, select bank0
  3972     013E  1303               	bcf	3,6	;RP1=0, select bank0
  3973     013F  1007               	bcf	7,0	;volatile
  3974     0140                     l1458:
  3975                           
  3976                           ;gsmg_c.c: 60:     Lcd_Port(a);
  3977     0140  0873               	movf	Lcd_Cmd@a,w
  3978     0141  120A  118A  21CA  120A  118A  	fcall	_Lcd_Port
  3979     0146                     l1460:
  3980                           
  3981                           ;gsmg_c.c: 61:     RC3 = 1;
  3982     0146  1283               	bcf	3,5	;RP0=0, select bank0
  3983     0147  1303               	bcf	3,6	;RP1=0, select bank0
  3984     0148  1587               	bsf	7,3	;volatile
  3985     0149                     l1462:
  3986                           
  3987                           ;gsmg_c.c: 62:      _delay((unsigned long)((4)*(4000000/4000.0)));
  3988     0149  3006               	movlw	6
  3989     014A  00F2               	movwf	??_Lcd_Cmd+1
  3990     014B  3030               	movlw	48
  3991     014C  00F1               	movwf	??_Lcd_Cmd
  3992     014D                     u1627:
  3993     014D  0BF1               	decfsz	??_Lcd_Cmd,f
  3994     014E  294D               	goto	u1627
  3995     014F  0BF2               	decfsz	??_Lcd_Cmd+1,f
  3996     0150  294D               	goto	u1627
  3997     0151  0000               	nop
  3998     0152                     l1464:
  3999                           
  4000                           ;gsmg_c.c: 63:      RC3 = 0;
  4001     0152  1283               	bcf	3,5	;RP0=0, select bank0
  4002     0153  1303               	bcf	3,6	;RP1=0, select bank0
  4003     0154  1187               	bcf	7,3	;volatile
  4004     0155                     l80:
  4005     0155  0008               	return
  4006     0156                     __end_of_Lcd_Cmd:
  4007                           
  4008                           	psect	text24
  4009     01CA                     __ptext24:	
  4010 ;; *************** function _Lcd_Port *****************
  4011 ;; Defined at:
  4012 ;;		line 38 in file "gsmg_c.c"
  4013 ;; Parameters:    Size  Location     Type
  4014 ;;  a               1    wreg     unsigned char 
  4015 ;; Auto vars:     Size  Location     Type
  4016 ;;  a               1    0[COMMON] unsigned char 
  4017 ;; Return value:  Size  Location     Type
  4018 ;;                  1    wreg      void 
  4019 ;; Registers used:
  4020 ;;		wreg
  4021 ;; Tracked objects:
  4022 ;;		On entry : 0/0
  4023 ;;		On exit  : 0/0
  4024 ;;		Unchanged: 0/0
  4025 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4026 ;;      Params:         0       0       0       0       0
  4027 ;;      Locals:         1       0       0       0       0
  4028 ;;      Temps:          0       0       0       0       0
  4029 ;;      Totals:         1       0       0       0       0
  4030 ;;Total ram usage:        1 bytes
  4031 ;; Hardware stack levels used: 1
  4032 ;; This function calls:
  4033 ;;		Nothing
  4034 ;; This function is called by:
  4035 ;;		_Lcd_Cmd
  4036 ;;		_Lcd_Init
  4037 ;;		_Lcd_Write_Char
  4038 ;; This function uses a non-reentrant model
  4039 ;;
  4040                           
  4041     01CA                     _Lcd_Port:	
  4042                           ;psect for function _Lcd_Port
  4043                           
  4044                           
  4045                           ;incstack = 0
  4046                           ; Regs used in _Lcd_Port: [wreg]
  4047                           ;Lcd_Port@a stored from wreg
  4048     01CA  00F0               	movwf	Lcd_Port@a
  4049     01CB                     l1388:
  4050                           
  4051                           ;gsmg_c.c: 39:     if(a & 1)
  4052     01CB  1C70               	btfss	Lcd_Port@a,0
  4053     01CC  29CE               	goto	u1101
  4054     01CD  29CF               	goto	u1100
  4055     01CE                     u1101:
  4056     01CE  29D3               	goto	l69
  4057     01CF                     u1100:
  4058     01CF                     l1390:
  4059                           
  4060                           ;gsmg_c.c: 40:         RD4 = 1;
  4061     01CF  1283               	bcf	3,5	;RP0=0, select bank0
  4062     01D0  1303               	bcf	3,6	;RP1=0, select bank0
  4063     01D1  1608               	bsf	8,4	;volatile
  4064     01D2  29D6               	goto	l70
  4065     01D3                     l69:	
  4066                           ;gsmg_c.c: 41:     else
  4067                           
  4068                           
  4069                           ;gsmg_c.c: 42:         RD4 = 0;
  4070     01D3  1283               	bcf	3,5	;RP0=0, select bank0
  4071     01D4  1303               	bcf	3,6	;RP1=0, select bank0
  4072     01D5  1208               	bcf	8,4	;volatile
  4073     01D6                     l70:
  4074                           
  4075                           ;gsmg_c.c: 43:     if(a & 2)
  4076     01D6  1CF0               	btfss	Lcd_Port@a,1
  4077     01D7  29D9               	goto	u1111
  4078     01D8  29DA               	goto	u1110
  4079     01D9                     u1111:
  4080     01D9  29DC               	goto	l71
  4081     01DA                     u1110:
  4082     01DA                     l1392:
  4083                           
  4084                           ;gsmg_c.c: 44:         RD5 = 1;
  4085     01DA  1688               	bsf	8,5	;volatile
  4086     01DB  29DD               	goto	l72
  4087     01DC                     l71:	
  4088                           ;gsmg_c.c: 45:     else
  4089                           
  4090                           
  4091                           ;gsmg_c.c: 46:         RD5 = 0;
  4092     01DC  1288               	bcf	8,5	;volatile
  4093     01DD                     l72:
  4094                           
  4095                           ;gsmg_c.c: 47:     if(a & 4)
  4096     01DD  1D70               	btfss	Lcd_Port@a,2
  4097     01DE  29E0               	goto	u1121
  4098     01DF  29E1               	goto	u1120
  4099     01E0                     u1121:
  4100     01E0  29E3               	goto	l73
  4101     01E1                     u1120:
  4102     01E1                     l1394:
  4103                           
  4104                           ;gsmg_c.c: 48:         RD6 = 1;
  4105     01E1  1708               	bsf	8,6	;volatile
  4106     01E2  29E4               	goto	l74
  4107     01E3                     l73:	
  4108                           ;gsmg_c.c: 49:     else
  4109                           
  4110                           
  4111                           ;gsmg_c.c: 50:         RD6 = 0;
  4112     01E3  1308               	bcf	8,6	;volatile
  4113     01E4                     l74:
  4114                           
  4115                           ;gsmg_c.c: 51:     if(a & 8)
  4116     01E4  1DF0               	btfss	Lcd_Port@a,3
  4117     01E5  29E7               	goto	u1131
  4118     01E6  29E8               	goto	u1130
  4119     01E7                     u1131:
  4120     01E7  29EA               	goto	l75
  4121     01E8                     u1130:
  4122     01E8                     l1396:
  4123                           
  4124                           ;gsmg_c.c: 52:         RD7 = 1;
  4125     01E8  1788               	bsf	8,7	;volatile
  4126     01E9  29EB               	goto	l77
  4127     01EA                     l75:	
  4128                           ;gsmg_c.c: 53:     else
  4129                           
  4130                           
  4131                           ;gsmg_c.c: 54:         RD7 = 0;
  4132     01EA  1388               	bcf	8,7	;volatile
  4133     01EB                     l77:
  4134     01EB  0008               	return
  4135     01EC                     __end_of_Lcd_Port:
  4136     007E                     btemp	set	126	;btemp
  4137     007E                     wtemp0	set	126
  4138                           
  4139                           	psect	idloc
  4140                           
  4141                           ;Config register IDLOC0 @ 0x2000
  4142                           ;	unspecified, using default values
  4143     2000                     	org	8192
  4144     2000  3FFF               	dw	16383
  4145                           
  4146                           ;Config register IDLOC1 @ 0x2001
  4147                           ;	unspecified, using default values
  4148     2001                     	org	8193
  4149     2001  3FFF               	dw	16383
  4150                           
  4151                           ;Config register IDLOC2 @ 0x2002
  4152                           ;	unspecified, using default values
  4153     2002                     	org	8194
  4154     2002  3FFF               	dw	16383
  4155                           
  4156                           ;Config register IDLOC3 @ 0x2003
  4157                           ;	unspecified, using default values
  4158     2003                     	org	8195
  4159     2003  3FFF               	dw	16383
  4160                           
  4161                           	psect	config
  4162                           
  4163                           ;Config register CONFIG @ 0x2007
  4164                           ;	Oscillator Selection bits
  4165                           ;	FOSC = XT, XT oscillator
  4166                           ;	Watchdog Timer Enable bit
  4167                           ;	WDTE = OFF, WDT disabled
  4168                           ;	Power-up Timer Enable bit
  4169                           ;	PWRTE = OFF, PWRT disabled
  4170                           ;	Brown-out Reset Enable bit
  4171                           ;	BOREN = ON, BOR enabled
  4172                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  4173                           ;	LVP = ON, RB3/PGM pin has PGM function; low-voltage programming enabled
  4174                           ;	Data EEPROM Memory Code Protection bit
  4175                           ;	CPD = OFF, Data EEPROM code protection off
  4176                           ;	Flash Program Memory Write Enable bits
  4177                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  4178                           ;	In-Circuit Debugger Mode bit
  4179                           ;	DEBUG = 0x1, unprogrammed default
  4180                           ;	Flash Program Memory Code Protection bit
  4181                           ;	CP = OFF, Code protection off
  4182     2007                     	org	8199
  4183     2007  3FF9               	dw	16377

Data Sizes:
    Strings     53
    Constant    0
    Data        2
    BSS         37
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     72      79
    BANK1            80      0      32
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    dtoa@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    f$.$buffer	PTR unsigned char  size(1) Largest target is 0

    f$.$source	PTR const unsigned char  size(1) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    fputc@fp$.$buffer	PTR unsigned char  size(1) Largest target is 0

    fputc@fp$.$source	PTR const unsigned char  size(1) Largest target is 0

    fputs@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    fputs@s	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK1[32]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 17
		 -> main@yuzde_veri(BANK0[16]), STR_1(CODE[14]), STR_2(CODE[17]), STR_3(CODE[4]), 
		 -> STR_4(CODE[4]), STR_5(CODE[5]), STR_6(CODE[5]), 

    pad@buf	PTR unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK1[32]), 

    pad@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    read_prec_or_width@ap	PTR PTR void [1] size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), 

    read_prec_or_width@fmt	PTR PTR const unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(BANK0[1]), 

    S560$buffer	PTR unsigned char  size(1) Largest target is 0

    S560$source	PTR const unsigned char  size(1) Largest target is 0

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 4
		 -> STR_7(CODE[4]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 16
		 -> main@yuzde_veri(BANK0[16]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(1) Largest target is 4
		 -> STR_7(CODE[4]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(BANK0[1]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 4
		 -> STR_7(CODE[4]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 4
		 -> STR_7(CODE[4]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(BANK0[11]), 


Critical Paths under _main in COMMON

    _main->_motor
    _read_prec_or_width->___wmul
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___awmod
    _motor->_Lcd_Write_String
    _baslangic->_Lcd_Write_String
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                22    22      0   12679
                                             50 BANK0     22    22      0
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                             ___wmul
                          _baslangic
                              _motor
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             19    16      3    6110
                                             33 BANK0     17    14      3
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             4     2      2    5800
                                             29 BANK0      4     2      2
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           12    10      2    5487
                                             19 BANK0     10     8      2
                               _dtoa
                              _fputc
                 _read_prec_or_width
 ---------------------------------------------------------------------------------
 (4) _read_prec_or_width                                   6     4      2     685
                                              6 COMMON     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     396
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                11     9      2    3581
                                              8 BANK0     11     9      2
                            ___awdiv
                            ___awmod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                  7     4      3    2043
                                             11 COMMON     3     0      3
                                              4 BANK0      4     4      0
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     6      1     997
                                              8 COMMON     3     2      1
                                              0 BANK0      4     4      0
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                8     5      3     682
                                              0 COMMON     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     142
                                              6 COMMON     4     2      2
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4     448
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4     452
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _motor                                                6     2      4    2344
                                             12 COMMON     2     2      0
                                              0 BANK0      4     0      4
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                           _duty_sag
                           _duty_sol
 ---------------------------------------------------------------------------------
 (2) _duty_sol                                             4     2      2     196
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (2) _duty_sag                                             4     2      2     196
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _baslangic                                            3     3      0    1822
                                              0 BANK0      3     3      0
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_String                                     7     5      2     800
                                              5 COMMON     7     5      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (3) _Lcd_Write_Char                                       4     4      0     178
                                              1 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _Lcd_Set_Cursor                                       6     5      1     912
                                              4 COMMON     6     5      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     198
                                              4 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              3     3      0     110
                                              1 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (4) _Lcd_Port                                             1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   ___wmul
   _baslangic
     _Lcd_Clear
       _Lcd_Cmd
     _Lcd_Set_Cursor
     _Lcd_Write_String
   _motor
     _Lcd_Set_Cursor
     _Lcd_Write_String
     _duty_sag
     _duty_sol
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _dtoa
           ___awdiv
           ___awmod
           _abs
             ___awmod (ARG)
           _pad
             _fputc
               _putch
             _fputs
               _fputc
         _fputc
         _read_prec_or_width
           ___wmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      20       7       40.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     48      4F       5       98.8%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      7D      12        0.0%
ABS                  0      0      7D       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Sun May 19 23:13:46 2024

                         pc 0002                          l70 01D6                          l71 01DC  
                        l72 01DD                          l80 0155                          l73 01E3  
                        l74 01E4                          l75 01EA                          l83 012A  
                        l92 04DB                          l77 01EB                          l69 01D3  
                        l95 026D                          l89 032B                ___awdiv@sign 0075  
                        fsr 0004         ___wmul@multiplicand 0072                         l101 02E5  
                       l110 02A3                         l104 016F                         l130 0768  
                       l107 0189                         l115 0542                         l123 0764  
                       l124 0744                         l141 0797                         l135 0793  
                       l232 01F8                         l136 078A                         l129 0786  
                       l234 0210                         l720 0377                         l385 05A9  
                       l715 0341                         l723 066C                         l398 047E  
                       l718 0369                         l734 06EE                         l742 0425  
                       l750 0640                         l727 066A                         l763 013B  
                       l756 01C9                         l775 03CD                         l783 023A  
                       l695 01A8                         l786 0113                         _RB0 0030  
                       _RB1 0031                         _RC0 0038                         _RC3 003B  
                       _RB6 0036                         _RB7 0037                         _RD4 0044  
                       _RD5 0045                         _RD6 0046                         _RD7 0047  
                       _PR2 0092                         u800 03B6                         u801 03B5  
                       u810 023A                         u811 0239                         u900 0576  
                       u820 01F2                         u901 0575                         u805 03B2  
                       u821 01F1                         u920 0587                         u921 0586  
                       u770 037D                         u850 020C                         u915 0577  
                       u771 037C                         u851 020B                         u835 01F9  
                       u940 059B                         u860 0548                         u780 0382  
                       u941 059A                         u925 0583                         u861 0547  
                       u781 0381                         u845 0200                         u950 05A0  
                       u870 0553                         u790 0398                         u951 059F  
                       u935 058F                         u871 0552                         u791 0397  
                       u880 0564                         u960 042B                         u881 0563  
                       u961 042A                         u970 0436                         u971 0435  
                       u980 0441                         u981 0440                         u895 0568  
                       u995 0445                         _abs 012B                         _pad 032C  
                       fsr0 0004                         indf 0000                ___awmod@sign 0075  
                      ?_abs 0076                        l1300 0564                        l1310 0587  
                      l1302 0567                        l1320 05A0                        l1312 058D  
                      l1304 056E                        l1400 0646                        l1322 05A5  
                      l1314 058E                        l1306 0572                        l1330 042B  
                      l1250 0382                        l1410 0666                        l1402 0651  
                      l1316 0595                        l1308 0576                        l1340 0441  
                      l1332 0430                        l1252 0389                        l1260 0214  
                      l1420 069A                        l1412 0670                        l1404 0656  
                      l1500 05E0                        l1318 059B                        l1350 045D  
                      l1342 0444                        l1334 0432                        l1326 0426  
                      l1254 0398                        l1246 0378                        l1262 0217  
                      l1430 06CE                        l1422 06A0                        l1414 0674  
                      l1406 065C                        l1270 01EE                        l1510 060F  
                      l1502 05E5                        l1600 04FE                        l1360 047A  
                      l1352 0463                        l1344 044B                        l1336 0436  
                      l1328 0427                        l1256 03B6                        l1248 037D  
                      l1264 0225                        l1432 06D5                        l1416 067A  
                      l1424 06B3                        l1408 0661                        l1272 01F2  
                      l1440 03CF                        l1512 0614                        l1504 05EA  
                      l1520 0629                        l1530 02EC                        l1610 0531  
                      l1602 0506                        l1290 054F                        l1282 0543  
                      l1354 046A                        l1346 044F                        l1338 043B  
                      l1266 022D                        l1370 033F                        l1434 06DB  
                      l1426 06C1                        l1418 0697                        l1274 01FF  
                      l1450 0410                        l1442 03D1                        l1506 05F6  
                      l1460 0146                        l1540 030F                        l1532 02F9  
                      l1612 0539                        l1604 050F                        l1292 0553  
                      l1284 0544                        l1348 0453                        l1356 0470  
                      l1380 012B                        l1372 0346                        l1364 032F  
                      l1436 06E1                        l1428 06C9                        l1276 0206  
                      l1268 01EC                        l1452 0421                        l1444 03E0  
                      l1516 061F                        l1508 0602                        l1620 0195  
                      l1700 07C6                        l1390 01CF                        l1462 0149  
                      l1526 011E                        l1542 031C                        l1534 02FC  
                      l1470 0245                        l1550 02A7                        l1606 0517  
                      l1294 0558                        l1286 0548                        l1358 0475  
                      l1382 012F                        l1374 0353                        l1366 0333  
                      l1278 020C                        l1446 03F4                        l1622 019F  
                      l1614 018D                        l1702 07CF                        l1630 06F5  
                      l1392 01DA                        l1464 0152                        l1456 013D  
                      l1544 031F                        l1536 0302                        l1528 02E7  
                      l1480 0263                        l1472 0253                        l1552 02C3  
                      l1560 0170                        l1608 0528                        l1296 055C  
                      l1288 054D                        l1384 0130                        l1376 035B  
                      l1368 033B                        l1448 0409                        l1616 0191  
                      l1640 0702                        l1632 06F8                        l1394 01E1  
                      l1458 0140                        l1546 0325                        l1538 0309  
                      l1482 0266                        l1474 0256                        l1466 023C  
                      l1554 02C9                        l1562 017D                        l1298 055E  
                      l1378 036F                        l1490 05C2                        l1570 01C7  
                      l1618 0193                        l1650 0707                        l1642 0703  
                      l1634 06F9                        l1626 06EF                        l1396 01E8  
                      l1388 01CB                        l1580 049C                        l1484 026A  
                      l1476 025A                        l1468 0242                        l1548 02A4  
                      l1556 0156                        l1492 05C9                        l1564 01AC  
                      l1660 071C                        l1652 0708                        l1644 0704  
                      l1636 06FA                        l1628 06F3                        l1582 04A2  
                      l1574 047F                        l1478 025D                        l1590 0290  
                      l1558 0163                        l1398 0644                        l1494 05CD  
                      l1486 05AD                        l1566 01AF                        l1662 0724  
                      l1654 0709                        l1646 0705                        l1638 06FF  
                      l1576 0485                        l1592 029E                        l1584 026E  
                      l1496 05DB                        l1488 05BC                        l1568 01B9  
                      l1680 076C                        l1672 0748                        l1664 072D  
                      l1656 070D                        l1648 0706                        l1578 048E  
                      l1586 0276                        l1594 04DC                        l1498 05DF  
                      l1682 0774                        l1674 0750                        l1666 0735  
                      l1658 0712                        l1588 027F                        l1596 04E4  
                      l1692 079B                        l1684 0781                        l1676 075D  
                      l1668 073E                        l1598 04F5                        l1694 079D  
                      l1696 07B2                        l1688 078E                        l1698 07BE  
                      ?_pad 007B                        STR_1 0024                        STR_2 0013  
                      STR_3 0044                        STR_4 0040                        STR_5 0037  
                      STR_6 0032                        STR_7 003C                        u1000 0453  
                      u1001 0452                        u1010 045D                        u1011 045C  
                      u1100 01CF                        u1101 01CE                        u1110 01DA  
                      u1030 0470                        u1111 01D9                        u1031 046F  
                      u1015 0459                        u1120 01E1                        u1040 0475  
                      u1200 06CE                        u1121 01E0                        u1041 0474  
                      u1025 0464                        u1201 06CD                        u1130 01E8  
                      u1050 0333                        u1210 06D5                        u1131 01E7  
                      u1051 0332                        u1211 06D4                        u1060 033F  
                      u1140 064B                        u1220 03E0                        u1061 033E  
                      u1141 0649                        u1221 03DF                        u1310 030F  
                      u1070 0369                        u1150 064C                        u1230 0421  
                      u1311 030E                        u1071 0368                        u1231 0420  
                      u1080 036F                        u1160 0656                        u1400 01C7  
                      u1305 02F2                        u1081 036E                        u1161 0655  
                      u1401 01C6                        u1330 02B1                        u1410 04E4  
                      u1090 012F                        u1170 0661                        u1250 05BC  
                      u1411 04E3                        u1091 012E                        u1075 0365  
                      u1171 0660                        u1251 05BB                        u1340 02D3  
                      u1420 0517                        u1180 06C1                        u1260 05DF  
                      u1500 078E                        u1325 0315                        u1245 0248  
                      u1421 0516                        u1181 06C0                        u1261 05DE  
                      u1501 078D                        u1350 02E5                        u1190 06C9  
                      u1270 05F6                        u1510 0797                        u1430 0744  
                      u1351 02E4                        u1191 06C8                        u1271 05F5  
                      u1511 0796                        u1431 0743                        u1360 0160  
                      u1280 0602                        u1520 079B                        u1440 0748  
                      u1361 015C                        u1185 06BD                        u1281 0601  
                      u1521 079A                        u1441 0747                        u1290 02EC  
                      u1450 075D                        u1291 02EB                        u1451 075C  
                      u1380 017A                        u1460 0768                        u1381 0176  
                      u1461 0767                        u1374 0163                        u1470 076C  
                      u1607 0498                        u1471 076B                        u1455 0759  
                      u1480 0781                        u1617 04A6                        u1481 0780  
                      u1537 0718                        u1394 017D                        u1490 078A  
                      u1627 014D                        u1547 04F9                        u1491 0789  
                      u1557 052C                        u1485 077D                        u1567 0298  
                      u1577 0258                        u1587 0268                        u1597 0489  
                      _TMR2 0011                        abs@a 0076           ?_Lcd_Write_String 0075  
                      _dbuf 00A0                        _main 06EF                        _dtoa 0641  
                      _prec 006A                        pad@i 0025                        pad@p 007C  
                      btemp 007E                        start 0000          ??_Lcd_Write_String 0077  
           __end_of_Lcd_Cmd 0156                       ??_abs 0078                       ??_pad 0024  
                     ?_main 0070                       ?_dtoa 0028                       _CCP1X 00BD  
                     _CCP1Y 00BC                       _CCP2X 00ED                       _CCP2Y 00EC  
           __end_of___awdiv 05AA             __end_of___awmod 047F             ___awdiv@divisor 0070  
           ___awdiv@counter 0074                vfpfcnvrt@fmt 0033                       _PORTB 0006  
                     _PORTC 0007                       _PORTD 0008                       _TRISB 0086  
                     _TRISC 0087                       _TRISD 0088                       _flags 006C  
       read_prec_or_width@c 0078         read_prec_or_width@n 0079                       _fputc 0378  
                     _fputs 0211                       _motor 04DC                       pad@fp 0027  
                     _width 0068                       _putch 0113                       dtoa@d 0028  
                     dtoa@i 0031                       dtoa@p 002F                       dtoa@s 0030  
                     dtoa@w 002D                       pclath 000A                       status 0003  
                     wtemp0 007E             __end_of_sprintf 01A9            __end_of_Lcd_Init 04DC  
          __end_of_Lcd_Port 01EC             __initialization 07E2                __end_of_main 07E2  
              __end_of_dtoa 06EF                      ??_main 0052                      ??_dtoa 007E  
__end_of_read_prec_or_width 0426                      _CCP1M2 00BA                      _CCP1M3 00BB  
                    _CCP2M2 00EA                      _CCP2M3 00EB                      ?_fputc 0070  
                    ?_fputs 0078                      _CCPR1L 0015                      _CCPR2L 001B  
          ___awdiv@dividend 0072                      ?_motor 0020                      ?_putch 0070  
                 ??_Lcd_Cmd 0071                      _TMR2ON 0092                vfprintf@cfmt 0040  
                    ___wmul 01EC                   ??___awdiv 0074                   ??___awmod 0074  
      read_prec_or_width@ap 0076            ___awdiv@quotient 0076             ___awmod@divisor 0070  
          __end_of_duty_sag 0170             ___awmod@counter 0074            __end_of_duty_sol 018A  
                    pad@buf 007B                      dtoa@fp 002C                      fputc@c 0070  
                    fputs@c 0020                      fputs@i 0021                      fputs@s 0023  
                    putch@c 0070            __end_of_vfprintf 01CA                   ??_sprintf 0044  
           Lcd_Set_Cursor@a 0076             Lcd_Set_Cursor@b 0074             Lcd_Set_Cursor@y 0078  
           Lcd_Set_Cursor@z 0077     __end_of__initialization 07FC           __end_of_Lcd_Clear 012B  
            __pcstackCOMMON 0070                __pidataBANK0 0114               __end_of_fputc 03CE  
             __end_of_fputs 023B               __end_of_motor 0543               __end_of_putch 0114  
               duty_sag@pwm 0070              _Lcd_Set_Cursor 02E6                 duty_sol@pwm 0070  
                 ?_Lcd_Init 0070                   ?_Lcd_Port 0070                     ??_fputc 0073  
                   ??_fputs 0079                     ??_motor 007C                     ??_putch 0070  
                __pbssBANK0 0068                  __pbssBANK1 00A0                  __pmaintext 06EF  
                   ?___wmul 0070      __end_of_Lcd_Set_Cursor 032C                     _T2CKPS0 0090  
                   _T2CKPS1 0091                  ??_Lcd_Init 0074                  ??_Lcd_Port 0070  
         __end_of_baslangic 02A4                  __stringtab 0003              _Lcd_Write_Char 023B  
                   _Lcd_Cmd 013C                   ?_duty_sag 0070                   ?_duty_sol 0070  
                   ___awdiv 0543                     ___awmod 0426                   ?_vfprintf 003D  
           ?_Lcd_Set_Cursor 0074                     __ptext1 018A                     __ptext2 01A9  
                   __ptext3 05AA                     __ptext4 03CE                     __ptext5 01EC  
                   __ptext6 0641                     __ptext7 032C                     __ptext8 0211  
                   __ptext9 0378       read_prec_or_width@fmt 007B            ___awmod@dividend 0072  
                   main@hiz 0064                     _sprintf 018A                     clrloop0 0117  
    __end_of_Lcd_Write_Char 026E        end_of_initialization 07FC                     fputc@fp 0072  
                   fputs@fp 0078          _read_prec_or_width 03CE                  ??_duty_sag 0072  
                ??_duty_sol 0072           __end_of_vfpfcnvrt 0641         ?_read_prec_or_width 0076  
          vfpfcnvrt@convarg 0037                   Lcd_Port@a 0070                  ??_vfprintf 007E  
      ??_read_prec_or_width 0078             ?_Lcd_Write_Char 0070           Lcd_Write_String@a 0075  
         Lcd_Write_String@i 007A                   _Lcd_Clear 011E                 vfpfcnvrt@ap 0034  
               vfpfcnvrt@cp 003C                 vfpfcnvrt@fp 003B              __end_of___wmul 0211  
          _Lcd_Write_String 02A4         start_initialization 07E2              main@yuzde_veri 0054  
               __end_of_abs 013C                 __end_of_pad 0378                 vfprintf@fmt 003D  
                ?_Lcd_Clear 0070                    ??___wmul 0074                 __pdataBANK0 006D  
           Lcd_Write_Char@a 0074             Lcd_Write_Char@y 0073                   ___latbits 0002  
             __pcstackBANK0 0020                    ?_Lcd_Cmd 0070                   _baslangic 026E  
          ??_Lcd_Set_Cursor 0075                    ?___awdiv 0070                    ?___awmod 0070  
                 __pstrings 0003                    ?_sprintf 0041              ___wmul@product 0074  
                motor@sayac 0020                  ?_baslangic 0070                   clear_ram0 0116  
                 _sayac_hiz 006D                    Lcd_Cmd@a 0073                 ??_Lcd_Clear 0074  
                 _vfpfcnvrt 05AA                 __stringbase 0012           ___wmul@multiplier 0070  
          ??_Lcd_Write_Char 0071                   main@sayac 0066                    _Lcd_Init 047F  
                  _Lcd_Port 01CA    __end_of_Lcd_Write_String 02E6                  vfprintf@ap 003E  
                vfprintf@fp 003F                  ?_vfpfcnvrt 0033          __end_of__stringtab 0013  
                sprintf@fmt 0041                    _dtoa$639 002A                    __ptext10 0113  
                  __ptext11 012B                    __ptext20 02E6                    __ptext12 0426  
                  __ptext21 011E                    __ptext13 0543                    __ptext22 047F  
                  __ptext14 04DC                    __ptext23 013C                    __ptext15 0170  
                  __ptext24 01CA                    __ptext16 0156                    __ptext17 026E  
                  __ptext18 02A4                    __ptext19 023B                 ??_baslangic 0020  
                  _duty_sag 0156                    _duty_sol 0170                    _vfprintf 01A9  
        Lcd_Write_Char@temp 0072                   sprintf@ap 0045                   stringcode 000D  
                  motor@hiz 0022                 ??_vfpfcnvrt 0035          Lcd_Set_Cursor@temp 0079  
                  sprintf@f 0047                    sprintf@s 0046                    stringdir 000D  
                  stringtab 0003  
