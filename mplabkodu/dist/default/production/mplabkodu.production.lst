

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Sat May 25 14:23:24 2024

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	strings,global,class=STRING,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2,group=3
    15                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    16                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    17                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    18                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    20                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    21                           	psect	text8,local,class=CODE,merge=1,delta=2,group=3
    22                           	psect	text9,local,class=CODE,merge=1,delta=2,group=3
    23                           	psect	text10,local,class=CODE,merge=1,delta=2,group=3
    24                           	psect	text11,local,class=CODE,merge=1,delta=2,group=3
    25                           	psect	text12,local,class=CODE,merge=1,delta=2,group=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,delta=2
    31                           	psect	text18,local,class=CODE,merge=1,delta=2
    32                           	psect	text19,local,class=CODE,merge=1,delta=2
    33                           	psect	text20,local,class=CODE,merge=1,delta=2
    34                           	psect	text21,local,class=CODE,merge=1,delta=2
    35                           	psect	text22,local,class=CODE,merge=1,delta=2
    36                           	psect	text23,local,class=CODE,merge=1,delta=2
    37                           	psect	text24,local,class=CODE,merge=1,delta=2
    38                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    39                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    40                           	dabs	1,0x7E,2
    41     0000                     
    42                           ; Version 2.40
    43                           ; Generated 17/11/2021 GMT
    44                           ; 
    45                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    46                           ; All rights reserved.
    47                           ; 
    48                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    49                           ; 
    50                           ; Redistribution and use in source and binary forms, with or without modification, are
    51                           ; permitted provided that the following conditions are met:
    52                           ; 
    53                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    54                           ;        conditions and the following disclaimer.
    55                           ; 
    56                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    57                           ;        of conditions and the following disclaimer in the documentation and/or other
    58                           ;        materials provided with the distribution. Publication is not required when
    59                           ;        this file is used in an embedded application.
    60                           ; 
    61                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    62                           ;        software without specific prior written permission.
    63                           ; 
    64                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    65                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    66                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    67                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    68                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    69                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    70                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    71                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    72                           ; 
    73                           ; 
    74                           ; Code-generator required, PIC16F877A Definitions
    75                           ; 
    76                           ; SFR Addresses
    77     0000                     	;# 
    78     0001                     	;# 
    79     0002                     	;# 
    80     0003                     	;# 
    81     0004                     	;# 
    82     0005                     	;# 
    83     0006                     	;# 
    84     0007                     	;# 
    85     0008                     	;# 
    86     0009                     	;# 
    87     000A                     	;# 
    88     000B                     	;# 
    89     000C                     	;# 
    90     000D                     	;# 
    91     000E                     	;# 
    92     000E                     	;# 
    93     000F                     	;# 
    94     0010                     	;# 
    95     0011                     	;# 
    96     0012                     	;# 
    97     0013                     	;# 
    98     0014                     	;# 
    99     0015                     	;# 
   100     0015                     	;# 
   101     0016                     	;# 
   102     0017                     	;# 
   103     0018                     	;# 
   104     0019                     	;# 
   105     001A                     	;# 
   106     001B                     	;# 
   107     001B                     	;# 
   108     001C                     	;# 
   109     001D                     	;# 
   110     001E                     	;# 
   111     001F                     	;# 
   112     0081                     	;# 
   113     0085                     	;# 
   114     0086                     	;# 
   115     0087                     	;# 
   116     0088                     	;# 
   117     0089                     	;# 
   118     008C                     	;# 
   119     008D                     	;# 
   120     008E                     	;# 
   121     0091                     	;# 
   122     0092                     	;# 
   123     0093                     	;# 
   124     0094                     	;# 
   125     0098                     	;# 
   126     0099                     	;# 
   127     009C                     	;# 
   128     009D                     	;# 
   129     009E                     	;# 
   130     009F                     	;# 
   131     010C                     	;# 
   132     010D                     	;# 
   133     010E                     	;# 
   134     010F                     	;# 
   135     018C                     	;# 
   136     018D                     	;# 
   137     0000                     	;# 
   138     0001                     	;# 
   139     0002                     	;# 
   140     0003                     	;# 
   141     0004                     	;# 
   142     0005                     	;# 
   143     0006                     	;# 
   144     0007                     	;# 
   145     0008                     	;# 
   146     0009                     	;# 
   147     000A                     	;# 
   148     000B                     	;# 
   149     000C                     	;# 
   150     000D                     	;# 
   151     000E                     	;# 
   152     000E                     	;# 
   153     000F                     	;# 
   154     0010                     	;# 
   155     0011                     	;# 
   156     0012                     	;# 
   157     0013                     	;# 
   158     0014                     	;# 
   159     0015                     	;# 
   160     0015                     	;# 
   161     0016                     	;# 
   162     0017                     	;# 
   163     0018                     	;# 
   164     0019                     	;# 
   165     001A                     	;# 
   166     001B                     	;# 
   167     001B                     	;# 
   168     001C                     	;# 
   169     001D                     	;# 
   170     001E                     	;# 
   171     001F                     	;# 
   172     0081                     	;# 
   173     0085                     	;# 
   174     0086                     	;# 
   175     0087                     	;# 
   176     0088                     	;# 
   177     0089                     	;# 
   178     008C                     	;# 
   179     008D                     	;# 
   180     008E                     	;# 
   181     0091                     	;# 
   182     0092                     	;# 
   183     0093                     	;# 
   184     0094                     	;# 
   185     0098                     	;# 
   186     0099                     	;# 
   187     009C                     	;# 
   188     009D                     	;# 
   189     009E                     	;# 
   190     009F                     	;# 
   191     010C                     	;# 
   192     010D                     	;# 
   193     010E                     	;# 
   194     010F                     	;# 
   195     018C                     	;# 
   196     018D                     	;# 
   197                           
   198                           	psect	idataBANK0
   199     0114                     __pidataBANK0:
   200                           
   201                           ;initializer for _sayac_hiz
   202     0114  342D               	retlw	45
   203     0115  3400               	retlw	0
   204     0011                     _TMR2	set	17
   205     0006                     _PORTB	set	6
   206     0007                     _PORTC	set	7
   207     0008                     _PORTD	set	8
   208     001B                     _CCPR2L	set	27
   209     0015                     _CCPR1L	set	21
   210     0037                     _RB7	set	55
   211     0036                     _RB6	set	54
   212     0031                     _RB1	set	49
   213     0030                     _RB0	set	48
   214     0092                     _TMR2ON	set	146
   215     0091                     _T2CKPS1	set	145
   216     0090                     _T2CKPS0	set	144
   217     00EA                     _CCP2M2	set	234
   218     00EB                     _CCP2M3	set	235
   219     00BA                     _CCP1M2	set	186
   220     00BB                     _CCP1M3	set	187
   221     00EC                     _CCP2Y	set	236
   222     00ED                     _CCP2X	set	237
   223     00BC                     _CCP1Y	set	188
   224     00BD                     _CCP1X	set	189
   225     003B                     _RC3	set	59
   226     0038                     _RC0	set	56
   227     0047                     _RD7	set	71
   228     0046                     _RD6	set	70
   229     0045                     _RD5	set	69
   230     0044                     _RD4	set	68
   231     0092                     _PR2	set	146
   232     0086                     _TRISB	set	134
   233     0087                     _TRISC	set	135
   234     0088                     _TRISD	set	136
   235                           
   236                           	psect	strings
   237     0003                     __pstrings:
   238     0003                     stringtab:
   239     0003                     __stringtab:
   240                           
   241                           ;	String table - string pointers are 1 byte each
   242     0003  1BFF               	btfsc	btemp+1,7
   243     0004  280D               	ljmp	stringcode
   244     0005  1383               	bcf	3,7
   245     0006  187F               	btfsc	btemp+1,0
   246     0007  1783               	bsf	3,7
   247     0008  0800               	movf	0,w
   248     0009  0A84               	incf	4,f
   249     000A  1903               	skipnz
   250     000B  0AFF               	incf	btemp+1,f
   251     000C  0008               	return
   252     000D                     stringcode:
   253     000D                     stringdir:
   254     000D  3000               	movlw	high stringdir
   255     000E  008A               	movwf	10
   256     000F  0804               	movf	4,w
   257     0010  0A84               	incf	4,f
   258     0011  0782               	addwf	2,f
   259     0012                     __stringbase:
   260     0012  3400               	retlw	0
   261     0013                     __end_of__stringtab:
   262     0013                     STR_2:
   263     0013  3420               	retlw	32	;' '
   264     0014  3420               	retlw	32	;' '
   265     0015  3420               	retlw	32	;' '
   266     0016  344D               	retlw	77	;'M'
   267     0017  3445               	retlw	69	;'E'
   268     0018  344C               	retlw	76	;'L'
   269     0019  3449               	retlw	73	;'I'
   270     001A  3448               	retlw	72	;'H'
   271     001B  3420               	retlw	32	;' '
   272     001C  344F               	retlw	79	;'O'
   273     001D  3447               	retlw	71	;'G'
   274     001E  3444               	retlw	68	;'D'
   275     001F  3455               	retlw	85	;'U'
   276     0020  344C               	retlw	76	;'L'
   277     0021  3400               	retlw	0
   278     0022                     STR_1:
   279     0022  3420               	retlw	32	;' '
   280     0023  3420               	retlw	32	;' '
   281     0024  3420               	retlw	32	;' '
   282     0025  3442               	retlw	66	;'B'
   283     0026  3432               	retlw	50	;'2'
   284     0027  3431               	retlw	49	;'1'
   285     0028  3430               	retlw	48	;'0'
   286     0029  3431               	retlw	49	;'1'
   287     002A  3430               	retlw	48	;'0'
   288     002B  3431               	retlw	49	;'1'
   289     002C  3433               	retlw	51	;'3'
   290     002D  3437               	retlw	55	;'7'
   291     002E  3433               	retlw	51	;'3'
   292     002F  3400               	retlw	0
   293     0030                     STR_6:
   294     0030  3459               	retlw	89	;'Y'
   295     0031  344F               	retlw	79	;'O'
   296     0032  344E               	retlw	78	;'N'
   297     0033  343A               	retlw	58	;':'
   298     0034  3400               	retlw	0
   299     0035                     STR_5:
   300     0035  3448               	retlw	72	;'H'
   301     0036  3449               	retlw	73	;'I'
   302     0037  345A               	retlw	90	;'Z'
   303     0038  343A               	retlw	58	;':'
   304     0039  3400               	retlw	0
   305     003A                     STR_4:
   306     003A  3453               	retlw	83	;'S'
   307     003B  3441               	retlw	65	;'A'
   308     003C  3447               	retlw	71	;'G'
   309     003D  3400               	retlw	0
   310     003E                     STR_3:
   311     003E  3453               	retlw	83	;'S'
   312     003F  344F               	retlw	79	;'O'
   313     0040  344C               	retlw	76	;'L'
   314     0041  3400               	retlw	0
   315     0042                     STR_7:
   316     0042  3425               	retlw	37	;'%'
   317     0043  3433               	retlw	51	;'3'
   318     0044  3464               	retlw	100	;'d'
   319     0045  3400               	retlw	0
   320                           
   321                           	psect	cinit
   322     07E2                     start_initialization:	
   323                           ; #config settings
   324                           
   325     07E2                     __initialization:
   326                           
   327                           ; Initialize objects allocated to BANK0
   328     07E2  120A  118A  2114  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   329     07E7  00ED               	movwf	__pdataBANK0& (0+127)
   330     07E8  120A  118A  2115  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   331     07ED  00EE               	movwf	(__pdataBANK0+1)& (0+127)
   332                           
   333                           ; Clear objects allocated to BANK1
   334     07EE  1383               	bcf	3,7	;select IRP bank0
   335     07EF  30A0               	movlw	low __pbssBANK1
   336     07F0  0084               	movwf	4
   337     07F1  30C0               	movlw	low (__pbssBANK1+32)
   338     07F2  120A  118A  2116  120A  118A  	fcall	clear_ram0
   339                           
   340                           ; Clear objects allocated to BANK0
   341     07F7  01E8               	clrf	__pbssBANK0& (0+127)
   342     07F8  01E9               	clrf	(__pbssBANK0+1)& (0+127)
   343     07F9  01EA               	clrf	(__pbssBANK0+2)& (0+127)
   344     07FA  01EB               	clrf	(__pbssBANK0+3)& (0+127)
   345     07FB  01EC               	clrf	(__pbssBANK0+4)& (0+127)
   346     07FC                     end_of_initialization:	
   347                           ;End of C runtime variable initialization code
   348                           
   349     07FC                     __end_of__initialization:
   350     07FC  0183               	clrf	3
   351     07FD  120A  118A  2EEF   	ljmp	_main	;jump to C main() function
   352                           
   353                           	psect	bssBANK0
   354     0068                     __pbssBANK0:
   355     0068                     _width:
   356     0068                     	ds	2
   357     006A                     _prec:
   358     006A                     	ds	2
   359     006C                     _flags:
   360     006C                     	ds	1
   361                           
   362                           	psect	dataBANK0
   363     006D                     __pdataBANK0:
   364     006D                     _sayac_hiz:
   365     006D                     	ds	2
   366                           
   367                           	psect	bssBANK1
   368     00A0                     __pbssBANK1:
   369     00A0                     _dbuf:
   370     00A0                     	ds	32
   371                           
   372                           	psect	clrtext
   373     0116                     clear_ram0:	
   374                           ;	Called with FSR containing the base address, and
   375                           ;	W with the last address+1
   376                           
   377     0116  0064               	clrwdt	;clear the watchdog before getting into this loop
   378     0117                     clrloop0:
   379     0117  0180               	clrf	0	;clear RAM location pointed to by FSR
   380     0118  0A84               	incf	4,f	;increment pointer
   381     0119  0604               	xorwf	4,w	;XOR with final address
   382     011A  1903               	btfsc	3,2	;have we reached the end yet?
   383     011B  3400               	retlw	0	;all done for this memory range, return
   384     011C  0604               	xorwf	4,w	;XOR again to restore value
   385     011D  2917               	goto	clrloop0	;do the next byte
   386                           
   387                           	psect	cstackCOMMON
   388     0070                     __pcstackCOMMON:
   389     0070                     ?_putch:
   390     0070                     ??_putch:	
   391                           ; 1 bytes @ 0x0
   392                           
   393     0070                     ?_Lcd_Port:	
   394                           ; 1 bytes @ 0x0
   395                           
   396     0070                     ??_Lcd_Port:	
   397                           ; 1 bytes @ 0x0
   398                           
   399     0070                     ?_Lcd_Cmd:	
   400                           ; 1 bytes @ 0x0
   401                           
   402     0070                     ?_Lcd_Clear:	
   403                           ; 1 bytes @ 0x0
   404                           
   405     0070                     ?_Lcd_Init:	
   406                           ; 1 bytes @ 0x0
   407                           
   408     0070                     ?_Lcd_Write_Char:	
   409                           ; 1 bytes @ 0x0
   410                           
   411     0070                     ?_duty_sag:	
   412                           ; 1 bytes @ 0x0
   413                           
   414     0070                     ?_duty_sol:	
   415                           ; 1 bytes @ 0x0
   416                           
   417     0070                     ?_baslangic:	
   418                           ; 1 bytes @ 0x0
   419                           
   420     0070                     ?_main:	
   421                           ; 1 bytes @ 0x0
   422                           
   423     0070                     ?_fputc:	
   424                           ; 1 bytes @ 0x0
   425                           
   426     0070                     ?___wmul:	
   427                           ; 2 bytes @ 0x0
   428                           
   429     0070                     ?___awdiv:	
   430                           ; 2 bytes @ 0x0
   431                           
   432     0070                     ?___awmod:	
   433                           ; 2 bytes @ 0x0
   434                           
   435     0070                     Lcd_Port@a:	
   436                           ; 2 bytes @ 0x0
   437                           
   438     0070                     putch@c:	
   439                           ; 1 bytes @ 0x0
   440                           
   441     0070                     duty_sag@pwm:	
   442                           ; 1 bytes @ 0x0
   443                           
   444     0070                     duty_sol@pwm:	
   445                           ; 2 bytes @ 0x0
   446                           
   447     0070                     ___wmul@multiplier:	
   448                           ; 2 bytes @ 0x0
   449                           
   450     0070                     ___awdiv@divisor:	
   451                           ; 2 bytes @ 0x0
   452                           
   453     0070                     ___awmod@divisor:	
   454                           ; 2 bytes @ 0x0
   455                           
   456     0070                     fputc@c:	
   457                           ; 2 bytes @ 0x0
   458                           
   459                           
   460                           ; 2 bytes @ 0x0
   461     0070                     	ds	1
   462     0071                     ??_Lcd_Cmd:
   463     0071                     ??_Lcd_Write_Char:	
   464                           ; 1 bytes @ 0x1
   465                           
   466                           
   467                           ; 1 bytes @ 0x1
   468     0071                     	ds	1
   469     0072                     ??_duty_sag:
   470     0072                     ??_duty_sol:	
   471                           ; 1 bytes @ 0x2
   472                           
   473     0072                     Lcd_Write_Char@temp:	
   474                           ; 1 bytes @ 0x2
   475                           
   476     0072                     fputc@fp:	
   477                           ; 1 bytes @ 0x2
   478                           
   479     0072                     ___wmul@multiplicand:	
   480                           ; 1 bytes @ 0x2
   481                           
   482     0072                     ___awdiv@dividend:	
   483                           ; 2 bytes @ 0x2
   484                           
   485     0072                     ___awmod@dividend:	
   486                           ; 2 bytes @ 0x2
   487                           
   488                           
   489                           ; 2 bytes @ 0x2
   490     0072                     	ds	1
   491     0073                     ??_fputc:
   492     0073                     Lcd_Cmd@a:	
   493                           ; 1 bytes @ 0x3
   494                           
   495     0073                     Lcd_Write_Char@y:	
   496                           ; 1 bytes @ 0x3
   497                           
   498                           
   499                           ; 1 bytes @ 0x3
   500     0073                     	ds	1
   501     0074                     ??_Lcd_Clear:
   502     0074                     ?_Lcd_Set_Cursor:	
   503                           ; 1 bytes @ 0x4
   504                           
   505     0074                     ??_Lcd_Init:	
   506                           ; 1 bytes @ 0x4
   507                           
   508     0074                     ??___wmul:	
   509                           ; 1 bytes @ 0x4
   510                           
   511     0074                     ??___awdiv:	
   512                           ; 1 bytes @ 0x4
   513                           
   514     0074                     ??___awmod:	
   515                           ; 1 bytes @ 0x4
   516                           
   517     0074                     Lcd_Set_Cursor@b:	
   518                           ; 1 bytes @ 0x4
   519                           
   520     0074                     Lcd_Write_Char@a:	
   521                           ; 1 bytes @ 0x4
   522                           
   523     0074                     ___awdiv@counter:	
   524                           ; 1 bytes @ 0x4
   525                           
   526     0074                     ___awmod@counter:	
   527                           ; 1 bytes @ 0x4
   528                           
   529     0074                     ___wmul@product:	
   530                           ; 1 bytes @ 0x4
   531                           
   532                           
   533                           ; 2 bytes @ 0x4
   534     0074                     	ds	1
   535     0075                     ??_Lcd_Set_Cursor:
   536     0075                     ?_Lcd_Write_String:	
   537                           ; 1 bytes @ 0x5
   538                           
   539     0075                     ___awdiv@sign:	
   540                           ; 1 bytes @ 0x5
   541                           
   542     0075                     ___awmod@sign:	
   543                           ; 1 bytes @ 0x5
   544                           
   545     0075                     Lcd_Write_String@a:	
   546                           ; 1 bytes @ 0x5
   547                           
   548                           
   549                           ; 2 bytes @ 0x5
   550     0075                     	ds	1
   551     0076                     ?_abs:
   552     0076                     ?_read_prec_or_width:	
   553                           ; 2 bytes @ 0x6
   554                           
   555     0076                     Lcd_Set_Cursor@a:	
   556                           ; 2 bytes @ 0x6
   557                           
   558     0076                     read_prec_or_width@ap:	
   559                           ; 1 bytes @ 0x6
   560                           
   561     0076                     ___awdiv@quotient:	
   562                           ; 1 bytes @ 0x6
   563                           
   564     0076                     abs@a:	
   565                           ; 2 bytes @ 0x6
   566                           
   567                           
   568                           ; 2 bytes @ 0x6
   569     0076                     	ds	1
   570     0077                     ??_Lcd_Write_String:
   571     0077                     Lcd_Set_Cursor@z:	
   572                           ; 1 bytes @ 0x7
   573                           
   574                           
   575                           ; 1 bytes @ 0x7
   576     0077                     	ds	1
   577     0078                     ??_abs:
   578     0078                     ??_read_prec_or_width:	
   579                           ; 1 bytes @ 0x8
   580                           
   581     0078                     ?_fputs:	
   582                           ; 1 bytes @ 0x8
   583                           
   584     0078                     Lcd_Set_Cursor@y:	
   585                           ; 2 bytes @ 0x8
   586                           
   587     0078                     read_prec_or_width@c:	
   588                           ; 1 bytes @ 0x8
   589                           
   590     0078                     fputs@fp:	
   591                           ; 1 bytes @ 0x8
   592                           
   593                           
   594                           ; 1 bytes @ 0x8
   595     0078                     	ds	1
   596     0079                     ??_fputs:
   597     0079                     Lcd_Set_Cursor@temp:	
   598                           ; 1 bytes @ 0x9
   599                           
   600     0079                     read_prec_or_width@n:	
   601                           ; 1 bytes @ 0x9
   602                           
   603                           
   604                           ; 2 bytes @ 0x9
   605     0079                     	ds	1
   606     007A                     Lcd_Write_String@i:
   607                           
   608                           ; 2 bytes @ 0xA
   609     007A                     	ds	1
   610     007B                     ?_pad:
   611     007B                     pad@buf:	
   612                           ; 1 bytes @ 0xB
   613                           
   614     007B                     read_prec_or_width@fmt:	
   615                           ; 1 bytes @ 0xB
   616                           
   617                           
   618                           ; 1 bytes @ 0xB
   619     007B                     	ds	1
   620     007C                     ??_motor:
   621     007C                     pad@p:	
   622                           ; 1 bytes @ 0xC
   623                           
   624                           
   625                           ; 2 bytes @ 0xC
   626     007C                     	ds	2
   627     007E                     ??_vfprintf:
   628     007E                     ??_dtoa:	
   629                           ; 1 bytes @ 0xE
   630                           
   631                           
   632                           	psect	cstackBANK0
   633     0020                     __pcstackBANK0:	
   634                           ; 1 bytes @ 0xE
   635                           
   636     0020                     ??_baslangic:
   637     0020                     ?_motor:	
   638                           ; 1 bytes @ 0x0
   639                           
   640     0020                     fputs@c:	
   641                           ; 1 bytes @ 0x0
   642                           
   643     0020                     motor@sayac:	
   644                           ; 1 bytes @ 0x0
   645                           
   646                           
   647                           ; 2 bytes @ 0x0
   648     0020                     	ds	1
   649     0021                     fputs@i:
   650                           
   651                           ; 2 bytes @ 0x1
   652     0021                     	ds	1
   653     0022                     motor@hiz:
   654                           
   655                           ; 2 bytes @ 0x2
   656     0022                     	ds	1
   657     0023                     fputs@s:
   658                           
   659                           ; 1 bytes @ 0x3
   660     0023                     	ds	1
   661     0024                     ??_pad:
   662                           
   663                           ; 1 bytes @ 0x4
   664     0024                     	ds	1
   665     0025                     pad@i:
   666                           
   667                           ; 2 bytes @ 0x5
   668     0025                     	ds	2
   669     0027                     pad@fp:
   670                           
   671                           ; 1 bytes @ 0x7
   672     0027                     	ds	1
   673     0028                     ?_dtoa:
   674     0028                     dtoa@d:	
   675                           ; 1 bytes @ 0x8
   676                           
   677                           
   678                           ; 2 bytes @ 0x8
   679     0028                     	ds	2
   680     002A                     _dtoa$639:
   681                           
   682                           ; 2 bytes @ 0xA
   683     002A                     	ds	2
   684     002C                     dtoa@fp:
   685                           
   686                           ; 1 bytes @ 0xC
   687     002C                     	ds	1
   688     002D                     dtoa@w:
   689                           
   690                           ; 2 bytes @ 0xD
   691     002D                     	ds	2
   692     002F                     dtoa@p:
   693                           
   694                           ; 1 bytes @ 0xF
   695     002F                     	ds	1
   696     0030                     dtoa@s:
   697                           
   698                           ; 1 bytes @ 0x10
   699     0030                     	ds	1
   700     0031                     dtoa@i:
   701                           
   702                           ; 2 bytes @ 0x11
   703     0031                     	ds	2
   704     0033                     ?_vfpfcnvrt:
   705     0033                     vfpfcnvrt@fmt:	
   706                           ; 1 bytes @ 0x13
   707                           
   708                           
   709                           ; 1 bytes @ 0x13
   710     0033                     	ds	1
   711     0034                     vfpfcnvrt@ap:
   712                           
   713                           ; 1 bytes @ 0x14
   714     0034                     	ds	1
   715     0035                     ??_vfpfcnvrt:
   716                           
   717                           ; 1 bytes @ 0x15
   718     0035                     	ds	2
   719     0037                     vfpfcnvrt@convarg:
   720                           
   721                           ; 4 bytes @ 0x17
   722     0037                     	ds	4
   723     003B                     vfpfcnvrt@fp:
   724                           
   725                           ; 1 bytes @ 0x1B
   726     003B                     	ds	1
   727     003C                     vfpfcnvrt@cp:
   728                           
   729                           ; 1 bytes @ 0x1C
   730     003C                     	ds	1
   731     003D                     ?_vfprintf:
   732     003D                     vfprintf@fmt:	
   733                           ; 2 bytes @ 0x1D
   734                           
   735                           
   736                           ; 1 bytes @ 0x1D
   737     003D                     	ds	1
   738     003E                     vfprintf@ap:
   739                           
   740                           ; 1 bytes @ 0x1E
   741     003E                     	ds	1
   742     003F                     vfprintf@fp:
   743                           
   744                           ; 1 bytes @ 0x1F
   745     003F                     	ds	1
   746     0040                     vfprintf@cfmt:
   747                           
   748                           ; 1 bytes @ 0x20
   749     0040                     	ds	1
   750     0041                     ?_sprintf:
   751     0041                     sprintf@fmt:	
   752                           ; 2 bytes @ 0x21
   753                           
   754                           
   755                           ; 1 bytes @ 0x21
   756     0041                     	ds	3
   757     0044                     ??_sprintf:
   758                           
   759                           ; 1 bytes @ 0x24
   760     0044                     	ds	1
   761     0045                     sprintf@ap:
   762                           
   763                           ; 1 bytes @ 0x25
   764     0045                     	ds	1
   765     0046                     sprintf@s:
   766                           
   767                           ; 1 bytes @ 0x26
   768     0046                     	ds	1
   769     0047                     sprintf@f:
   770                           
   771                           ; 11 bytes @ 0x27
   772     0047                     	ds	11
   773     0052                     ??_main:
   774                           
   775                           ; 1 bytes @ 0x32
   776     0052                     	ds	2
   777     0054                     main@yuzde_veri:
   778                           
   779                           ; 16 bytes @ 0x34
   780     0054                     	ds	16
   781     0064                     main@hiz:
   782                           
   783                           ; 2 bytes @ 0x44
   784     0064                     	ds	2
   785     0066                     main@sayac:
   786                           
   787                           ; 2 bytes @ 0x46
   788     0066                     	ds	2
   789                           
   790                           	psect	maintext
   791     06EF                     __pmaintext:	
   792 ;;
   793 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   794 ;;
   795 ;; *************** function _main *****************
   796 ;; Defined at:
   797 ;;		line 186 in file "gsmg_c.c"
   798 ;; Parameters:    Size  Location     Type
   799 ;;		None
   800 ;; Auto vars:     Size  Location     Type
   801 ;;  yuzde_veri     16   52[BANK0 ] unsigned char [16]
   802 ;;  sayac           2   70[BANK0 ] int 
   803 ;;  hiz             2   68[BANK0 ] unsigned int 
   804 ;; Return value:  Size  Location     Type
   805 ;;                  1    wreg      void 
   806 ;; Registers used:
   807 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   808 ;; Tracked objects:
   809 ;;		On entry : B00/0
   810 ;;		On exit  : 0/0
   811 ;;		Unchanged: 0/0
   812 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   813 ;;      Params:         0       0       0       0       0
   814 ;;      Locals:         0      20       0       0       0
   815 ;;      Temps:          0       2       0       0       0
   816 ;;      Totals:         0      22       0       0       0
   817 ;;Total ram usage:       22 bytes
   818 ;; Hardware stack levels required when called: 8
   819 ;; This function calls:
   820 ;;		_Lcd_Init
   821 ;;		_Lcd_Set_Cursor
   822 ;;		_Lcd_Write_String
   823 ;;		___wmul
   824 ;;		_baslangic
   825 ;;		_motor
   826 ;;		_sprintf
   827 ;; This function is called by:
   828 ;;		Startup code after reset
   829 ;; This function uses a non-reentrant model
   830 ;;
   831                           
   832     06EF                     _main:	
   833                           ;psect for function _main
   834                           
   835     06EF                     l1626:	
   836                           ;incstack = 0
   837                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   838                           
   839                           
   840                           ;gsmg_c.c: 187:     int sayac;;gsmg_c.c: 190:     TRISD = 0X00;
   841     06EF  1683               	bsf	3,5	;RP0=1, select bank1
   842     06F0  1303               	bcf	3,6	;RP1=0, select bank1
   843     06F1  0188               	clrf	8	;volatile
   844                           
   845                           ;gsmg_c.c: 191:     TRISC = 0X00;
   846     06F2  0187               	clrf	7	;volatile
   847     06F3                     l1628:
   848                           
   849                           ;gsmg_c.c: 192:     TRISB = 0XFF;
   850     06F3  30FF               	movlw	255
   851     06F4  0086               	movwf	6	;volatile
   852     06F5                     l1630:
   853                           
   854                           ;gsmg_c.c: 193:     PORTD = 0X00;
   855     06F5  1283               	bcf	3,5	;RP0=0, select bank0
   856     06F6  1303               	bcf	3,6	;RP1=0, select bank0
   857     06F7  0188               	clrf	8	;volatile
   858     06F8                     l1632:
   859                           
   860                           ;gsmg_c.c: 194:     PORTC = 0X00;
   861     06F8  0187               	clrf	7	;volatile
   862     06F9                     l1634:
   863                           
   864                           ;gsmg_c.c: 195:     PORTB = 0X00;
   865     06F9  0186               	clrf	6	;volatile
   866     06FA                     l1636:
   867                           
   868                           ;gsmg_c.c: 197:     Lcd_Init();
   869     06FA  120A  118A  247F  120A  118A  	fcall	_Lcd_Init
   870     06FF                     l1638:
   871                           
   872                           ;gsmg_c.c: 199:     CCP1M3 = 1;
   873     06FF  1283               	bcf	3,5	;RP0=0, select bank0
   874     0700  1303               	bcf	3,6	;RP1=0, select bank0
   875     0701  1597               	bsf	23,3	;volatile
   876     0702                     l1640:
   877                           
   878                           ;gsmg_c.c: 200:     CCP1M2 = 1;
   879     0702  1517               	bsf	23,2	;volatile
   880     0703                     l1642:
   881                           
   882                           ;gsmg_c.c: 201:     CCP2M3 = 1;
   883     0703  159D               	bsf	29,3	;volatile
   884     0704                     l1644:
   885                           
   886                           ;gsmg_c.c: 202:     CCP2M2 = 1;
   887     0704  151D               	bsf	29,2	;volatile
   888     0705                     l1646:
   889                           
   890                           ;gsmg_c.c: 203:     T2CKPS0 = 1;
   891     0705  1412               	bsf	18,0	;volatile
   892     0706                     l1648:
   893                           
   894                           ;gsmg_c.c: 204:     T2CKPS1 = 0;
   895     0706  1092               	bcf	18,1	;volatile
   896     0707                     l1650:
   897                           
   898                           ;gsmg_c.c: 205:     TMR2ON = 1;
   899     0707  1512               	bsf	18,2	;volatile
   900     0708                     l1652:
   901                           
   902                           ;gsmg_c.c: 207:     TMR2 = 0;
   903     0708  0191               	clrf	17	;volatile
   904     0709                     l1654:
   905                           
   906                           ;gsmg_c.c: 208:     PR2 = 249;
   907     0709  30F9               	movlw	249
   908     070A  1683               	bsf	3,5	;RP0=1, select bank1
   909     070B  1303               	bcf	3,6	;RP1=0, select bank1
   910     070C  0092               	movwf	18	;volatile
   911     070D                     l1656:
   912                           
   913                           ;gsmg_c.c: 210:     baslangic();
   914     070D  120A  118A  226E  120A  118A  	fcall	_baslangic
   915     0712                     l1658:
   916                           
   917                           ;gsmg_c.c: 211:     unsigned int hiz;;gsmg_c.c: 212:     _delay((unsigned long)((2)*(400
      +                          0000/4000.0)));
   918     0712  3003               	movlw	3
   919     0713  1283               	bcf	3,5	;RP0=0, select bank0
   920     0714  1303               	bcf	3,6	;RP1=0, select bank0
   921     0715  00D3               	movwf	??_main+1
   922     0716  3097               	movlw	151
   923     0717  00D2               	movwf	??_main
   924     0718                     u1537:
   925     0718  0BD2               	decfsz	??_main,f
   926     0719  2F18               	goto	u1537
   927     071A  0BD3               	decfsz	??_main+1,f
   928     071B  2F18               	goto	u1537
   929     071C                     l1660:
   930                           
   931                           ;gsmg_c.c: 216:         Lcd_Set_Cursor(1,5);
   932     071C  3005               	movlw	5
   933     071D  00F4               	movwf	Lcd_Set_Cursor@b
   934     071E  3001               	movlw	1
   935     071F  120A  118A  22E6  120A  118A  	fcall	_Lcd_Set_Cursor
   936     0724                     l1662:
   937                           
   938                           ;gsmg_c.c: 217:         Lcd_Write_String("HIZ:");
   939     0724  3023               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
   940     0725  00F5               	movwf	Lcd_Write_String@a
   941     0726  3080               	movlw	128
   942     0727  00F6               	movwf	Lcd_Write_String@a+1
   943     0728  120A  118A  22A4  120A  118A  	fcall	_Lcd_Write_String
   944     072D                     l1664:
   945                           
   946                           ;gsmg_c.c: 218:         Lcd_Set_Cursor(2,5);
   947     072D  3005               	movlw	5
   948     072E  00F4               	movwf	Lcd_Set_Cursor@b
   949     072F  3002               	movlw	2
   950     0730  120A  118A  22E6  120A  118A  	fcall	_Lcd_Set_Cursor
   951     0735                     l1666:
   952                           
   953                           ;gsmg_c.c: 219:         Lcd_Write_String("YON:");
   954     0735  301E               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
   955     0736  00F5               	movwf	Lcd_Write_String@a
   956     0737  3080               	movlw	128
   957     0738  00F6               	movwf	Lcd_Write_String@a+1
   958     0739  120A  118A  22A4  120A  118A  	fcall	_Lcd_Write_String
   959     073E                     l1668:
   960                           
   961                           ;gsmg_c.c: 222:         if(RB0 == 0){
   962     073E  1283               	bcf	3,5	;RP0=0, select bank0
   963     073F  1303               	bcf	3,6	;RP1=0, select bank0
   964     0740  1806               	btfsc	6,0	;volatile
   965     0741  2F43               	goto	u1431
   966     0742  2F44               	goto	u1430
   967     0743                     u1431:
   968     0743  2F64               	goto	l123
   969     0744                     u1430:
   970     0744                     l124:
   971     0744  1C06               	btfss	6,0	;volatile
   972     0745  2F47               	goto	u1441
   973     0746  2F48               	goto	u1440
   974     0747                     u1441:
   975     0747  2F44               	goto	l124
   976     0748                     u1440:
   977     0748                     l1672:
   978                           
   979                           ;gsmg_c.c: 225:             sayac_hiz = sayac_hiz + 1;
   980     0748  086D               	movf	_sayac_hiz,w
   981     0749  3E01               	addlw	1
   982     074A  00ED               	movwf	_sayac_hiz
   983     074B  086E               	movf	_sayac_hiz+1,w
   984     074C  1803               	skipnc
   985     074D  3E01               	addlw	1
   986     074E  3E00               	addlw	0
   987     074F  00EE               	movwf	_sayac_hiz+1
   988     0750                     l1674:
   989                           
   990                           ;gsmg_c.c: 227:             if(sayac_hiz >= 100){
   991     0750  086E               	movf	_sayac_hiz+1,w
   992     0751  3A80               	xorlw	128
   993     0752  00FF               	movwf	btemp+1
   994     0753  3080               	movlw	128
   995     0754  027F               	subwf	btemp+1,w
   996     0755  1D03               	skipz
   997     0756  2F59               	goto	u1455
   998     0757  3064               	movlw	100
   999     0758  026D               	subwf	_sayac_hiz,w
  1000     0759                     u1455:
  1001     0759  1C03               	skipc
  1002     075A  2F5C               	goto	u1451
  1003     075B  2F5D               	goto	u1450
  1004     075C                     u1451:
  1005     075C  2F9D               	goto	l1694
  1006     075D                     u1450:
  1007     075D                     l1676:
  1008                           
  1009                           ;gsmg_c.c: 228:                 sayac_hiz = 100;
  1010     075D  3064               	movlw	100
  1011     075E  1283               	bcf	3,5	;RP0=0, select bank0
  1012     075F  1303               	bcf	3,6	;RP1=0, select bank0
  1013     0760  00ED               	movwf	_sayac_hiz
  1014     0761  3000               	movlw	0
  1015     0762  00EE               	movwf	_sayac_hiz+1
  1016     0763  2F9D               	goto	l1694
  1017     0764                     l123:	
  1018                           ;gsmg_c.c: 232:         else if(RB1 == 0){
  1019                           
  1020     0764  1886               	btfsc	6,1	;volatile
  1021     0765  2F67               	goto	u1461
  1022     0766  2F68               	goto	u1460
  1023     0767                     u1461:
  1024     0767  2F86               	goto	l129
  1025     0768                     u1460:
  1026     0768                     l130:
  1027     0768  1C86               	btfss	6,1	;volatile
  1028     0769  2F6B               	goto	u1471
  1029     076A  2F6C               	goto	u1470
  1030     076B                     u1471:
  1031     076B  2F68               	goto	l130
  1032     076C                     u1470:
  1033     076C                     l1680:
  1034                           
  1035                           ;gsmg_c.c: 235:             sayac_hiz = sayac_hiz - 1;
  1036     076C  086D               	movf	_sayac_hiz,w
  1037     076D  3EFF               	addlw	255
  1038     076E  00ED               	movwf	_sayac_hiz
  1039     076F  086E               	movf	_sayac_hiz+1,w
  1040     0770  1803               	skipnc
  1041     0771  3E01               	addlw	1
  1042     0772  3EFF               	addlw	255
  1043     0773  00EE               	movwf	_sayac_hiz+1
  1044     0774                     l1682:
  1045                           
  1046                           ;gsmg_c.c: 237:             if(sayac_hiz <= 0){
  1047     0774  086E               	movf	_sayac_hiz+1,w
  1048     0775  3A80               	xorlw	128
  1049     0776  00FF               	movwf	btemp+1
  1050     0777  3080               	movlw	128
  1051     0778  027F               	subwf	btemp+1,w
  1052     0779  1D03               	skipz
  1053     077A  2F7D               	goto	u1485
  1054     077B  3001               	movlw	1
  1055     077C  026D               	subwf	_sayac_hiz,w
  1056     077D                     u1485:
  1057     077D  1803               	skipnc
  1058     077E  2F80               	goto	u1481
  1059     077F  2F81               	goto	u1480
  1060     0780                     u1481:
  1061     0780  2F9D               	goto	l1694
  1062     0781                     u1480:
  1063     0781                     l1684:
  1064                           
  1065                           ;gsmg_c.c: 238:                 sayac_hiz = 0;
  1066     0781  1283               	bcf	3,5	;RP0=0, select bank0
  1067     0782  1303               	bcf	3,6	;RP1=0, select bank0
  1068     0783  01ED               	clrf	_sayac_hiz
  1069     0784  01EE               	clrf	_sayac_hiz+1
  1070     0785  2F9D               	goto	l1694
  1071     0786                     l129:	
  1072                           ;gsmg_c.c: 242:         else if(RB6 == 0){
  1073                           
  1074     0786  1B06               	btfsc	6,6	;volatile
  1075     0787  2F89               	goto	u1491
  1076     0788  2F8A               	goto	u1490
  1077     0789                     u1491:
  1078     0789  2F93               	goto	l135
  1079     078A                     u1490:
  1080     078A                     l136:
  1081     078A  1F06               	btfss	6,6	;volatile
  1082     078B  2F8D               	goto	u1501
  1083     078C  2F8E               	goto	u1500
  1084     078D                     u1501:
  1085     078D  2F8A               	goto	l136
  1086     078E                     u1500:
  1087     078E                     l1688:
  1088                           
  1089                           ;gsmg_c.c: 245:             sayac = 1;
  1090     078E  3001               	movlw	1
  1091     078F  00E6               	movwf	main@sayac
  1092     0790  3000               	movlw	0
  1093     0791  00E7               	movwf	main@sayac+1
  1094                           
  1095                           ;gsmg_c.c: 247:         }
  1096     0792  2F9D               	goto	l1694
  1097     0793                     l135:	
  1098                           ;gsmg_c.c: 249:         else if(RB7 == 0){
  1099                           
  1100     0793  1B86               	btfsc	6,7	;volatile
  1101     0794  2F96               	goto	u1511
  1102     0795  2F97               	goto	u1510
  1103     0796                     u1511:
  1104     0796  2F9D               	goto	l1694
  1105     0797                     u1510:
  1106     0797                     l141:
  1107     0797  1F86               	btfss	6,7	;volatile
  1108     0798  2F9A               	goto	u1521
  1109     0799  2F9B               	goto	u1520
  1110     079A                     u1521:
  1111     079A  2F97               	goto	l141
  1112     079B                     u1520:
  1113     079B                     l1692:
  1114                           
  1115                           ;gsmg_c.c: 252:             sayac = 0;
  1116     079B  01E6               	clrf	main@sayac
  1117     079C  01E7               	clrf	main@sayac+1
  1118     079D                     l1694:
  1119                           
  1120                           ;gsmg_c.c: 255:         char yuzde_veri[16];;gsmg_c.c: 256:         hiz = sayac_hiz*10;
  1121     079D  1283               	bcf	3,5	;RP0=0, select bank0
  1122     079E  1303               	bcf	3,6	;RP1=0, select bank0
  1123     079F  086E               	movf	_sayac_hiz+1,w
  1124     07A0  00F1               	movwf	___wmul@multiplier+1
  1125     07A1  086D               	movf	_sayac_hiz,w
  1126     07A2  00F0               	movwf	___wmul@multiplier
  1127     07A3  300A               	movlw	10
  1128     07A4  00F2               	movwf	___wmul@multiplicand
  1129     07A5  3000               	movlw	0
  1130     07A6  00F3               	movwf	___wmul@multiplicand+1
  1131     07A7  120A  118A  21EC  120A  118A  	fcall	___wmul
  1132     07AC  0871               	movf	?___wmul+1,w
  1133     07AD  1283               	bcf	3,5	;RP0=0, select bank0
  1134     07AE  1303               	bcf	3,6	;RP1=0, select bank0
  1135     07AF  00E5               	movwf	main@hiz+1
  1136     07B0  0870               	movf	?___wmul,w
  1137     07B1  00E4               	movwf	main@hiz
  1138     07B2                     l1696:
  1139                           
  1140                           ;gsmg_c.c: 258:         sprintf(yuzde_veri, "%3d", sayac_hiz);
  1141     07B2  3030               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  1142     07B3  00C1               	movwf	sprintf@fmt
  1143     07B4  086E               	movf	_sayac_hiz+1,w
  1144     07B5  00C3               	movwf	?_sprintf+2
  1145     07B6  086D               	movf	_sayac_hiz,w
  1146     07B7  00C2               	movwf	?_sprintf+1
  1147     07B8  3054               	movlw	(low (main@yuzde_veri| 0))& (0+255)
  1148     07B9  120A  118A  218A  120A  118A  	fcall	_sprintf
  1149     07BE                     l1698:
  1150                           
  1151                           ;gsmg_c.c: 259:         Lcd_Set_Cursor(1,9);
  1152     07BE  3009               	movlw	9
  1153     07BF  00F4               	movwf	Lcd_Set_Cursor@b
  1154     07C0  3001               	movlw	1
  1155     07C1  120A  118A  22E6  120A  118A  	fcall	_Lcd_Set_Cursor
  1156     07C6                     l1700:
  1157                           
  1158                           ;gsmg_c.c: 260:         Lcd_Write_String(yuzde_veri);
  1159     07C6  3054               	movlw	(low (main@yuzde_veri| 0))& (0+255)
  1160     07C7  00F5               	movwf	Lcd_Write_String@a
  1161     07C8  3000               	movlw	0
  1162     07C9  00F6               	movwf	Lcd_Write_String@a+1
  1163     07CA  120A  118A  22A4  120A  118A  	fcall	_Lcd_Write_String
  1164     07CF                     l1702:
  1165                           
  1166                           ;gsmg_c.c: 263:         motor(sayac, hiz);
  1167     07CF  1283               	bcf	3,5	;RP0=0, select bank0
  1168     07D0  1303               	bcf	3,6	;RP1=0, select bank0
  1169     07D1  0867               	movf	main@sayac+1,w
  1170     07D2  00A1               	movwf	motor@sayac+1
  1171     07D3  0866               	movf	main@sayac,w
  1172     07D4  00A0               	movwf	motor@sayac
  1173     07D5  0865               	movf	main@hiz+1,w
  1174     07D6  00A3               	movwf	motor@hiz+1
  1175     07D7  0864               	movf	main@hiz,w
  1176     07D8  00A2               	movwf	motor@hiz
  1177     07D9  120A  118A  24DC  120A  118A  	fcall	_motor
  1178     07DE  2F1C               	goto	l1660
  1179     07DF  120A  118A  2800   	ljmp	start
  1180     07E2                     __end_of_main:
  1181                           
  1182                           	psect	text1
  1183     018A                     __ptext1:	
  1184 ;; *************** function _sprintf *****************
  1185 ;; Defined at:
  1186 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\nf_sprintf.c"
  1187 ;; Parameters:    Size  Location     Type
  1188 ;;  s               1    wreg     PTR unsigned char 
  1189 ;;		 -> main@yuzde_veri(16), 
  1190 ;;  fmt             1   33[BANK0 ] PTR const unsigned char 
  1191 ;;		 -> STR_7(4), 
  1192 ;; Auto vars:     Size  Location     Type
  1193 ;;  s               1   38[BANK0 ] PTR unsigned char 
  1194 ;;		 -> main@yuzde_veri(16), 
  1195 ;;  f              11   39[BANK0 ] struct _IO_FILE
  1196 ;;  ret             2    0        int 
  1197 ;;  ap              1   37[BANK0 ] PTR void [1]
  1198 ;;		 -> ?_sprintf(2), 
  1199 ;; Return value:  Size  Location     Type
  1200 ;;                  2   33[BANK0 ] int 
  1201 ;; Registers used:
  1202 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1203 ;; Tracked objects:
  1204 ;;		On entry : 0/0
  1205 ;;		On exit  : 0/0
  1206 ;;		Unchanged: 0/0
  1207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1208 ;;      Params:         0       3       0       0       0
  1209 ;;      Locals:         0      13       0       0       0
  1210 ;;      Temps:          0       1       0       0       0
  1211 ;;      Totals:         0      17       0       0       0
  1212 ;;Total ram usage:       17 bytes
  1213 ;; Hardware stack levels used: 1
  1214 ;; Hardware stack levels required when called: 7
  1215 ;; This function calls:
  1216 ;;		_vfprintf
  1217 ;; This function is called by:
  1218 ;;		_main
  1219 ;; This function uses a non-reentrant model
  1220 ;;
  1221                           
  1222     018A                     _sprintf:	
  1223                           ;psect for function _sprintf
  1224                           
  1225                           
  1226                           ;incstack = 0
  1227                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1228                           ;sprintf@s stored from wreg
  1229     018A  1283               	bcf	3,5	;RP0=0, select bank0
  1230     018B  1303               	bcf	3,6	;RP1=0, select bank0
  1231     018C  00C6               	movwf	sprintf@s
  1232     018D                     l1614:
  1233     018D  3042               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  1234     018E  00C5               	movwf	sprintf@ap
  1235     018F  0846               	movf	sprintf@s,w
  1236     0190  00C7               	movwf	sprintf@f
  1237     0191                     l1616:
  1238     0191  01C9               	clrf	sprintf@f+2
  1239     0192  01CA               	clrf	sprintf@f+3
  1240     0193                     l1618:
  1241     0193  01D0               	clrf	sprintf@f+9
  1242     0194  01D1               	clrf	sprintf@f+10
  1243     0195                     l1620:
  1244     0195  0841               	movf	sprintf@fmt,w
  1245     0196  00BD               	movwf	vfprintf@fmt
  1246     0197  3045               	movlw	(low (sprintf@ap| 0))& (0+255)
  1247     0198  00BE               	movwf	vfprintf@ap
  1248     0199  3047               	movlw	(low (sprintf@f| 0))& (0+255)
  1249     019A  120A  118A  21A9  120A  118A  	fcall	_vfprintf
  1250     019F                     l1622:
  1251     019F  1283               	bcf	3,5	;RP0=0, select bank0
  1252     01A0  1303               	bcf	3,6	;RP1=0, select bank0
  1253     01A1  0849               	movf	sprintf@f+2,w
  1254     01A2  0746               	addwf	sprintf@s,w
  1255     01A3  00C4               	movwf	??_sprintf
  1256     01A4  0844               	movf	??_sprintf,w
  1257     01A5  0084               	movwf	4
  1258     01A6  1383               	bcf	3,7	;select IRP bank0
  1259     01A7  0180               	clrf	0
  1260     01A8                     l695:
  1261     01A8  0008               	return
  1262     01A9                     __end_of_sprintf:
  1263                           
  1264                           	psect	text2
  1265     01A9                     __ptext2:	
  1266 ;; *************** function _vfprintf *****************
  1267 ;; Defined at:
  1268 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c"
  1269 ;; Parameters:    Size  Location     Type
  1270 ;;  fp              1    wreg     PTR struct _IO_FILE
  1271 ;;		 -> sprintf@f(11), 
  1272 ;;  fmt             1   29[BANK0 ] PTR const unsigned char 
  1273 ;;		 -> STR_7(4), 
  1274 ;;  ap              1   30[BANK0 ] PTR PTR void 
  1275 ;;		 -> sprintf@ap(1), 
  1276 ;; Auto vars:     Size  Location     Type
  1277 ;;  fp              1   31[BANK0 ] PTR struct _IO_FILE
  1278 ;;		 -> sprintf@f(11), 
  1279 ;;  cfmt            1   32[BANK0 ] PTR unsigned char 
  1280 ;;		 -> STR_7(4), 
  1281 ;; Return value:  Size  Location     Type
  1282 ;;                  2   29[BANK0 ] int 
  1283 ;; Registers used:
  1284 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1285 ;; Tracked objects:
  1286 ;;		On entry : 0/0
  1287 ;;		On exit  : 0/0
  1288 ;;		Unchanged: 0/0
  1289 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1290 ;;      Params:         0       2       0       0       0
  1291 ;;      Locals:         0       2       0       0       0
  1292 ;;      Temps:          0       0       0       0       0
  1293 ;;      Totals:         0       4       0       0       0
  1294 ;;Total ram usage:        4 bytes
  1295 ;; Hardware stack levels used: 1
  1296 ;; Hardware stack levels required when called: 6
  1297 ;; This function calls:
  1298 ;;		_vfpfcnvrt
  1299 ;; This function is called by:
  1300 ;;		_sprintf
  1301 ;; This function uses a non-reentrant model
  1302 ;;
  1303                           
  1304     01A9                     _vfprintf:	
  1305                           ;psect for function _vfprintf
  1306                           
  1307                           
  1308                           ;incstack = 0
  1309 ;; using string table level
  1310                           ; Regs used in _vfprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1311                           ;vfprintf@fp stored from wreg
  1312     01A9  1283               	bcf	3,5	;RP0=0, select bank0
  1313     01AA  1303               	bcf	3,6	;RP1=0, select bank0
  1314     01AB  00BF               	movwf	vfprintf@fp
  1315     01AC                     l1564:
  1316                           
  1317                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.46\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
  1318     01AC  083D               	movf	vfprintf@fmt,w
  1319     01AD  00C0               	movwf	vfprintf@cfmt
  1320                           
  1321                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  1322     01AE  29B9               	goto	l1568
  1323     01AF                     l1566:
  1324                           
  1325                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  1326     01AF  3040               	movlw	(low (vfprintf@cfmt| 0))& (0+255)
  1327     01B0  00B3               	movwf	vfpfcnvrt@fmt
  1328     01B1  083E               	movf	vfprintf@ap,w
  1329     01B2  00B4               	movwf	vfpfcnvrt@ap
  1330     01B3  083F               	movf	vfprintf@fp,w
  1331     01B4  120A  118A  25AA  120A  118A  	fcall	_vfpfcnvrt
  1332     01B9                     l1568:
  1333                           
  1334                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  1335     01B9  1283               	bcf	3,5	;RP0=0, select bank0
  1336     01BA  1303               	bcf	3,6	;RP1=0, select bank0
  1337     01BB  0840               	movf	vfprintf@cfmt,w
  1338     01BC  0084               	movwf	4
  1339     01BD  120A  118A  200D  120A  118A  	fcall	stringdir
  1340     01C2  3A00               	xorlw	0
  1341     01C3  1D03               	skipz
  1342     01C4  29C6               	goto	u1401
  1343     01C5  29C7               	goto	u1400
  1344     01C6                     u1401:
  1345     01C6  29AF               	goto	l1566
  1346     01C7                     u1400:
  1347     01C7                     l1570:
  1348                           
  1349                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1835:  return 0;
  1350     01C7  01BD               	clrf	?_vfprintf
  1351     01C8  01BE               	clrf	?_vfprintf+1
  1352     01C9                     l756:
  1353     01C9  0008               	return
  1354     01CA                     __end_of_vfprintf:
  1355                           
  1356                           	psect	text3
  1357     05AA                     __ptext3:	
  1358 ;; *************** function _vfpfcnvrt *****************
  1359 ;; Defined at:
  1360 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c"
  1361 ;; Parameters:    Size  Location     Type
  1362 ;;  fp              1    wreg     PTR struct _IO_FILE
  1363 ;;		 -> sprintf@f(11), 
  1364 ;;  fmt             1   19[BANK0 ] PTR PTR unsigned char 
  1365 ;;		 -> vfprintf@cfmt(1), 
  1366 ;;  ap              1   20[BANK0 ] PTR PTR void 
  1367 ;;		 -> sprintf@ap(1), 
  1368 ;; Auto vars:     Size  Location     Type
  1369 ;;  fp              1   27[BANK0 ] PTR struct _IO_FILE
  1370 ;;		 -> sprintf@f(11), 
  1371 ;;  convarg         4   23[BANK0 ] struct .
  1372 ;;  cp              1   28[BANK0 ] PTR unsigned char 
  1373 ;;		 -> STR_7(4), 
  1374 ;;  done            1    0        _Bool 
  1375 ;;  c               1    0        unsigned char 
  1376 ;; Return value:  Size  Location     Type
  1377 ;;                  1    wreg      void 
  1378 ;; Registers used:
  1379 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1380 ;; Tracked objects:
  1381 ;;		On entry : 0/0
  1382 ;;		On exit  : 0/0
  1383 ;;		Unchanged: 0/0
  1384 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1385 ;;      Params:         0       2       0       0       0
  1386 ;;      Locals:         0       6       0       0       0
  1387 ;;      Temps:          0       2       0       0       0
  1388 ;;      Totals:         0      10       0       0       0
  1389 ;;Total ram usage:       10 bytes
  1390 ;; Hardware stack levels used: 1
  1391 ;; Hardware stack levels required when called: 5
  1392 ;; This function calls:
  1393 ;;		_dtoa
  1394 ;;		_fputc
  1395 ;;		_read_prec_or_width
  1396 ;; This function is called by:
  1397 ;;		_vfprintf
  1398 ;; This function uses a non-reentrant model
  1399 ;;
  1400                           
  1401     05AA                     _vfpfcnvrt:	
  1402                           ;psect for function _vfpfcnvrt
  1403                           
  1404                           
  1405                           ;incstack = 0
  1406 ;; using string table level
  1407                           ; Regs used in _vfpfcnvrt: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1408                           ;vfpfcnvrt@fp stored from wreg
  1409     05AA  1283               	bcf	3,5	;RP0=0, select bank0
  1410     05AB  1303               	bcf	3,6	;RP1=0, select bank0
  1411     05AC  00BB               	movwf	vfpfcnvrt@fp
  1412     05AD                     l1486:
  1413                           
  1414                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\co
      +                          mmon\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
  1415     05AD  0833               	movf	vfpfcnvrt@fmt,w
  1416     05AE  0084               	movwf	4
  1417     05AF  1383               	bcf	3,7	;select IRP bank0
  1418     05B0  0800               	movf	0,w
  1419     05B1  0084               	movwf	4
  1420     05B2  120A  118A  200D  120A  118A  	fcall	stringdir
  1421     05B7  3A25               	xorlw	37
  1422     05B8  1D03               	skipz
  1423     05B9  2DBB               	goto	u1251
  1424     05BA  2DBC               	goto	u1250
  1425     05BB                     u1251:
  1426     05BB  2E29               	goto	l1520
  1427     05BC                     u1250:
  1428     05BC                     l1488:
  1429                           
  1430                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  1431     05BC  3001               	movlw	1
  1432     05BD  00FF               	movwf	btemp+1
  1433     05BE  0833               	movf	vfpfcnvrt@fmt,w
  1434     05BF  0084               	movwf	4
  1435     05C0  087F               	movf	btemp+1,w
  1436     05C1  0780               	addwf	0,f
  1437     05C2                     l1490:
  1438                           
  1439                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  1440     05C2  01E8               	clrf	_width
  1441     05C3  01E9               	clrf	_width+1
  1442     05C4  1003               	clrc
  1443     05C5  3000               	movlw	0
  1444     05C6  1803               	btfsc	3,0
  1445     05C7  3001               	movlw	1
  1446     05C8  00EC               	movwf	_flags
  1447     05C9                     l1492:
  1448                           
  1449                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  1450     05C9  30FF               	movlw	255
  1451     05CA  00EA               	movwf	_prec
  1452     05CB  30FF               	movlw	255
  1453     05CC  00EB               	movwf	_prec+1
  1454     05CD                     l1494:
  1455                           
  1456                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1256:   width = r
      +                          ead_prec_or_width(fmt, ap);
  1457     05CD  0834               	movf	vfpfcnvrt@ap,w
  1458     05CE  00F6               	movwf	read_prec_or_width@ap
  1459     05CF  0833               	movf	vfpfcnvrt@fmt,w
  1460     05D0  120A  118A  23CE  120A  118A  	fcall	_read_prec_or_width
  1461     05D5  0877               	movf	?_read_prec_or_width+1,w
  1462     05D6  1283               	bcf	3,5	;RP0=0, select bank0
  1463     05D7  1303               	bcf	3,6	;RP1=0, select bank0
  1464     05D8  00E9               	movwf	_width+1
  1465     05D9  0876               	movf	?_read_prec_or_width,w
  1466     05DA  00E8               	movwf	_width
  1467     05DB                     l1496:
  1468                           
  1469                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1257:   if (width
      +                           < 0) {
  1470     05DB  1FE9               	btfss	_width+1,7
  1471     05DC  2DDE               	goto	u1261
  1472     05DD  2DDF               	goto	u1260
  1473     05DE                     u1261:
  1474     05DE  2DE5               	goto	l1502
  1475     05DF                     u1260:
  1476     05DF                     l1498:
  1477                           
  1478                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1258:    flags |=
      +                           (1 << 0);
  1479     05DF  146C               	bsf	_flags,0
  1480     05E0                     l1500:
  1481                           
  1482                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1259:    width = 
      +                          -width;
  1483     05E0  09E8               	comf	_width,f
  1484     05E1  09E9               	comf	_width+1,f
  1485     05E2  0AE8               	incf	_width,f
  1486     05E3  1903               	skipnz
  1487     05E4  0AE9               	incf	_width+1,f
  1488     05E5                     l1502:
  1489                           
  1490                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1291:   cp = *fmt
      +                          ;
  1491     05E5  0833               	movf	vfpfcnvrt@fmt,w
  1492     05E6  0084               	movwf	4
  1493     05E7  1383               	bcf	3,7	;select IRP bank0
  1494     05E8  0800               	movf	0,w
  1495     05E9  00BC               	movwf	vfpfcnvrt@cp
  1496     05EA                     l1504:
  1497                           
  1498                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1361:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  1499     05EA  083C               	movf	vfpfcnvrt@cp,w
  1500     05EB  0084               	movwf	4
  1501     05EC  120A  118A  200D  120A  118A  	fcall	stringdir
  1502     05F1  3A64               	xorlw	100
  1503     05F2  1903               	skipnz
  1504     05F3  2DF5               	goto	u1271
  1505     05F4  2DF6               	goto	u1270
  1506     05F5                     u1271:
  1507     05F5  2E02               	goto	l1508
  1508     05F6                     u1270:
  1509     05F6                     l1506:
  1510     05F6  083C               	movf	vfpfcnvrt@cp,w
  1511     05F7  0084               	movwf	4
  1512     05F8  120A  118A  200D  120A  118A  	fcall	stringdir
  1513     05FD  3A69               	xorlw	105
  1514     05FE  1D03               	skipz
  1515     05FF  2E01               	goto	u1281
  1516     0600  2E02               	goto	u1280
  1517     0601                     u1281:
  1518     0601  2E1F               	goto	l1516
  1519     0602                     u1280:
  1520     0602                     l1508:
  1521                           
  1522                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1404:    convarg.
      +                          sint = (vfpf_sint_t)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  1523     0602  0834               	movf	vfpfcnvrt@ap,w
  1524     0603  0084               	movwf	4
  1525     0604  0800               	movf	0,w
  1526     0605  00FF               	movwf	btemp+1
  1527     0606  3002               	movlw	2
  1528     0607  0780               	addwf	0,f
  1529     0608  087F               	movf	btemp+1,w
  1530     0609  0084               	movwf	4
  1531     060A  0800               	movf	0,w
  1532     060B  00B7               	movwf	vfpfcnvrt@convarg
  1533     060C  0A84               	incf	4,f
  1534     060D  0800               	movf	0,w
  1535     060E  00B8               	movwf	vfpfcnvrt@convarg+1
  1536     060F                     l1510:
  1537                           
  1538                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1406:    *fmt = c
      +                          p+1;
  1539     060F  0833               	movf	vfpfcnvrt@fmt,w
  1540     0610  0084               	movwf	4
  1541     0611  083C               	movf	vfpfcnvrt@cp,w
  1542     0612  3E01               	addlw	1
  1543     0613  0080               	movwf	0
  1544     0614                     l1512:
  1545                           
  1546                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1432:    return (
      +                          void) dtoa(fp, convarg.sint);;	Return value of _vfpfcnvrt is never used
  1547     0614  0838               	movf	vfpfcnvrt@convarg+1,w
  1548     0615  00A9               	movwf	dtoa@d+1
  1549     0616  0837               	movf	vfpfcnvrt@convarg,w
  1550     0617  00A8               	movwf	dtoa@d
  1551     0618  083B               	movf	vfpfcnvrt@fp,w
  1552     0619  120A  118A  2641  120A  118A  	fcall	_dtoa
  1553     061E  2E40               	goto	l750
  1554     061F                     l1516:
  1555                           
  1556                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  1557     061F  3001               	movlw	1
  1558     0620  00FF               	movwf	btemp+1
  1559     0621  1283               	bcf	3,5	;RP0=0, select bank0
  1560     0622  1303               	bcf	3,6	;RP1=0, select bank0
  1561     0623  0833               	movf	vfpfcnvrt@fmt,w
  1562     0624  0084               	movwf	4
  1563     0625  087F               	movf	btemp+1,w
  1564     0626  1383               	bcf	3,7	;select IRP bank0
  1565     0627  0780               	addwf	0,f
  1566     0628  2E40               	goto	l750
  1567     0629                     l1520:
  1568                           
  1569                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  1570     0629  0833               	movf	vfpfcnvrt@fmt,w
  1571     062A  0084               	movwf	4
  1572     062B  0800               	movf	0,w
  1573     062C  0084               	movwf	4
  1574     062D  120A  118A  200D  120A  118A  	fcall	stringdir
  1575     0632  00B5               	movwf	??_vfpfcnvrt
  1576     0633  01B6               	clrf	??_vfpfcnvrt+1
  1577     0634  0835               	movf	??_vfpfcnvrt,w
  1578     0635  00F0               	movwf	fputc@c
  1579     0636  0836               	movf	??_vfpfcnvrt+1,w
  1580     0637  00F1               	movwf	fputc@c+1
  1581     0638  083B               	movf	vfpfcnvrt@fp,w
  1582     0639  00F2               	movwf	fputc@fp
  1583     063A  120A  118A  2378  120A  118A  	fcall	_fputc
  1584     063F  2E1F               	goto	l1516
  1585     0640                     l750:
  1586     0640  0008               	return
  1587     0641                     __end_of_vfpfcnvrt:
  1588                           
  1589                           	psect	text4
  1590     03CE                     __ptext4:	
  1591 ;; *************** function _read_prec_or_width *****************
  1592 ;; Defined at:
  1593 ;;		line 1158 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c"
  1594 ;; Parameters:    Size  Location     Type
  1595 ;;  fmt             1    wreg     PTR PTR const unsigned c
  1596 ;;		 -> vfprintf@cfmt(1), 
  1597 ;;  ap              1    6[COMMON] PTR PTR void [1]
  1598 ;;		 -> sprintf@ap(1), 
  1599 ;; Auto vars:     Size  Location     Type
  1600 ;;  fmt             1   11[COMMON] PTR PTR const unsigned c
  1601 ;;		 -> vfprintf@cfmt(1), 
  1602 ;;  c               1    8[COMMON] unsigned char 
  1603 ;;  n               2    9[COMMON] int 
  1604 ;; Return value:  Size  Location     Type
  1605 ;;                  2    6[COMMON] int 
  1606 ;; Registers used:
  1607 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1608 ;; Tracked objects:
  1609 ;;		On entry : 0/0
  1610 ;;		On exit  : 0/0
  1611 ;;		Unchanged: 0/0
  1612 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1613 ;;      Params:         2       0       0       0       0
  1614 ;;      Locals:         4       0       0       0       0
  1615 ;;      Temps:          0       0       0       0       0
  1616 ;;      Totals:         6       0       0       0       0
  1617 ;;Total ram usage:        6 bytes
  1618 ;; Hardware stack levels used: 1
  1619 ;; Hardware stack levels required when called: 1
  1620 ;; This function calls:
  1621 ;;		___wmul
  1622 ;; This function is called by:
  1623 ;;		_vfpfcnvrt
  1624 ;; This function uses a non-reentrant model
  1625 ;;
  1626                           
  1627     03CE                     _read_prec_or_width:	
  1628                           ;psect for function _read_prec_or_width
  1629                           
  1630                           
  1631                           ;incstack = 0
  1632                           ; Regs used in _read_prec_or_width: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1633                           ;read_prec_or_width@fmt stored from wreg
  1634     03CE  00FB               	movwf	read_prec_or_width@fmt
  1635     03CF                     l1440:
  1636                           
  1637                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1159:     int n =
      +                           0;
  1638     03CF  01F9               	clrf	read_prec_or_width@n
  1639     03D0  01FA               	clrf	read_prec_or_width@n+1
  1640     03D1                     l1442:
  1641                           
  1642                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1160:     if ((*f
      +                          mt)[0] == '*') {
  1643     03D1  087B               	movf	read_prec_or_width@fmt,w
  1644     03D2  0084               	movwf	4
  1645     03D3  1383               	bcf	3,7	;select IRP bank0
  1646     03D4  0800               	movf	0,w
  1647     03D5  0084               	movwf	4
  1648     03D6  120A  118A  200D  120A  118A  	fcall	stringdir
  1649     03DB  3A2A               	xorlw	42
  1650     03DC  1D03               	skipz
  1651     03DD  2BDF               	goto	u1221
  1652     03DE  2BE0               	goto	u1220
  1653     03DF                     u1221:
  1654     03DF  2C10               	goto	l1450
  1655     03E0                     u1220:
  1656     03E0                     l1444:
  1657                           
  1658                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1161:         ++*
      +                          fmt;
  1659     03E0  3001               	movlw	1
  1660     03E1  00FF               	movwf	btemp+1
  1661     03E2  087B               	movf	read_prec_or_width@fmt,w
  1662     03E3  0084               	movwf	4
  1663     03E4  087F               	movf	btemp+1,w
  1664     03E5  0780               	addwf	0,f
  1665                           
  1666                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1162:         n =
      +                           (*(int *)__va_arg(*(int **)*ap, (int)0));
  1667     03E6  0876               	movf	read_prec_or_width@ap,w
  1668     03E7  0084               	movwf	4
  1669     03E8  0800               	movf	0,w
  1670     03E9  00FF               	movwf	btemp+1
  1671     03EA  3002               	movlw	2
  1672     03EB  0780               	addwf	0,f
  1673     03EC  087F               	movf	btemp+1,w
  1674     03ED  0084               	movwf	4
  1675     03EE  0800               	movf	0,w
  1676     03EF  00F9               	movwf	read_prec_or_width@n
  1677     03F0  0A84               	incf	4,f
  1678     03F1  0800               	movf	0,w
  1679     03F2  00FA               	movwf	read_prec_or_width@n+1
  1680                           
  1681                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1163:     } else 
      +                          {
  1682     03F3  2C21               	goto	l1452
  1683     03F4                     l1446:
  1684                           
  1685                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1166:            
      +                           n = n * 10 + c;
  1686     03F4  087A               	movf	read_prec_or_width@n+1,w
  1687     03F5  00F1               	movwf	___wmul@multiplier+1
  1688     03F6  0879               	movf	read_prec_or_width@n,w
  1689     03F7  00F0               	movwf	___wmul@multiplier
  1690     03F8  300A               	movlw	10
  1691     03F9  00F2               	movwf	___wmul@multiplicand
  1692     03FA  3000               	movlw	0
  1693     03FB  00F3               	movwf	___wmul@multiplicand+1
  1694     03FC  120A  118A  21EC  120A  118A  	fcall	___wmul
  1695     0401  0878               	movf	read_prec_or_width@c,w
  1696     0402  0770               	addwf	?___wmul,w
  1697     0403  00F9               	movwf	read_prec_or_width@n
  1698     0404  3000               	movlw	0
  1699     0405  1803               	skipnc
  1700     0406  3001               	movlw	1
  1701     0407  0771               	addwf	?___wmul+1,w
  1702     0408  00FA               	movwf	read_prec_or_width@n+1
  1703     0409                     l1448:
  1704                           
  1705                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1167:            
      +                           ++*fmt;
  1706     0409  3001               	movlw	1
  1707     040A  00FF               	movwf	btemp+1
  1708     040B  087B               	movf	read_prec_or_width@fmt,w
  1709     040C  0084               	movwf	4
  1710     040D  087F               	movf	btemp+1,w
  1711     040E  1383               	bcf	3,7	;select IRP bank0
  1712     040F  0780               	addwf	0,f
  1713     0410                     l1450:
  1714                           
  1715                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1165:         whi
      +                          le ((c = ((unsigned)(*fmt)[0]) - '0') < 10) {
  1716     0410  087B               	movf	read_prec_or_width@fmt,w
  1717     0411  0084               	movwf	4
  1718     0412  0800               	movf	0,w
  1719     0413  0084               	movwf	4
  1720     0414  120A  118A  200D  120A  118A  	fcall	stringdir
  1721     0419  3ED0               	addlw	208
  1722     041A  00F8               	movwf	read_prec_or_width@c
  1723     041B  300A               	movlw	10
  1724     041C  0278               	subwf	read_prec_or_width@c,w
  1725     041D  1C03               	skipc
  1726     041E  2C20               	goto	u1231
  1727     041F  2C21               	goto	u1230
  1728     0420                     u1231:
  1729     0420  2BF4               	goto	l1446
  1730     0421                     u1230:
  1731     0421                     l1452:
  1732                           
  1733                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1170:     return 
      +                          n;
  1734     0421  087A               	movf	read_prec_or_width@n+1,w
  1735     0422  00F7               	movwf	?_read_prec_or_width+1
  1736     0423  0879               	movf	read_prec_or_width@n,w
  1737     0424  00F6               	movwf	?_read_prec_or_width
  1738     0425                     l742:
  1739     0425  0008               	return
  1740     0426                     __end_of_read_prec_or_width:
  1741                           
  1742                           	psect	text5
  1743     01EC                     __ptext5:	
  1744 ;; *************** function ___wmul *****************
  1745 ;; Defined at:
  1746 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\Umul16.c"
  1747 ;; Parameters:    Size  Location     Type
  1748 ;;  multiplier      2    0[COMMON] unsigned int 
  1749 ;;  multiplicand    2    2[COMMON] unsigned int 
  1750 ;; Auto vars:     Size  Location     Type
  1751 ;;  product         2    4[COMMON] unsigned int 
  1752 ;; Return value:  Size  Location     Type
  1753 ;;                  2    0[COMMON] unsigned int 
  1754 ;; Registers used:
  1755 ;;		wreg, status,2, status,0
  1756 ;; Tracked objects:
  1757 ;;		On entry : 0/0
  1758 ;;		On exit  : 0/0
  1759 ;;		Unchanged: 0/0
  1760 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1761 ;;      Params:         4       0       0       0       0
  1762 ;;      Locals:         2       0       0       0       0
  1763 ;;      Temps:          0       0       0       0       0
  1764 ;;      Totals:         6       0       0       0       0
  1765 ;;Total ram usage:        6 bytes
  1766 ;; Hardware stack levels used: 1
  1767 ;; This function calls:
  1768 ;;		Nothing
  1769 ;; This function is called by:
  1770 ;;		_main
  1771 ;;		_read_prec_or_width
  1772 ;; This function uses a non-reentrant model
  1773 ;;
  1774                           
  1775     01EC                     ___wmul:	
  1776                           ;psect for function ___wmul
  1777                           
  1778     01EC                     l1268:	
  1779                           ;incstack = 0
  1780                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1781                           
  1782     01EC  01F4               	clrf	___wmul@product
  1783     01ED  01F5               	clrf	___wmul@product+1
  1784     01EE                     l1270:
  1785     01EE  1C70               	btfss	___wmul@multiplier,0
  1786     01EF  29F1               	goto	u821
  1787     01F0  29F2               	goto	u820
  1788     01F1                     u821:
  1789     01F1  29F8               	goto	l232
  1790     01F2                     u820:
  1791     01F2                     l1272:
  1792     01F2  0872               	movf	___wmul@multiplicand,w
  1793     01F3  07F4               	addwf	___wmul@product,f
  1794     01F4  1803               	skipnc
  1795     01F5  0AF5               	incf	___wmul@product+1,f
  1796     01F6  0873               	movf	___wmul@multiplicand+1,w
  1797     01F7  07F5               	addwf	___wmul@product+1,f
  1798     01F8                     l232:
  1799     01F8  3001               	movlw	1
  1800     01F9                     u835:
  1801     01F9  1003               	clrc
  1802     01FA  0DF2               	rlf	___wmul@multiplicand,f
  1803     01FB  0DF3               	rlf	___wmul@multiplicand+1,f
  1804     01FC  3EFF               	addlw	-1
  1805     01FD  1D03               	skipz
  1806     01FE  29F9               	goto	u835
  1807     01FF                     l1274:
  1808     01FF  3001               	movlw	1
  1809     0200                     u845:
  1810     0200  1003               	clrc
  1811     0201  0CF1               	rrf	___wmul@multiplier+1,f
  1812     0202  0CF0               	rrf	___wmul@multiplier,f
  1813     0203  3EFF               	addlw	-1
  1814     0204  1D03               	skipz
  1815     0205  2A00               	goto	u845
  1816     0206                     l1276:
  1817     0206  0870               	movf	___wmul@multiplier,w
  1818     0207  0471               	iorwf	___wmul@multiplier+1,w
  1819     0208  1D03               	btfss	3,2
  1820     0209  2A0B               	goto	u851
  1821     020A  2A0C               	goto	u850
  1822     020B                     u851:
  1823     020B  29EE               	goto	l1270
  1824     020C                     u850:
  1825     020C                     l1278:
  1826     020C  0875               	movf	___wmul@product+1,w
  1827     020D  00F1               	movwf	?___wmul+1
  1828     020E  0874               	movf	___wmul@product,w
  1829     020F  00F0               	movwf	?___wmul
  1830     0210                     l234:
  1831     0210  0008               	return
  1832     0211                     __end_of___wmul:
  1833                           
  1834                           	psect	text6
  1835     0641                     __ptext6:	
  1836 ;; *************** function _dtoa *****************
  1837 ;; Defined at:
  1838 ;;		line 513 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c"
  1839 ;; Parameters:    Size  Location     Type
  1840 ;;  fp              1    wreg     PTR struct _IO_FILE
  1841 ;;		 -> sprintf@f(11), 
  1842 ;;  d               2    8[BANK0 ] int 
  1843 ;; Auto vars:     Size  Location     Type
  1844 ;;  fp              1   12[BANK0 ] PTR struct _IO_FILE
  1845 ;;		 -> sprintf@f(11), 
  1846 ;;  i               2   17[BANK0 ] int 
  1847 ;;  w               2   13[BANK0 ] int 
  1848 ;;  s               1   16[BANK0 ] unsigned char 
  1849 ;;  p               1   15[BANK0 ] _Bool 
  1850 ;; Return value:  Size  Location     Type
  1851 ;;                  1    wreg      void 
  1852 ;; Registers used:
  1853 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1854 ;; Tracked objects:
  1855 ;;		On entry : 0/0
  1856 ;;		On exit  : 0/0
  1857 ;;		Unchanged: 0/0
  1858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1859 ;;      Params:         0       2       0       0       0
  1860 ;;      Locals:         0       9       0       0       0
  1861 ;;      Temps:          0       0       0       0       0
  1862 ;;      Totals:         0      11       0       0       0
  1863 ;;Total ram usage:       11 bytes
  1864 ;; Hardware stack levels used: 1
  1865 ;; Hardware stack levels required when called: 4
  1866 ;; This function calls:
  1867 ;;		___awdiv
  1868 ;;		___awmod
  1869 ;;		_abs
  1870 ;;		_pad
  1871 ;; This function is called by:
  1872 ;;		_vfpfcnvrt
  1873 ;; This function uses a non-reentrant model
  1874 ;;
  1875                           
  1876     0641                     _dtoa:	
  1877                           ;psect for function _dtoa
  1878                           
  1879                           
  1880                           ;incstack = 0
  1881                           ; Regs used in _dtoa: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1882                           ;dtoa@fp stored from wreg
  1883     0641  1283               	bcf	3,5	;RP0=0, select bank0
  1884     0642  1303               	bcf	3,6	;RP1=0, select bank0
  1885     0643  00AC               	movwf	dtoa@fp
  1886     0644                     l1398:
  1887                           
  1888                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 513: static void 
      +                          dtoa(FILE *fp, vfpf_sint_t d);C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\commo
      +                          n\doprnt.c: 514: {;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c:
      +                           515:  char s;;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 516
      +                          :     int i, w;;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 52
      +                          0:  _Bool p = 1;
  1889     0644  01AF               	clrf	dtoa@p
  1890     0645  0AAF               	incf	dtoa@p,f
  1891     0646                     l1400:
  1892                           
  1893                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 524:     s = d < 
      +                          0 ? 1 : 0;
  1894     0646  1BA9               	btfsc	dtoa@d+1,7
  1895     0647  2E49               	goto	u1141
  1896     0648  2E4B               	goto	u1140
  1897     0649                     u1141:
  1898     0649  3001               	movlw	1
  1899     064A  2E4C               	goto	u1150
  1900     064B                     u1140:
  1901     064B  3000               	movlw	0
  1902     064C                     u1150:
  1903     064C  00B0               	movwf	dtoa@s
  1904                           
  1905                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 535:     w = widt
      +                          h;
  1906     064D  0869               	movf	_width+1,w
  1907     064E  00AE               	movwf	dtoa@w+1
  1908     064F  0868               	movf	_width,w
  1909     0650  00AD               	movwf	dtoa@w
  1910     0651                     l1402:
  1911                           
  1912                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 536:     if (s
  1913     0651  0830               	movf	dtoa@s,w
  1914     0652  1903               	btfsc	3,2
  1915     0653  2E55               	goto	u1161
  1916     0654  2E56               	goto	u1160
  1917     0655                     u1161:
  1918     0655  2E6C               	goto	l723
  1919     0656                     u1160:
  1920     0656                     l1404:
  1921                           
  1922                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 540:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 541:         --w;
  1923     0656  30FF               	movlw	255
  1924     0657  07AD               	addwf	dtoa@w,f
  1925     0658  1803               	skipnc
  1926     0659  0AAE               	incf	dtoa@w+1,f
  1927     065A  30FF               	movlw	255
  1928     065B  07AE               	addwf	dtoa@w+1,f
  1929     065C                     l1406:
  1930                           
  1931                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 542:   s = s ? '-
      +                          ' : '+';
  1932     065C  0830               	movf	dtoa@s,w
  1933     065D  1D03               	btfss	3,2
  1934     065E  2E60               	goto	u1171
  1935     065F  2E61               	goto	u1170
  1936     0660                     u1171:
  1937     0660  2E66               	goto	l1410
  1938     0661                     u1170:
  1939     0661                     l1408:
  1940     0661  302B               	movlw	43
  1941     0662  00AA               	movwf	_dtoa$639
  1942     0663  3000               	movlw	0
  1943     0664  00AB               	movwf	_dtoa$639+1
  1944     0665  2E6A               	goto	l727
  1945     0666                     l1410:
  1946     0666  302D               	movlw	45
  1947     0667  00AA               	movwf	_dtoa$639
  1948     0668  3000               	movlw	0
  1949     0669  00AB               	movwf	_dtoa$639+1
  1950     066A                     l727:
  1951     066A  082A               	movf	_dtoa$639,w
  1952     066B  00B0               	movwf	dtoa@s
  1953     066C                     l723:	
  1954                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 543:     }
  1955                           
  1956                           
  1957                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 552:     i = size
      +                          of(dbuf) - 1;
  1958     066C  301F               	movlw	31
  1959     066D  00B1               	movwf	dtoa@i
  1960     066E  3000               	movlw	0
  1961     066F  00B2               	movwf	dtoa@i+1
  1962     0670                     l1412:
  1963                           
  1964                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 553:     dbuf[i] 
      +                          = '\0';
  1965     0670  1683               	bsf	3,5	;RP0=1, select bank1
  1966     0671  1303               	bcf	3,6	;RP1=0, select bank1
  1967     0672  01BF               	clrf	(_dbuf^(0+128)+31)
  1968                           
  1969                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 554:     while (!
      +                          (i < 1) && (d != 0
  1970     0673  2EB3               	goto	l1424
  1971     0674                     l1414:
  1972                           
  1973                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 563:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 564:         --i;
  1974     0674  30FF               	movlw	255
  1975     0675  07B1               	addwf	dtoa@i,f
  1976     0676  1803               	skipnc
  1977     0677  0AB2               	incf	dtoa@i+1,f
  1978     0678  30FF               	movlw	255
  1979     0679  07B2               	addwf	dtoa@i+1,f
  1980     067A                     l1416:
  1981                           
  1982                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 565:         dbuf
      +                          [i] = (char)((int)'0' + abs(d % 10));
  1983     067A  0831               	movf	dtoa@i,w
  1984     067B  3EA0               	addlw	(low (_dbuf| 0))& (0+255)
  1985     067C  0084               	movwf	4
  1986     067D  300A               	movlw	10
  1987     067E  00F0               	movwf	___awmod@divisor
  1988     067F  3000               	movlw	0
  1989     0680  00F1               	movwf	___awmod@divisor+1
  1990     0681  0829               	movf	dtoa@d+1,w
  1991     0682  00F3               	movwf	___awmod@dividend+1
  1992     0683  0828               	movf	dtoa@d,w
  1993     0684  00F2               	movwf	___awmod@dividend
  1994     0685  120A  118A  2426  120A  118A  	fcall	___awmod
  1995     068A  0871               	movf	?___awmod+1,w
  1996     068B  00F7               	movwf	abs@a+1
  1997     068C  0870               	movf	?___awmod,w
  1998     068D  00F6               	movwf	abs@a
  1999     068E  120A  118A  212B  120A  118A  	fcall	_abs
  2000     0693  0876               	movf	?_abs,w
  2001     0694  3E30               	addlw	48
  2002     0695  1383               	bcf	3,7	;select IRP bank1
  2003     0696  0080               	movwf	0
  2004     0697                     l1418:
  2005                           
  2006                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 569:   p = 0;
  2007     0697  1283               	bcf	3,5	;RP0=0, select bank0
  2008     0698  1303               	bcf	3,6	;RP1=0, select bank0
  2009     0699  01AF               	clrf	dtoa@p
  2010     069A                     l1420:
  2011                           
  2012                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 571:         --w;
  2013     069A  30FF               	movlw	255
  2014     069B  07AD               	addwf	dtoa@w,f
  2015     069C  1803               	skipnc
  2016     069D  0AAE               	incf	dtoa@w+1,f
  2017     069E  30FF               	movlw	255
  2018     069F  07AE               	addwf	dtoa@w+1,f
  2019     06A0                     l1422:
  2020                           
  2021                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 572:         d = 
      +                          d / 10;
  2022     06A0  300A               	movlw	10
  2023     06A1  00F0               	movwf	___awdiv@divisor
  2024     06A2  3000               	movlw	0
  2025     06A3  00F1               	movwf	___awdiv@divisor+1
  2026     06A4  0829               	movf	dtoa@d+1,w
  2027     06A5  00F3               	movwf	___awdiv@dividend+1
  2028     06A6  0828               	movf	dtoa@d,w
  2029     06A7  00F2               	movwf	___awdiv@dividend
  2030     06A8  120A  118A  2543  120A  118A  	fcall	___awdiv
  2031     06AD  0871               	movf	?___awdiv+1,w
  2032     06AE  1283               	bcf	3,5	;RP0=0, select bank0
  2033     06AF  1303               	bcf	3,6	;RP1=0, select bank0
  2034     06B0  00A9               	movwf	dtoa@d+1
  2035     06B1  0870               	movf	?___awdiv,w
  2036     06B2  00A8               	movwf	dtoa@d
  2037     06B3                     l1424:
  2038                           
  2039                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 554:     while (!
      +                          (i < 1) && (d != 0
  2040     06B3  1283               	bcf	3,5	;RP0=0, select bank0
  2041     06B4  0832               	movf	dtoa@i+1,w
  2042     06B5  3A80               	xorlw	128
  2043     06B6  00FF               	movwf	btemp+1
  2044     06B7  3080               	movlw	128
  2045     06B8  027F               	subwf	btemp+1,w
  2046     06B9  1D03               	skipz
  2047     06BA  2EBD               	goto	u1185
  2048     06BB  3001               	movlw	1
  2049     06BC  0231               	subwf	dtoa@i,w
  2050     06BD                     u1185:
  2051     06BD  1C03               	skipc
  2052     06BE  2EC0               	goto	u1181
  2053     06BF  2EC1               	goto	u1180
  2054     06C0                     u1181:
  2055     06C0  2ECE               	goto	l1430
  2056     06C1                     u1180:
  2057     06C1                     l1426:
  2058     06C1  1283               	bcf	3,5	;RP0=0, select bank0
  2059     06C2  1303               	bcf	3,6	;RP1=0, select bank0
  2060     06C3  0828               	movf	dtoa@d,w
  2061     06C4  0429               	iorwf	dtoa@d+1,w
  2062     06C5  1D03               	btfss	3,2
  2063     06C6  2EC8               	goto	u1191
  2064     06C7  2EC9               	goto	u1190
  2065     06C8                     u1191:
  2066     06C8  2E74               	goto	l1414
  2067     06C9                     u1190:
  2068     06C9                     l1428:
  2069     06C9  082F               	movf	dtoa@p,w
  2070     06CA  1D03               	btfss	3,2
  2071     06CB  2ECD               	goto	u1201
  2072     06CC  2ECE               	goto	u1200
  2073     06CD                     u1201:
  2074     06CD  2E74               	goto	l1414
  2075     06CE                     u1200:
  2076     06CE                     l1430:
  2077                           
  2078                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 576:     if (s !=
      +                           0) {
  2079     06CE  1283               	bcf	3,5	;RP0=0, select bank0
  2080     06CF  1303               	bcf	3,6	;RP1=0, select bank0
  2081     06D0  0830               	movf	dtoa@s,w
  2082     06D1  1903               	btfsc	3,2
  2083     06D2  2ED4               	goto	u1211
  2084     06D3  2ED5               	goto	u1210
  2085     06D4                     u1211:
  2086     06D4  2EE1               	goto	l1436
  2087     06D5                     u1210:
  2088     06D5                     l1432:
  2089                           
  2090                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 577:         --i;
  2091     06D5  30FF               	movlw	255
  2092     06D6  07B1               	addwf	dtoa@i,f
  2093     06D7  1803               	skipnc
  2094     06D8  0AB2               	incf	dtoa@i+1,f
  2095     06D9  30FF               	movlw	255
  2096     06DA  07B2               	addwf	dtoa@i+1,f
  2097     06DB                     l1434:
  2098                           
  2099                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 578:         dbuf
      +                          [i] = s;
  2100     06DB  0831               	movf	dtoa@i,w
  2101     06DC  3EA0               	addlw	(low (_dbuf| 0))& (0+255)
  2102     06DD  0084               	movwf	4
  2103     06DE  0830               	movf	dtoa@s,w
  2104     06DF  1383               	bcf	3,7	;select IRP bank1
  2105     06E0  0080               	movwf	0
  2106     06E1                     l1436:
  2107                           
  2108                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 582:     return (
      +                          void) pad(fp, &dbuf[i], w);
  2109     06E1  0831               	movf	dtoa@i,w
  2110     06E2  3EA0               	addlw	(low (_dbuf| 0))& (0+255)
  2111     06E3  00FB               	movwf	pad@buf
  2112     06E4  082E               	movf	dtoa@w+1,w
  2113     06E5  00FD               	movwf	pad@p+1
  2114     06E6  082D               	movf	dtoa@w,w
  2115     06E7  00FC               	movwf	pad@p
  2116     06E8  082C               	movf	dtoa@fp,w
  2117     06E9  120A  118A  232C  120A  118A  	fcall	_pad
  2118     06EE                     l734:
  2119     06EE  0008               	return
  2120     06EF                     __end_of_dtoa:
  2121                           
  2122                           	psect	text7
  2123     032C                     __ptext7:	
  2124 ;; *************** function _pad *****************
  2125 ;; Defined at:
  2126 ;;		line 193 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c"
  2127 ;; Parameters:    Size  Location     Type
  2128 ;;  fp              1    wreg     PTR struct _IO_FILE
  2129 ;;		 -> sprintf@f(11), 
  2130 ;;  buf             1   11[COMMON] PTR unsigned char 
  2131 ;;		 -> dbuf(32), 
  2132 ;;  p               2   12[COMMON] int 
  2133 ;; Auto vars:     Size  Location     Type
  2134 ;;  fp              1    7[BANK0 ] PTR struct _IO_FILE
  2135 ;;		 -> sprintf@f(11), 
  2136 ;;  i               2    5[BANK0 ] int 
  2137 ;; Return value:  Size  Location     Type
  2138 ;;                  1    wreg      void 
  2139 ;; Registers used:
  2140 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2141 ;; Tracked objects:
  2142 ;;		On entry : 0/0
  2143 ;;		On exit  : 0/0
  2144 ;;		Unchanged: 0/0
  2145 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2146 ;;      Params:         3       0       0       0       0
  2147 ;;      Locals:         0       3       0       0       0
  2148 ;;      Temps:          0       1       0       0       0
  2149 ;;      Totals:         3       4       0       0       0
  2150 ;;Total ram usage:        7 bytes
  2151 ;; Hardware stack levels used: 1
  2152 ;; Hardware stack levels required when called: 3
  2153 ;; This function calls:
  2154 ;;		_fputc
  2155 ;;		_fputs
  2156 ;; This function is called by:
  2157 ;;		_dtoa
  2158 ;; This function uses a non-reentrant model
  2159 ;;
  2160                           
  2161     032C                     _pad:	
  2162                           ;psect for function _pad
  2163                           
  2164                           
  2165                           ;incstack = 0
  2166                           ; Regs used in _pad: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2167                           ;pad@fp stored from wreg
  2168     032C  1283               	bcf	3,5	;RP0=0, select bank0
  2169     032D  1303               	bcf	3,6	;RP1=0, select bank0
  2170     032E  00A7               	movwf	pad@fp
  2171     032F                     l1364:
  2172                           
  2173                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 193: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\com
      +                          mon\doprnt.c: 194: {;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.
      +                          c: 195:     int i;;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c:
      +                           199:     if (flags & (1 << 0)) {
  2174     032F  1C6C               	btfss	_flags,0
  2175     0330  2B32               	goto	u1051
  2176     0331  2B33               	goto	u1050
  2177     0332                     u1051:
  2178     0332  2B3B               	goto	l1368
  2179     0333                     u1050:
  2180     0333                     l1366:
  2181                           
  2182                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 200:         fput
      +                          s((const char *)buf, fp);
  2183     0333  0827               	movf	pad@fp,w
  2184     0334  00F8               	movwf	fputs@fp
  2185     0335  087B               	movf	pad@buf,w
  2186     0336  120A  118A  2211  120A  118A  	fcall	_fputs
  2187     033B                     l1368:
  2188                           
  2189                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 205:  if (p < 0) 
      +                          {
  2190     033B  1FFD               	btfss	pad@p+1,7
  2191     033C  2B3E               	goto	u1061
  2192     033D  2B3F               	goto	u1060
  2193     033E                     u1061:
  2194     033E  2B41               	goto	l715
  2195     033F                     u1060:
  2196     033F                     l1370:
  2197                           
  2198                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 206:   p = 0;
  2199     033F  01FC               	clrf	pad@p
  2200     0340  01FD               	clrf	pad@p+1
  2201     0341                     l715:	
  2202                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 207:  }
  2203                           
  2204                           
  2205                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 208:     i = 0;
  2206     0341  1283               	bcf	3,5	;RP0=0, select bank0
  2207     0342  1303               	bcf	3,6	;RP1=0, select bank0
  2208     0343  01A5               	clrf	pad@i
  2209     0344  01A6               	clrf	pad@i+1
  2210                           
  2211                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
  2212     0345  2B5B               	goto	l1376
  2213     0346                     l1372:
  2214                           
  2215                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 210:         fput
      +                          c(' ', fp);
  2216     0346  3020               	movlw	32
  2217     0347  00F0               	movwf	fputc@c
  2218     0348  3000               	movlw	0
  2219     0349  00F1               	movwf	fputc@c+1
  2220     034A  1283               	bcf	3,5	;RP0=0, select bank0
  2221     034B  1303               	bcf	3,6	;RP1=0, select bank0
  2222     034C  0827               	movf	pad@fp,w
  2223     034D  00F2               	movwf	fputc@fp
  2224     034E  120A  118A  2378  120A  118A  	fcall	_fputc
  2225     0353                     l1374:
  2226                           
  2227                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 211:         ++i;
  2228     0353  3001               	movlw	1
  2229     0354  1283               	bcf	3,5	;RP0=0, select bank0
  2230     0355  1303               	bcf	3,6	;RP1=0, select bank0
  2231     0356  07A5               	addwf	pad@i,f
  2232     0357  1803               	skipnc
  2233     0358  0AA6               	incf	pad@i+1,f
  2234     0359  3000               	movlw	0
  2235     035A  07A6               	addwf	pad@i+1,f
  2236     035B                     l1376:
  2237                           
  2238                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
  2239     035B  0826               	movf	pad@i+1,w
  2240     035C  3A80               	xorlw	128
  2241     035D  00A4               	movwf	??_pad
  2242     035E  087D               	movf	pad@p+1,w
  2243     035F  3A80               	xorlw	128
  2244     0360  0224               	subwf	??_pad,w
  2245     0361  1D03               	skipz
  2246     0362  2B65               	goto	u1075
  2247     0363  087C               	movf	pad@p,w
  2248     0364  0225               	subwf	pad@i,w
  2249     0365                     u1075:
  2250     0365  1C03               	skipc
  2251     0366  2B68               	goto	u1071
  2252     0367  2B69               	goto	u1070
  2253     0368                     u1071:
  2254     0368  2B46               	goto	l1372
  2255     0369                     u1070:
  2256     0369                     l718:
  2257                           
  2258                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 216:     if (!(fl
      +                          ags & (1 << 0))) {
  2259     0369  1283               	bcf	3,5	;RP0=0, select bank0
  2260     036A  1303               	bcf	3,6	;RP1=0, select bank0
  2261     036B  186C               	btfsc	_flags,0
  2262     036C  2B6E               	goto	u1081
  2263     036D  2B6F               	goto	u1080
  2264     036E                     u1081:
  2265     036E  2B77               	goto	l720
  2266     036F                     u1080:
  2267     036F                     l1378:
  2268                           
  2269                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 218:         fput
      +                          s((const char *)buf, fp);
  2270     036F  0827               	movf	pad@fp,w
  2271     0370  00F8               	movwf	fputs@fp
  2272     0371  087B               	movf	pad@buf,w
  2273     0372  120A  118A  2211  120A  118A  	fcall	_fputs
  2274     0377                     l720:
  2275     0377  0008               	return
  2276     0378                     __end_of_pad:
  2277                           
  2278                           	psect	text8
  2279     0211                     __ptext8:	
  2280 ;; *************** function _fputs *****************
  2281 ;; Defined at:
  2282 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\nf_fputs.c"
  2283 ;; Parameters:    Size  Location     Type
  2284 ;;  s               1    wreg     PTR const unsigned char 
  2285 ;;		 -> dbuf(32), 
  2286 ;;  fp              1    8[COMMON] PTR struct _IO_FILE
  2287 ;;		 -> sprintf@f(11), 
  2288 ;; Auto vars:     Size  Location     Type
  2289 ;;  s               1    3[BANK0 ] PTR const unsigned char 
  2290 ;;		 -> dbuf(32), 
  2291 ;;  i               2    1[BANK0 ] int 
  2292 ;;  c               1    0[BANK0 ] unsigned char 
  2293 ;; Return value:  Size  Location     Type
  2294 ;;                  2    8[COMMON] int 
  2295 ;; Registers used:
  2296 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2297 ;; Tracked objects:
  2298 ;;		On entry : 0/0
  2299 ;;		On exit  : 0/0
  2300 ;;		Unchanged: 0/0
  2301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2302 ;;      Params:         1       0       0       0       0
  2303 ;;      Locals:         0       4       0       0       0
  2304 ;;      Temps:          2       0       0       0       0
  2305 ;;      Totals:         3       4       0       0       0
  2306 ;;Total ram usage:        7 bytes
  2307 ;; Hardware stack levels used: 1
  2308 ;; Hardware stack levels required when called: 2
  2309 ;; This function calls:
  2310 ;;		_fputc
  2311 ;; This function is called by:
  2312 ;;		_pad
  2313 ;; This function uses a non-reentrant model
  2314 ;;
  2315                           
  2316     0211                     _fputs:	
  2317                           ;psect for function _fputs
  2318                           
  2319                           
  2320                           ;incstack = 0
  2321                           ; Regs used in _fputs: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2322                           ;fputs@s stored from wreg
  2323     0211  1283               	bcf	3,5	;RP0=0, select bank0
  2324     0212  1303               	bcf	3,6	;RP1=0, select bank0
  2325     0213  00A3               	movwf	fputs@s
  2326     0214                     l1260:
  2327     0214  01A1               	clrf	fputs@i
  2328     0215  01A2               	clrf	fputs@i+1
  2329     0216  2A2D               	goto	l1266
  2330     0217                     l1262:
  2331     0217  0820               	movf	fputs@c,w
  2332     0218  00F9               	movwf	??_fputs
  2333     0219  01FA               	clrf	??_fputs+1
  2334     021A  0879               	movf	??_fputs,w
  2335     021B  00F0               	movwf	fputc@c
  2336     021C  087A               	movf	??_fputs+1,w
  2337     021D  00F1               	movwf	fputc@c+1
  2338     021E  0878               	movf	fputs@fp,w
  2339     021F  00F2               	movwf	fputc@fp
  2340     0220  120A  118A  2378  120A  118A  	fcall	_fputc
  2341     0225                     l1264:
  2342     0225  3001               	movlw	1
  2343     0226  1283               	bcf	3,5	;RP0=0, select bank0
  2344     0227  1303               	bcf	3,6	;RP1=0, select bank0
  2345     0228  07A1               	addwf	fputs@i,f
  2346     0229  1803               	skipnc
  2347     022A  0AA2               	incf	fputs@i+1,f
  2348     022B  3000               	movlw	0
  2349     022C  07A2               	addwf	fputs@i+1,f
  2350     022D                     l1266:
  2351     022D  0821               	movf	fputs@i,w
  2352     022E  0723               	addwf	fputs@s,w
  2353     022F  00F9               	movwf	??_fputs
  2354     0230  0879               	movf	??_fputs,w
  2355     0231  0084               	movwf	4
  2356     0232  1383               	bcf	3,7	;select IRP bank0
  2357     0233  0800               	movf	0,w
  2358     0234  00A0               	movwf	fputs@c
  2359     0235  0820               	movf	fputs@c,w
  2360     0236  1D03               	btfss	3,2
  2361     0237  2A39               	goto	u811
  2362     0238  2A3A               	goto	u810
  2363     0239                     u811:
  2364     0239  2A17               	goto	l1262
  2365     023A                     u810:
  2366     023A                     l783:
  2367     023A  0008               	return
  2368     023B                     __end_of_fputs:
  2369                           
  2370                           	psect	text9
  2371     0378                     __ptext9:	
  2372 ;; *************** function _fputc *****************
  2373 ;; Defined at:
  2374 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\nf_fputc.c"
  2375 ;; Parameters:    Size  Location     Type
  2376 ;;  c               2    0[COMMON] int 
  2377 ;;  fp              1    2[COMMON] PTR struct _IO_FILE
  2378 ;;		 -> sprintf@f(11), 
  2379 ;; Auto vars:     Size  Location     Type
  2380 ;;		None
  2381 ;; Return value:  Size  Location     Type
  2382 ;;                  2    0[COMMON] int 
  2383 ;; Registers used:
  2384 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2385 ;; Tracked objects:
  2386 ;;		On entry : 0/0
  2387 ;;		On exit  : 0/0
  2388 ;;		Unchanged: 0/0
  2389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2390 ;;      Params:         3       0       0       0       0
  2391 ;;      Locals:         0       0       0       0       0
  2392 ;;      Temps:          5       0       0       0       0
  2393 ;;      Totals:         8       0       0       0       0
  2394 ;;Total ram usage:        8 bytes
  2395 ;; Hardware stack levels used: 1
  2396 ;; Hardware stack levels required when called: 1
  2397 ;; This function calls:
  2398 ;;		_putch
  2399 ;; This function is called by:
  2400 ;;		_pad
  2401 ;;		_vfpfcnvrt
  2402 ;;		_fputs
  2403 ;; This function uses a non-reentrant model
  2404 ;;
  2405                           
  2406     0378                     _fputc:	
  2407                           ;psect for function _fputc
  2408                           
  2409     0378                     l1246:	
  2410                           ;incstack = 0
  2411                           ; Regs used in _fputc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2412                           
  2413     0378  0872               	movf	fputc@fp,w
  2414     0379  1903               	btfsc	3,2
  2415     037A  2B7C               	goto	u771
  2416     037B  2B7D               	goto	u770
  2417     037C                     u771:
  2418     037C  2B82               	goto	l1250
  2419     037D                     u770:
  2420     037D                     l1248:
  2421     037D  0872               	movf	fputc@fp,w
  2422     037E  1D03               	btfss	3,2
  2423     037F  2B81               	goto	u781
  2424     0380  2B82               	goto	u780
  2425     0381                     u781:
  2426     0381  2B89               	goto	l1252
  2427     0382                     u780:
  2428     0382                     l1250:
  2429     0382  0870               	movf	fputc@c,w
  2430     0383  120A  118A  2113  120A  118A  	fcall	_putch
  2431     0388  2BCD               	goto	l775
  2432     0389                     l1252:
  2433     0389  0872               	movf	fputc@fp,w
  2434     038A  3E09               	addlw	9
  2435     038B  0084               	movwf	4
  2436     038C  1383               	bcf	3,7	;select IRP bank0
  2437     038D  0800               	movf	0,w
  2438     038E  00F3               	movwf	??_fputc
  2439     038F  0A84               	incf	4,f
  2440     0390  0800               	movf	0,w
  2441     0391  00F4               	movwf	??_fputc+1
  2442     0392  0873               	movf	??_fputc,w
  2443     0393  0474               	iorwf	??_fputc+1,w
  2444     0394  1903               	btfsc	3,2
  2445     0395  2B97               	goto	u791
  2446     0396  2B98               	goto	u790
  2447     0397                     u791:
  2448     0397  2BB6               	goto	l1256
  2449     0398                     u790:
  2450     0398                     l1254:
  2451     0398  0872               	movf	fputc@fp,w
  2452     0399  3E09               	addlw	9
  2453     039A  0084               	movwf	4
  2454     039B  0800               	movf	0,w
  2455     039C  00F3               	movwf	??_fputc
  2456     039D  0A84               	incf	4,f
  2457     039E  0800               	movf	0,w
  2458     039F  00F4               	movwf	??_fputc+1
  2459     03A0  0872               	movf	fputc@fp,w
  2460     03A1  3E02               	addlw	2
  2461     03A2  0084               	movwf	4
  2462     03A3  0800               	movf	0,w
  2463     03A4  00F5               	movwf	??_fputc+2
  2464     03A5  0A84               	incf	4,f
  2465     03A6  0800               	movf	0,w
  2466     03A7  00F6               	movwf	??_fputc+3
  2467     03A8  0876               	movf	??_fputc+3,w
  2468     03A9  3A80               	xorlw	128
  2469     03AA  00F7               	movwf	??_fputc+4
  2470     03AB  0874               	movf	??_fputc+1,w
  2471     03AC  3A80               	xorlw	128
  2472     03AD  0277               	subwf	??_fputc+4,w
  2473     03AE  1D03               	skipz
  2474     03AF  2BB2               	goto	u805
  2475     03B0  0873               	movf	??_fputc,w
  2476     03B1  0275               	subwf	??_fputc+2,w
  2477     03B2                     u805:
  2478     03B2  1803               	skipnc
  2479     03B3  2BB5               	goto	u801
  2480     03B4  2BB6               	goto	u800
  2481     03B5                     u801:
  2482     03B5  2BCD               	goto	l775
  2483     03B6                     u800:
  2484     03B6                     l1256:
  2485     03B6  0872               	movf	fputc@fp,w
  2486     03B7  3E02               	addlw	2
  2487     03B8  0084               	movwf	4
  2488     03B9  1383               	bcf	3,7	;select IRP bank0
  2489     03BA  0800               	movf	0,w
  2490     03BB  00F3               	movwf	??_fputc
  2491     03BC  0872               	movf	fputc@fp,w
  2492     03BD  0084               	movwf	4
  2493     03BE  0800               	movf	0,w
  2494     03BF  0773               	addwf	??_fputc,w
  2495     03C0  00F4               	movwf	??_fputc+1
  2496     03C1  0874               	movf	??_fputc+1,w
  2497     03C2  0084               	movwf	4
  2498     03C3  0870               	movf	fputc@c,w
  2499     03C4  0080               	movwf	0
  2500     03C5  0872               	movf	fputc@fp,w
  2501     03C6  3E02               	addlw	2
  2502     03C7  0084               	movwf	4
  2503     03C8  3001               	movlw	1
  2504     03C9  0780               	addwf	0,f
  2505     03CA  0A84               	incf	4,f
  2506     03CB  1803               	skipnc
  2507     03CC  0A80               	incf	0,f
  2508     03CD                     l775:
  2509     03CD  0008               	return
  2510     03CE                     __end_of_fputc:
  2511                           
  2512                           	psect	text10
  2513     0113                     __ptext10:	
  2514 ;; *************** function _putch *****************
  2515 ;; Defined at:
  2516 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\putch.c"
  2517 ;; Parameters:    Size  Location     Type
  2518 ;;  c               1    wreg     unsigned char 
  2519 ;; Auto vars:     Size  Location     Type
  2520 ;;  c               1    0[COMMON] unsigned char 
  2521 ;; Return value:  Size  Location     Type
  2522 ;;                  1    wreg      void 
  2523 ;; Registers used:
  2524 ;;		wreg
  2525 ;; Tracked objects:
  2526 ;;		On entry : 0/0
  2527 ;;		On exit  : 0/0
  2528 ;;		Unchanged: 0/0
  2529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2530 ;;      Params:         0       0       0       0       0
  2531 ;;      Locals:         0       0       0       0       0
  2532 ;;      Temps:          0       0       0       0       0
  2533 ;;      Totals:         0       0       0       0       0
  2534 ;;Total ram usage:        0 bytes
  2535 ;; Hardware stack levels used: 1
  2536 ;; This function calls:
  2537 ;;		Nothing
  2538 ;; This function is called by:
  2539 ;;		_fputc
  2540 ;; This function uses a non-reentrant model
  2541 ;;
  2542                           
  2543     0113                     _putch:	
  2544                           ;psect for function _putch
  2545                           
  2546     0113                     l786:	
  2547                           ;incstack = 0
  2548                           ; Regs used in _putch: [wreg]
  2549                           
  2550     0113  0008               	return
  2551     0114                     __end_of_putch:
  2552                           
  2553                           	psect	text11
  2554     012B                     __ptext11:	
  2555 ;; *************** function _abs *****************
  2556 ;; Defined at:
  2557 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\abs.c"
  2558 ;; Parameters:    Size  Location     Type
  2559 ;;  a               2    6[COMMON] int 
  2560 ;; Auto vars:     Size  Location     Type
  2561 ;;		None
  2562 ;; Return value:  Size  Location     Type
  2563 ;;                  2    6[COMMON] int 
  2564 ;; Registers used:
  2565 ;;		wreg, status,2, status,0
  2566 ;; Tracked objects:
  2567 ;;		On entry : 0/0
  2568 ;;		On exit  : 0/0
  2569 ;;		Unchanged: 0/0
  2570 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2571 ;;      Params:         2       0       0       0       0
  2572 ;;      Locals:         0       0       0       0       0
  2573 ;;      Temps:          2       0       0       0       0
  2574 ;;      Totals:         4       0       0       0       0
  2575 ;;Total ram usage:        4 bytes
  2576 ;; Hardware stack levels used: 1
  2577 ;; This function calls:
  2578 ;;		Nothing
  2579 ;; This function is called by:
  2580 ;;		_dtoa
  2581 ;; This function uses a non-reentrant model
  2582 ;;
  2583                           
  2584     012B                     _abs:	
  2585                           ;psect for function _abs
  2586                           
  2587     012B                     l1380:	
  2588                           ;incstack = 0
  2589                           ; Regs used in _abs: [wreg+status,2+status,0]
  2590                           
  2591     012B  1BF7               	btfsc	abs@a+1,7
  2592     012C  292E               	goto	u1091
  2593     012D  292F               	goto	u1090
  2594     012E                     u1091:
  2595     012E  2930               	goto	l1384
  2596     012F                     u1090:
  2597     012F                     l1382:
  2598     012F  293B               	goto	l763
  2599     0130                     l1384:
  2600     0130  0976               	comf	abs@a,w
  2601     0131  00F8               	movwf	??_abs
  2602     0132  0977               	comf	abs@a+1,w
  2603     0133  00F9               	movwf	??_abs+1
  2604     0134  0AF8               	incf	??_abs,f
  2605     0135  1903               	skipnz
  2606     0136  0AF9               	incf	??_abs+1,f
  2607     0137  0878               	movf	??_abs,w
  2608     0138  00F6               	movwf	?_abs
  2609     0139  0879               	movf	??_abs+1,w
  2610     013A  00F7               	movwf	?_abs+1
  2611     013B                     l763:
  2612     013B  0008               	return
  2613     013C                     __end_of_abs:
  2614                           
  2615                           	psect	text12
  2616     0426                     __ptext12:	
  2617 ;; *************** function ___awmod *****************
  2618 ;; Defined at:
  2619 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\awmod.c"
  2620 ;; Parameters:    Size  Location     Type
  2621 ;;  divisor         2    0[COMMON] int 
  2622 ;;  dividend        2    2[COMMON] int 
  2623 ;; Auto vars:     Size  Location     Type
  2624 ;;  sign            1    5[COMMON] unsigned char 
  2625 ;;  counter         1    4[COMMON] unsigned char 
  2626 ;; Return value:  Size  Location     Type
  2627 ;;                  2    0[COMMON] int 
  2628 ;; Registers used:
  2629 ;;		wreg, status,2, status,0, btemp+1
  2630 ;; Tracked objects:
  2631 ;;		On entry : 0/0
  2632 ;;		On exit  : 0/0
  2633 ;;		Unchanged: 0/0
  2634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2635 ;;      Params:         4       0       0       0       0
  2636 ;;      Locals:         2       0       0       0       0
  2637 ;;      Temps:          0       0       0       0       0
  2638 ;;      Totals:         6       0       0       0       0
  2639 ;;Total ram usage:        6 bytes
  2640 ;; Hardware stack levels used: 1
  2641 ;; This function calls:
  2642 ;;		Nothing
  2643 ;; This function is called by:
  2644 ;;		_dtoa
  2645 ;; This function uses a non-reentrant model
  2646 ;;
  2647                           
  2648     0426                     ___awmod:	
  2649                           ;psect for function ___awmod
  2650                           
  2651     0426                     l1326:	
  2652                           ;incstack = 0
  2653                           ; Regs used in ___awmod: [wreg+status,2+status,0+btemp+1]
  2654                           
  2655     0426  01F5               	clrf	___awmod@sign
  2656     0427                     l1328:
  2657     0427  1FF3               	btfss	___awmod@dividend+1,7
  2658     0428  2C2A               	goto	u961
  2659     0429  2C2B               	goto	u960
  2660     042A                     u961:
  2661     042A  2C32               	goto	l1334
  2662     042B                     u960:
  2663     042B                     l1330:
  2664     042B  09F2               	comf	___awmod@dividend,f
  2665     042C  09F3               	comf	___awmod@dividend+1,f
  2666     042D  0AF2               	incf	___awmod@dividend,f
  2667     042E  1903               	skipnz
  2668     042F  0AF3               	incf	___awmod@dividend+1,f
  2669     0430                     l1332:
  2670     0430  01F5               	clrf	___awmod@sign
  2671     0431  0AF5               	incf	___awmod@sign,f
  2672     0432                     l1334:
  2673     0432  1FF1               	btfss	___awmod@divisor+1,7
  2674     0433  2C35               	goto	u971
  2675     0434  2C36               	goto	u970
  2676     0435                     u971:
  2677     0435  2C3B               	goto	l1338
  2678     0436                     u970:
  2679     0436                     l1336:
  2680     0436  09F0               	comf	___awmod@divisor,f
  2681     0437  09F1               	comf	___awmod@divisor+1,f
  2682     0438  0AF0               	incf	___awmod@divisor,f
  2683     0439  1903               	skipnz
  2684     043A  0AF1               	incf	___awmod@divisor+1,f
  2685     043B                     l1338:
  2686     043B  0870               	movf	___awmod@divisor,w
  2687     043C  0471               	iorwf	___awmod@divisor+1,w
  2688     043D  1903               	btfsc	3,2
  2689     043E  2C40               	goto	u981
  2690     043F  2C41               	goto	u980
  2691     0440                     u981:
  2692     0440  2C70               	goto	l1356
  2693     0441                     u980:
  2694     0441                     l1340:
  2695     0441  01F4               	clrf	___awmod@counter
  2696     0442  0AF4               	incf	___awmod@counter,f
  2697     0443  2C4F               	goto	l1346
  2698     0444                     l1342:
  2699     0444  3001               	movlw	1
  2700     0445                     u995:
  2701     0445  1003               	clrc
  2702     0446  0DF0               	rlf	___awmod@divisor,f
  2703     0447  0DF1               	rlf	___awmod@divisor+1,f
  2704     0448  3EFF               	addlw	-1
  2705     0449  1D03               	skipz
  2706     044A  2C45               	goto	u995
  2707     044B                     l1344:
  2708     044B  3001               	movlw	1
  2709     044C  00FF               	movwf	btemp+1
  2710     044D  087F               	movf	btemp+1,w
  2711     044E  07F4               	addwf	___awmod@counter,f
  2712     044F                     l1346:
  2713     044F  1FF1               	btfss	___awmod@divisor+1,7
  2714     0450  2C52               	goto	u1001
  2715     0451  2C53               	goto	u1000
  2716     0452                     u1001:
  2717     0452  2C44               	goto	l1342
  2718     0453                     u1000:
  2719     0453                     l1348:
  2720     0453  0871               	movf	___awmod@divisor+1,w
  2721     0454  0273               	subwf	___awmod@dividend+1,w
  2722     0455  1D03               	skipz
  2723     0456  2C59               	goto	u1015
  2724     0457  0870               	movf	___awmod@divisor,w
  2725     0458  0272               	subwf	___awmod@dividend,w
  2726     0459                     u1015:
  2727     0459  1C03               	skipc
  2728     045A  2C5C               	goto	u1011
  2729     045B  2C5D               	goto	u1010
  2730     045C                     u1011:
  2731     045C  2C63               	goto	l1352
  2732     045D                     u1010:
  2733     045D                     l1350:
  2734     045D  0870               	movf	___awmod@divisor,w
  2735     045E  02F2               	subwf	___awmod@dividend,f
  2736     045F  0871               	movf	___awmod@divisor+1,w
  2737     0460  1C03               	skipc
  2738     0461  03F3               	decf	___awmod@dividend+1,f
  2739     0462  02F3               	subwf	___awmod@dividend+1,f
  2740     0463                     l1352:
  2741     0463  3001               	movlw	1
  2742     0464                     u1025:
  2743     0464  1003               	clrc
  2744     0465  0CF1               	rrf	___awmod@divisor+1,f
  2745     0466  0CF0               	rrf	___awmod@divisor,f
  2746     0467  3EFF               	addlw	-1
  2747     0468  1D03               	skipz
  2748     0469  2C64               	goto	u1025
  2749     046A                     l1354:
  2750     046A  3001               	movlw	1
  2751     046B  02F4               	subwf	___awmod@counter,f
  2752     046C  1D03               	btfss	3,2
  2753     046D  2C6F               	goto	u1031
  2754     046E  2C70               	goto	u1030
  2755     046F                     u1031:
  2756     046F  2C53               	goto	l1348
  2757     0470                     u1030:
  2758     0470                     l1356:
  2759     0470  0875               	movf	___awmod@sign,w
  2760     0471  1903               	btfsc	3,2
  2761     0472  2C74               	goto	u1041
  2762     0473  2C75               	goto	u1040
  2763     0474                     u1041:
  2764     0474  2C7A               	goto	l1360
  2765     0475                     u1040:
  2766     0475                     l1358:
  2767     0475  09F2               	comf	___awmod@dividend,f
  2768     0476  09F3               	comf	___awmod@dividend+1,f
  2769     0477  0AF2               	incf	___awmod@dividend,f
  2770     0478  1903               	skipnz
  2771     0479  0AF3               	incf	___awmod@dividend+1,f
  2772     047A                     l1360:
  2773     047A  0873               	movf	___awmod@dividend+1,w
  2774     047B  00F1               	movwf	?___awmod+1
  2775     047C  0872               	movf	___awmod@dividend,w
  2776     047D  00F0               	movwf	?___awmod
  2777     047E                     l398:
  2778     047E  0008               	return
  2779     047F                     __end_of___awmod:
  2780                           
  2781                           	psect	text13
  2782     0543                     __ptext13:	
  2783 ;; *************** function ___awdiv *****************
  2784 ;; Defined at:
  2785 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\awdiv.c"
  2786 ;; Parameters:    Size  Location     Type
  2787 ;;  divisor         2    0[COMMON] int 
  2788 ;;  dividend        2    2[COMMON] int 
  2789 ;; Auto vars:     Size  Location     Type
  2790 ;;  quotient        2    6[COMMON] int 
  2791 ;;  sign            1    5[COMMON] unsigned char 
  2792 ;;  counter         1    4[COMMON] unsigned char 
  2793 ;; Return value:  Size  Location     Type
  2794 ;;                  2    0[COMMON] int 
  2795 ;; Registers used:
  2796 ;;		wreg, status,2, status,0, btemp+1
  2797 ;; Tracked objects:
  2798 ;;		On entry : 0/0
  2799 ;;		On exit  : 0/0
  2800 ;;		Unchanged: 0/0
  2801 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2802 ;;      Params:         4       0       0       0       0
  2803 ;;      Locals:         4       0       0       0       0
  2804 ;;      Temps:          0       0       0       0       0
  2805 ;;      Totals:         8       0       0       0       0
  2806 ;;Total ram usage:        8 bytes
  2807 ;; Hardware stack levels used: 1
  2808 ;; This function calls:
  2809 ;;		Nothing
  2810 ;; This function is called by:
  2811 ;;		_dtoa
  2812 ;; This function uses a non-reentrant model
  2813 ;;
  2814                           
  2815     0543                     ___awdiv:	
  2816                           ;psect for function ___awdiv
  2817                           
  2818     0543                     l1282:	
  2819                           ;incstack = 0
  2820                           ; Regs used in ___awdiv: [wreg+status,2+status,0+btemp+1]
  2821                           
  2822     0543  01F5               	clrf	___awdiv@sign
  2823     0544                     l1284:
  2824     0544  1FF1               	btfss	___awdiv@divisor+1,7
  2825     0545  2D47               	goto	u861
  2826     0546  2D48               	goto	u860
  2827     0547                     u861:
  2828     0547  2D4F               	goto	l1290
  2829     0548                     u860:
  2830     0548                     l1286:
  2831     0548  09F0               	comf	___awdiv@divisor,f
  2832     0549  09F1               	comf	___awdiv@divisor+1,f
  2833     054A  0AF0               	incf	___awdiv@divisor,f
  2834     054B  1903               	skipnz
  2835     054C  0AF1               	incf	___awdiv@divisor+1,f
  2836     054D                     l1288:
  2837     054D  01F5               	clrf	___awdiv@sign
  2838     054E  0AF5               	incf	___awdiv@sign,f
  2839     054F                     l1290:
  2840     054F  1FF3               	btfss	___awdiv@dividend+1,7
  2841     0550  2D52               	goto	u871
  2842     0551  2D53               	goto	u870
  2843     0552                     u871:
  2844     0552  2D5C               	goto	l1296
  2845     0553                     u870:
  2846     0553                     l1292:
  2847     0553  09F2               	comf	___awdiv@dividend,f
  2848     0554  09F3               	comf	___awdiv@dividend+1,f
  2849     0555  0AF2               	incf	___awdiv@dividend,f
  2850     0556  1903               	skipnz
  2851     0557  0AF3               	incf	___awdiv@dividend+1,f
  2852     0558                     l1294:
  2853     0558  3001               	movlw	1
  2854     0559  00FF               	movwf	btemp+1
  2855     055A  087F               	movf	btemp+1,w
  2856     055B  06F5               	xorwf	___awdiv@sign,f
  2857     055C                     l1296:
  2858     055C  01F6               	clrf	___awdiv@quotient
  2859     055D  01F7               	clrf	___awdiv@quotient+1
  2860     055E                     l1298:
  2861     055E  0870               	movf	___awdiv@divisor,w
  2862     055F  0471               	iorwf	___awdiv@divisor+1,w
  2863     0560  1903               	btfsc	3,2
  2864     0561  2D63               	goto	u881
  2865     0562  2D64               	goto	u880
  2866     0563                     u881:
  2867     0563  2D9B               	goto	l1318
  2868     0564                     u880:
  2869     0564                     l1300:
  2870     0564  01F4               	clrf	___awdiv@counter
  2871     0565  0AF4               	incf	___awdiv@counter,f
  2872     0566  2D72               	goto	l1306
  2873     0567                     l1302:
  2874     0567  3001               	movlw	1
  2875     0568                     u895:
  2876     0568  1003               	clrc
  2877     0569  0DF0               	rlf	___awdiv@divisor,f
  2878     056A  0DF1               	rlf	___awdiv@divisor+1,f
  2879     056B  3EFF               	addlw	-1
  2880     056C  1D03               	skipz
  2881     056D  2D68               	goto	u895
  2882     056E                     l1304:
  2883     056E  3001               	movlw	1
  2884     056F  00FF               	movwf	btemp+1
  2885     0570  087F               	movf	btemp+1,w
  2886     0571  07F4               	addwf	___awdiv@counter,f
  2887     0572                     l1306:
  2888     0572  1FF1               	btfss	___awdiv@divisor+1,7
  2889     0573  2D75               	goto	u901
  2890     0574  2D76               	goto	u900
  2891     0575                     u901:
  2892     0575  2D67               	goto	l1302
  2893     0576                     u900:
  2894     0576                     l1308:
  2895     0576  3001               	movlw	1
  2896     0577                     u915:
  2897     0577  1003               	clrc
  2898     0578  0DF6               	rlf	___awdiv@quotient,f
  2899     0579  0DF7               	rlf	___awdiv@quotient+1,f
  2900     057A  3EFF               	addlw	-1
  2901     057B  1D03               	skipz
  2902     057C  2D77               	goto	u915
  2903     057D  0871               	movf	___awdiv@divisor+1,w
  2904     057E  0273               	subwf	___awdiv@dividend+1,w
  2905     057F  1D03               	skipz
  2906     0580  2D83               	goto	u925
  2907     0581  0870               	movf	___awdiv@divisor,w
  2908     0582  0272               	subwf	___awdiv@dividend,w
  2909     0583                     u925:
  2910     0583  1C03               	skipc
  2911     0584  2D86               	goto	u921
  2912     0585  2D87               	goto	u920
  2913     0586                     u921:
  2914     0586  2D8E               	goto	l1314
  2915     0587                     u920:
  2916     0587                     l1310:
  2917     0587  0870               	movf	___awdiv@divisor,w
  2918     0588  02F2               	subwf	___awdiv@dividend,f
  2919     0589  0871               	movf	___awdiv@divisor+1,w
  2920     058A  1C03               	skipc
  2921     058B  03F3               	decf	___awdiv@dividend+1,f
  2922     058C  02F3               	subwf	___awdiv@dividend+1,f
  2923     058D                     l1312:
  2924     058D  1476               	bsf	___awdiv@quotient,0
  2925     058E                     l1314:
  2926     058E  3001               	movlw	1
  2927     058F                     u935:
  2928     058F  1003               	clrc
  2929     0590  0CF1               	rrf	___awdiv@divisor+1,f
  2930     0591  0CF0               	rrf	___awdiv@divisor,f
  2931     0592  3EFF               	addlw	-1
  2932     0593  1D03               	skipz
  2933     0594  2D8F               	goto	u935
  2934     0595                     l1316:
  2935     0595  3001               	movlw	1
  2936     0596  02F4               	subwf	___awdiv@counter,f
  2937     0597  1D03               	btfss	3,2
  2938     0598  2D9A               	goto	u941
  2939     0599  2D9B               	goto	u940
  2940     059A                     u941:
  2941     059A  2D76               	goto	l1308
  2942     059B                     u940:
  2943     059B                     l1318:
  2944     059B  0875               	movf	___awdiv@sign,w
  2945     059C  1903               	btfsc	3,2
  2946     059D  2D9F               	goto	u951
  2947     059E  2DA0               	goto	u950
  2948     059F                     u951:
  2949     059F  2DA5               	goto	l1322
  2950     05A0                     u950:
  2951     05A0                     l1320:
  2952     05A0  09F6               	comf	___awdiv@quotient,f
  2953     05A1  09F7               	comf	___awdiv@quotient+1,f
  2954     05A2  0AF6               	incf	___awdiv@quotient,f
  2955     05A3  1903               	skipnz
  2956     05A4  0AF7               	incf	___awdiv@quotient+1,f
  2957     05A5                     l1322:
  2958     05A5  0877               	movf	___awdiv@quotient+1,w
  2959     05A6  00F1               	movwf	?___awdiv+1
  2960     05A7  0876               	movf	___awdiv@quotient,w
  2961     05A8  00F0               	movwf	?___awdiv
  2962     05A9                     l385:
  2963     05A9  0008               	return
  2964     05AA                     __end_of___awdiv:
  2965                           
  2966                           	psect	text14
  2967     04DC                     __ptext14:	
  2968 ;; *************** function _motor *****************
  2969 ;; Defined at:
  2970 ;;		line 162 in file "gsmg_c.c"
  2971 ;; Parameters:    Size  Location     Type
  2972 ;;  sayac           2    0[BANK0 ] int 
  2973 ;;  hiz             2    2[BANK0 ] int 
  2974 ;; Auto vars:     Size  Location     Type
  2975 ;;		None
  2976 ;; Return value:  Size  Location     Type
  2977 ;;                  1    wreg      void 
  2978 ;; Registers used:
  2979 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2980 ;; Tracked objects:
  2981 ;;		On entry : 0/0
  2982 ;;		On exit  : 0/0
  2983 ;;		Unchanged: 0/0
  2984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2985 ;;      Params:         0       4       0       0       0
  2986 ;;      Locals:         0       0       0       0       0
  2987 ;;      Temps:          2       0       0       0       0
  2988 ;;      Totals:         2       4       0       0       0
  2989 ;;Total ram usage:        6 bytes
  2990 ;; Hardware stack levels used: 1
  2991 ;; Hardware stack levels required when called: 3
  2992 ;; This function calls:
  2993 ;;		_Lcd_Set_Cursor
  2994 ;;		_Lcd_Write_String
  2995 ;;		_duty_sag
  2996 ;;		_duty_sol
  2997 ;; This function is called by:
  2998 ;;		_main
  2999 ;; This function uses a non-reentrant model
  3000 ;;
  3001                           
  3002     04DC                     _motor:	
  3003                           ;psect for function _motor
  3004                           
  3005     04DC                     l1594:	
  3006                           ;incstack = 0
  3007                           ; Regs used in _motor: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3008                           
  3009                           
  3010                           ;gsmg_c.c: 164:     if (sayac == 0){
  3011     04DC  1283               	bcf	3,5	;RP0=0, select bank0
  3012     04DD  1303               	bcf	3,6	;RP1=0, select bank0
  3013     04DE  0820               	movf	motor@sayac,w
  3014     04DF  0421               	iorwf	motor@sayac+1,w
  3015     04E0  1D03               	btfss	3,2
  3016     04E1  2CE3               	goto	u1411
  3017     04E2  2CE4               	goto	u1410
  3018     04E3                     u1411:
  3019     04E3  2D0F               	goto	l1604
  3020     04E4                     u1410:
  3021     04E4                     l1596:
  3022                           
  3023                           ;gsmg_c.c: 166:         duty_sag(hiz);
  3024     04E4  0823               	movf	motor@hiz+1,w
  3025     04E5  00F1               	movwf	duty_sag@pwm+1
  3026     04E6  0822               	movf	motor@hiz,w
  3027     04E7  00F0               	movwf	duty_sag@pwm
  3028     04E8  120A  118A  2156  120A  118A  	fcall	_duty_sag
  3029                           
  3030                           ;gsmg_c.c: 167:         duty_sol(0);
  3031     04ED  3000               	movlw	0
  3032     04EE  00F0               	movwf	duty_sol@pwm
  3033     04EF  00F1               	movwf	duty_sol@pwm+1
  3034     04F0  120A  118A  2170  120A  118A  	fcall	_duty_sol
  3035     04F5                     l1598:
  3036                           
  3037                           ;gsmg_c.c: 168:         _delay((unsigned long)((2)*(4000000/4000.0)));
  3038     04F5  3003               	movlw	3
  3039     04F6  00FD               	movwf	??_motor+1
  3040     04F7  3097               	movlw	151
  3041     04F8  00FC               	movwf	??_motor
  3042     04F9                     u1547:
  3043     04F9  0BFC               	decfsz	??_motor,f
  3044     04FA  2CF9               	goto	u1547
  3045     04FB  0BFD               	decfsz	??_motor+1,f
  3046     04FC  2CF9               	goto	u1547
  3047     04FD  2CFE               	nop2
  3048     04FE                     l1600:
  3049                           
  3050                           ;gsmg_c.c: 169:         Lcd_Set_Cursor(2,9);
  3051     04FE  3009               	movlw	9
  3052     04FF  00F4               	movwf	Lcd_Set_Cursor@b
  3053     0500  3002               	movlw	2
  3054     0501  120A  118A  22E6  120A  118A  	fcall	_Lcd_Set_Cursor
  3055     0506                     l1602:
  3056                           
  3057                           ;gsmg_c.c: 170:         Lcd_Write_String("SOL");
  3058     0506  302C               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  3059     0507  00F5               	movwf	Lcd_Write_String@a
  3060     0508  3080               	movlw	128
  3061     0509  00F6               	movwf	Lcd_Write_String@a+1
  3062     050A  120A  118A  22A4  120A  118A  	fcall	_Lcd_Write_String
  3063     050F                     l1604:
  3064                           
  3065                           ;gsmg_c.c: 173:     if (sayac == 1){
  3066     050F  1283               	bcf	3,5	;RP0=0, select bank0
  3067     0510  1303               	bcf	3,6	;RP1=0, select bank0
  3068     0511  0320               	decf	motor@sayac,w
  3069     0512  0421               	iorwf	motor@sayac+1,w
  3070     0513  1D03               	btfss	3,2
  3071     0514  2D16               	goto	u1421
  3072     0515  2D17               	goto	u1420
  3073     0516                     u1421:
  3074     0516  2D42               	goto	l115
  3075     0517                     u1420:
  3076     0517                     l1606:
  3077                           
  3078                           ;gsmg_c.c: 175:         duty_sol(hiz);
  3079     0517  0823               	movf	motor@hiz+1,w
  3080     0518  00F1               	movwf	duty_sol@pwm+1
  3081     0519  0822               	movf	motor@hiz,w
  3082     051A  00F0               	movwf	duty_sol@pwm
  3083     051B  120A  118A  2170  120A  118A  	fcall	_duty_sol
  3084                           
  3085                           ;gsmg_c.c: 176:         duty_sag(0);
  3086     0520  3000               	movlw	0
  3087     0521  00F0               	movwf	duty_sag@pwm
  3088     0522  00F1               	movwf	duty_sag@pwm+1
  3089     0523  120A  118A  2156  120A  118A  	fcall	_duty_sag
  3090     0528                     l1608:
  3091                           
  3092                           ;gsmg_c.c: 177:         _delay((unsigned long)((2)*(4000000/4000.0)));
  3093     0528  3003               	movlw	3
  3094     0529  00FD               	movwf	??_motor+1
  3095     052A  3097               	movlw	151
  3096     052B  00FC               	movwf	??_motor
  3097     052C                     u1557:
  3098     052C  0BFC               	decfsz	??_motor,f
  3099     052D  2D2C               	goto	u1557
  3100     052E  0BFD               	decfsz	??_motor+1,f
  3101     052F  2D2C               	goto	u1557
  3102     0530  2D31               	nop2
  3103     0531                     l1610:
  3104                           
  3105                           ;gsmg_c.c: 178:         Lcd_Set_Cursor(2,9);
  3106     0531  3009               	movlw	9
  3107     0532  00F4               	movwf	Lcd_Set_Cursor@b
  3108     0533  3002               	movlw	2
  3109     0534  120A  118A  22E6  120A  118A  	fcall	_Lcd_Set_Cursor
  3110     0539                     l1612:
  3111                           
  3112                           ;gsmg_c.c: 179:         Lcd_Write_String("SAG");
  3113     0539  3028               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  3114     053A  00F5               	movwf	Lcd_Write_String@a
  3115     053B  3080               	movlw	128
  3116     053C  00F6               	movwf	Lcd_Write_String@a+1
  3117     053D  120A  118A  22A4  120A  118A  	fcall	_Lcd_Write_String
  3118     0542                     l115:
  3119     0542  0008               	return
  3120     0543                     __end_of_motor:
  3121                           
  3122                           	psect	text15
  3123     0170                     __ptext15:	
  3124 ;; *************** function _duty_sol *****************
  3125 ;; Defined at:
  3126 ;;		line 143 in file "gsmg_c.c"
  3127 ;; Parameters:    Size  Location     Type
  3128 ;;  pwm             2    0[COMMON] int 
  3129 ;; Auto vars:     Size  Location     Type
  3130 ;;		None
  3131 ;; Return value:  Size  Location     Type
  3132 ;;                  1    wreg      void 
  3133 ;; Registers used:
  3134 ;;		wreg
  3135 ;; Tracked objects:
  3136 ;;		On entry : 0/0
  3137 ;;		On exit  : 0/0
  3138 ;;		Unchanged: 0/0
  3139 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3140 ;;      Params:         2       0       0       0       0
  3141 ;;      Locals:         0       0       0       0       0
  3142 ;;      Temps:          2       0       0       0       0
  3143 ;;      Totals:         4       0       0       0       0
  3144 ;;Total ram usage:        4 bytes
  3145 ;; Hardware stack levels used: 1
  3146 ;; This function calls:
  3147 ;;		Nothing
  3148 ;; This function is called by:
  3149 ;;		_motor
  3150 ;; This function uses a non-reentrant model
  3151 ;;
  3152                           
  3153     0170                     _duty_sol:	
  3154                           ;psect for function _duty_sol
  3155                           
  3156     0170                     l1560:	
  3157                           ;incstack = 0
  3158                           ; Regs used in _duty_sol: [wreg]
  3159                           
  3160                           
  3161                           ;gsmg_c.c: 145:     CCP2X = pwm & 2;
  3162     0170  1283               	bcf	3,5	;RP0=0, select bank0
  3163     0171  1303               	bcf	3,6	;RP1=0, select bank0
  3164     0172  129D               	bcf	29,5	;volatile
  3165                           
  3166                           ;gsmg_c.c: 146:     CCP2Y = pwm & 1;
  3167     0173  1870               	btfsc	duty_sol@pwm,0
  3168     0174  2976               	goto	u1381
  3169     0175  297A               	goto	u1380
  3170     0176                     u1381:
  3171     0176  1283               	bcf	3,5	;RP0=0, select bank0
  3172     0177  1303               	bcf	3,6	;RP1=0, select bank0
  3173     0178  161D               	bsf	29,4	;volatile
  3174     0179  297D               	goto	u1394
  3175     017A                     u1380:
  3176     017A  1283               	bcf	3,5	;RP0=0, select bank0
  3177     017B  1303               	bcf	3,6	;RP1=0, select bank0
  3178     017C  121D               	bcf	29,4	;volatile
  3179     017D                     u1394:
  3180     017D                     l1562:
  3181                           
  3182                           ;gsmg_c.c: 147:     CCPR2L = pwm>>2;
  3183     017D  0871               	movf	duty_sol@pwm+1,w
  3184     017E  00F3               	movwf	??_duty_sol+1
  3185     017F  0870               	movf	duty_sol@pwm,w
  3186     0180  00F2               	movwf	??_duty_sol
  3187     0181  0D73               	rlf	??_duty_sol+1,w
  3188     0182  0CF3               	rrf	??_duty_sol+1,f
  3189     0183  0CF2               	rrf	??_duty_sol,f
  3190     0184  0D73               	rlf	??_duty_sol+1,w
  3191     0185  0CF3               	rrf	??_duty_sol+1,f
  3192     0186  0CF2               	rrf	??_duty_sol,f
  3193     0187  0872               	movf	??_duty_sol,w
  3194     0188  009B               	movwf	27	;volatile
  3195     0189                     l107:
  3196     0189  0008               	return
  3197     018A                     __end_of_duty_sol:
  3198                           
  3199                           	psect	text16
  3200     0156                     __ptext16:	
  3201 ;; *************** function _duty_sag *****************
  3202 ;; Defined at:
  3203 ;;		line 135 in file "gsmg_c.c"
  3204 ;; Parameters:    Size  Location     Type
  3205 ;;  pwm             2    0[COMMON] int 
  3206 ;; Auto vars:     Size  Location     Type
  3207 ;;		None
  3208 ;; Return value:  Size  Location     Type
  3209 ;;                  1    wreg      void 
  3210 ;; Registers used:
  3211 ;;		wreg
  3212 ;; Tracked objects:
  3213 ;;		On entry : 0/0
  3214 ;;		On exit  : 0/0
  3215 ;;		Unchanged: 0/0
  3216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3217 ;;      Params:         2       0       0       0       0
  3218 ;;      Locals:         0       0       0       0       0
  3219 ;;      Temps:          2       0       0       0       0
  3220 ;;      Totals:         4       0       0       0       0
  3221 ;;Total ram usage:        4 bytes
  3222 ;; Hardware stack levels used: 1
  3223 ;; This function calls:
  3224 ;;		Nothing
  3225 ;; This function is called by:
  3226 ;;		_motor
  3227 ;; This function uses a non-reentrant model
  3228 ;;
  3229                           
  3230     0156                     _duty_sag:	
  3231                           ;psect for function _duty_sag
  3232                           
  3233     0156                     l1556:	
  3234                           ;incstack = 0
  3235                           ; Regs used in _duty_sag: [wreg]
  3236                           
  3237                           
  3238                           ;gsmg_c.c: 137:     CCP1X = pwm & 2;
  3239     0156  1283               	bcf	3,5	;RP0=0, select bank0
  3240     0157  1303               	bcf	3,6	;RP1=0, select bank0
  3241     0158  1297               	bcf	23,5	;volatile
  3242                           
  3243                           ;gsmg_c.c: 138:     CCP1Y = pwm & 1;
  3244     0159  1870               	btfsc	duty_sag@pwm,0
  3245     015A  295C               	goto	u1361
  3246     015B  2960               	goto	u1360
  3247     015C                     u1361:
  3248     015C  1283               	bcf	3,5	;RP0=0, select bank0
  3249     015D  1303               	bcf	3,6	;RP1=0, select bank0
  3250     015E  1617               	bsf	23,4	;volatile
  3251     015F  2963               	goto	u1374
  3252     0160                     u1360:
  3253     0160  1283               	bcf	3,5	;RP0=0, select bank0
  3254     0161  1303               	bcf	3,6	;RP1=0, select bank0
  3255     0162  1217               	bcf	23,4	;volatile
  3256     0163                     u1374:
  3257     0163                     l1558:
  3258                           
  3259                           ;gsmg_c.c: 139:     CCPR1L = pwm>>2;
  3260     0163  0871               	movf	duty_sag@pwm+1,w
  3261     0164  00F3               	movwf	??_duty_sag+1
  3262     0165  0870               	movf	duty_sag@pwm,w
  3263     0166  00F2               	movwf	??_duty_sag
  3264     0167  0D73               	rlf	??_duty_sag+1,w
  3265     0168  0CF3               	rrf	??_duty_sag+1,f
  3266     0169  0CF2               	rrf	??_duty_sag,f
  3267     016A  0D73               	rlf	??_duty_sag+1,w
  3268     016B  0CF3               	rrf	??_duty_sag+1,f
  3269     016C  0CF2               	rrf	??_duty_sag,f
  3270     016D  0872               	movf	??_duty_sag,w
  3271     016E  0095               	movwf	21	;volatile
  3272     016F                     l104:
  3273     016F  0008               	return
  3274     0170                     __end_of_duty_sag:
  3275                           
  3276                           	psect	text17
  3277     026E                     __ptext17:	
  3278 ;; *************** function _baslangic *****************
  3279 ;; Defined at:
  3280 ;;		line 151 in file "gsmg_c.c"
  3281 ;; Parameters:    Size  Location     Type
  3282 ;;		None
  3283 ;; Auto vars:     Size  Location     Type
  3284 ;;		None
  3285 ;; Return value:  Size  Location     Type
  3286 ;;                  1    wreg      void 
  3287 ;; Registers used:
  3288 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3289 ;; Tracked objects:
  3290 ;;		On entry : 0/0
  3291 ;;		On exit  : 0/0
  3292 ;;		Unchanged: 0/0
  3293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3294 ;;      Params:         0       0       0       0       0
  3295 ;;      Locals:         0       0       0       0       0
  3296 ;;      Temps:          0       3       0       0       0
  3297 ;;      Totals:         0       3       0       0       0
  3298 ;;Total ram usage:        3 bytes
  3299 ;; Hardware stack levels used: 1
  3300 ;; Hardware stack levels required when called: 3
  3301 ;; This function calls:
  3302 ;;		_Lcd_Clear
  3303 ;;		_Lcd_Set_Cursor
  3304 ;;		_Lcd_Write_String
  3305 ;; This function is called by:
  3306 ;;		_main
  3307 ;; This function uses a non-reentrant model
  3308 ;;
  3309                           
  3310     026E                     _baslangic:	
  3311                           ;psect for function _baslangic
  3312                           
  3313     026E                     l1584:	
  3314                           ;incstack = 0
  3315                           ; Regs used in _baslangic: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3316                           
  3317                           
  3318                           ;gsmg_c.c: 153:     Lcd_Set_Cursor(1,1);
  3319     026E  01F4               	clrf	Lcd_Set_Cursor@b
  3320     026F  0AF4               	incf	Lcd_Set_Cursor@b,f
  3321     0270  3001               	movlw	1
  3322     0271  120A  118A  22E6  120A  118A  	fcall	_Lcd_Set_Cursor
  3323     0276                     l1586:
  3324                           
  3325                           ;gsmg_c.c: 154:     Lcd_Write_String("   B210101373");
  3326     0276  3010               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  3327     0277  00F5               	movwf	Lcd_Write_String@a
  3328     0278  3080               	movlw	128
  3329     0279  00F6               	movwf	Lcd_Write_String@a+1
  3330     027A  120A  118A  22A4  120A  118A  	fcall	_Lcd_Write_String
  3331     027F                     l1588:
  3332                           
  3333                           ;gsmg_c.c: 155:     Lcd_Set_Cursor(2,1);
  3334     027F  01F4               	clrf	Lcd_Set_Cursor@b
  3335     0280  0AF4               	incf	Lcd_Set_Cursor@b,f
  3336     0281  3002               	movlw	2
  3337     0282  120A  118A  22E6  120A  118A  	fcall	_Lcd_Set_Cursor
  3338                           
  3339                           ;gsmg_c.c: 156:     Lcd_Write_String("   MELIH OGDUL");
  3340     0287  3001               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  3341     0288  00F5               	movwf	Lcd_Write_String@a
  3342     0289  3080               	movlw	128
  3343     028A  00F6               	movwf	Lcd_Write_String@a+1
  3344     028B  120A  118A  22A4  120A  118A  	fcall	_Lcd_Write_String
  3345     0290                     l1590:
  3346                           
  3347                           ;gsmg_c.c: 157:     _delay((unsigned long)((3000)*(4000000/4000.0)));
  3348     0290  3010               	movlw	16
  3349     0291  1283               	bcf	3,5	;RP0=0, select bank0
  3350     0292  1303               	bcf	3,6	;RP1=0, select bank0
  3351     0293  00A2               	movwf	??_baslangic+2
  3352     0294  3039               	movlw	57
  3353     0295  00A1               	movwf	??_baslangic+1
  3354     0296  300D               	movlw	13
  3355     0297  00A0               	movwf	??_baslangic
  3356     0298                     u1567:
  3357     0298  0BA0               	decfsz	??_baslangic,f
  3358     0299  2A98               	goto	u1567
  3359     029A  0BA1               	decfsz	??_baslangic+1,f
  3360     029B  2A98               	goto	u1567
  3361     029C  0BA2               	decfsz	??_baslangic+2,f
  3362     029D  2A98               	goto	u1567
  3363     029E                     l1592:
  3364                           
  3365                           ;gsmg_c.c: 158:     Lcd_Clear();
  3366     029E  120A  118A  211E  120A  118A  	fcall	_Lcd_Clear
  3367     02A3                     l110:
  3368     02A3  0008               	return
  3369     02A4                     __end_of_baslangic:
  3370                           
  3371                           	psect	text18
  3372     02A4                     __ptext18:	
  3373 ;; *************** function _Lcd_Write_String *****************
  3374 ;; Defined at:
  3375 ;;		line 126 in file "gsmg_c.c"
  3376 ;; Parameters:    Size  Location     Type
  3377 ;;  a               2    5[COMMON] PTR unsigned char 
  3378 ;;		 -> main@yuzde_veri(16), STR_6(5), STR_5(5), STR_4(4), 
  3379 ;;		 -> STR_3(4), STR_2(15), STR_1(14), 
  3380 ;; Auto vars:     Size  Location     Type
  3381 ;;  i               2   10[COMMON] int 
  3382 ;; Return value:  Size  Location     Type
  3383 ;;                  1    wreg      void 
  3384 ;; Registers used:
  3385 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3386 ;; Tracked objects:
  3387 ;;		On entry : 0/0
  3388 ;;		On exit  : 0/0
  3389 ;;		Unchanged: 0/0
  3390 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3391 ;;      Params:         2       0       0       0       0
  3392 ;;      Locals:         2       0       0       0       0
  3393 ;;      Temps:          3       0       0       0       0
  3394 ;;      Totals:         7       0       0       0       0
  3395 ;;Total ram usage:        7 bytes
  3396 ;; Hardware stack levels used: 1
  3397 ;; Hardware stack levels required when called: 2
  3398 ;; This function calls:
  3399 ;;		_Lcd_Write_Char
  3400 ;; This function is called by:
  3401 ;;		_baslangic
  3402 ;;		_motor
  3403 ;;		_main
  3404 ;; This function uses a non-reentrant model
  3405 ;;
  3406                           
  3407     02A4                     _Lcd_Write_String:	
  3408                           ;psect for function _Lcd_Write_String
  3409                           
  3410     02A4                     l1548:	
  3411                           ;incstack = 0
  3412                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3413                           
  3414                           
  3415                           ;gsmg_c.c: 126: void Lcd_Write_String(char *a);gsmg_c.c: 128: {;gsmg_c.c: 129:     int i
      +                          ;;gsmg_c.c: 130:     for(i=0;a[i]!='\0';i++)
  3416     02A4  01FA               	clrf	Lcd_Write_String@i
  3417     02A5  01FB               	clrf	Lcd_Write_String@i+1
  3418     02A6  2AC9               	goto	l1554
  3419     02A7                     l1550:
  3420                           
  3421                           ;gsmg_c.c: 131:      Lcd_Write_Char(a[i]);
  3422     02A7  087A               	movf	Lcd_Write_String@i,w
  3423     02A8  0775               	addwf	Lcd_Write_String@a,w
  3424     02A9  00F8               	movwf	??_Lcd_Write_String+1
  3425     02AA  0876               	movf	Lcd_Write_String@a+1,w
  3426     02AB  00F7               	movwf	??_Lcd_Write_String
  3427     02AC  1803               	skipnc
  3428     02AD  0AF7               	incf	??_Lcd_Write_String,f
  3429     02AE  1FFA               	btfss	Lcd_Write_String@i,7
  3430     02AF  2AB1               	goto	u1330
  3431     02B0  03F7               	decf	??_Lcd_Write_String,f
  3432     02B1                     u1330:
  3433     02B1  0877               	movf	??_Lcd_Write_String,w
  3434     02B2  00F9               	movwf	??_Lcd_Write_String+2
  3435     02B3  0879               	movf	??_Lcd_Write_String+2,w
  3436     02B4  1283               	bcf	3,5	;RP0=0, select bank0
  3437     02B5  1303               	bcf	3,6	;RP1=0, select bank0
  3438     02B6  00FF               	movwf	btemp+1
  3439     02B7  0878               	movf	??_Lcd_Write_String+1,w
  3440     02B8  0084               	movwf	4
  3441     02B9  120A  118A  2003  120A  118A  	fcall	stringtab
  3442     02BE  120A  118A  223B  120A  118A  	fcall	_Lcd_Write_Char
  3443     02C3                     l1552:
  3444     02C3  3001               	movlw	1
  3445     02C4  07FA               	addwf	Lcd_Write_String@i,f
  3446     02C5  1803               	skipnc
  3447     02C6  0AFB               	incf	Lcd_Write_String@i+1,f
  3448     02C7  3000               	movlw	0
  3449     02C8  07FB               	addwf	Lcd_Write_String@i+1,f
  3450     02C9                     l1554:
  3451     02C9  087A               	movf	Lcd_Write_String@i,w
  3452     02CA  0775               	addwf	Lcd_Write_String@a,w
  3453     02CB  00F8               	movwf	??_Lcd_Write_String+1
  3454     02CC  0876               	movf	Lcd_Write_String@a+1,w
  3455     02CD  00F7               	movwf	??_Lcd_Write_String
  3456     02CE  1803               	skipnc
  3457     02CF  0AF7               	incf	??_Lcd_Write_String,f
  3458     02D0  1FFA               	btfss	Lcd_Write_String@i,7
  3459     02D1  2AD3               	goto	u1340
  3460     02D2  03F7               	decf	??_Lcd_Write_String,f
  3461     02D3                     u1340:
  3462     02D3  0877               	movf	??_Lcd_Write_String,w
  3463     02D4  00F9               	movwf	??_Lcd_Write_String+2
  3464     02D5  0879               	movf	??_Lcd_Write_String+2,w
  3465     02D6  1283               	bcf	3,5	;RP0=0, select bank0
  3466     02D7  1303               	bcf	3,6	;RP1=0, select bank0
  3467     02D8  00FF               	movwf	btemp+1
  3468     02D9  0878               	movf	??_Lcd_Write_String+1,w
  3469     02DA  0084               	movwf	4
  3470     02DB  120A  118A  2003  120A  118A  	fcall	stringtab
  3471     02E0  3A00               	xorlw	0
  3472     02E1  1D03               	skipz
  3473     02E2  2AE4               	goto	u1351
  3474     02E3  2AE5               	goto	u1350
  3475     02E4                     u1351:
  3476     02E4  2AA7               	goto	l1550
  3477     02E5                     u1350:
  3478     02E5                     l101:
  3479     02E5  0008               	return
  3480     02E6                     __end_of_Lcd_Write_String:
  3481                           
  3482                           	psect	text19
  3483     023B                     __ptext19:	
  3484 ;; *************** function _Lcd_Write_Char *****************
  3485 ;; Defined at:
  3486 ;;		line 110 in file "gsmg_c.c"
  3487 ;; Parameters:    Size  Location     Type
  3488 ;;  a               1    wreg     unsigned char 
  3489 ;; Auto vars:     Size  Location     Type
  3490 ;;  a               1    4[COMMON] unsigned char 
  3491 ;;  y               1    3[COMMON] unsigned char 
  3492 ;;  temp            1    2[COMMON] unsigned char 
  3493 ;; Return value:  Size  Location     Type
  3494 ;;                  1    wreg      void 
  3495 ;; Registers used:
  3496 ;;		wreg, status,2, status,0, pclath, cstack
  3497 ;; Tracked objects:
  3498 ;;		On entry : 0/0
  3499 ;;		On exit  : 0/0
  3500 ;;		Unchanged: 0/0
  3501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3502 ;;      Params:         0       0       0       0       0
  3503 ;;      Locals:         3       0       0       0       0
  3504 ;;      Temps:          1       0       0       0       0
  3505 ;;      Totals:         4       0       0       0       0
  3506 ;;Total ram usage:        4 bytes
  3507 ;; Hardware stack levels used: 1
  3508 ;; Hardware stack levels required when called: 1
  3509 ;; This function calls:
  3510 ;;		_Lcd_Port
  3511 ;; This function is called by:
  3512 ;;		_Lcd_Write_String
  3513 ;; This function uses a non-reentrant model
  3514 ;;
  3515                           
  3516     023B                     _Lcd_Write_Char:	
  3517                           ;psect for function _Lcd_Write_Char
  3518                           
  3519                           
  3520                           ;incstack = 0
  3521                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  3522                           ;Lcd_Write_Char@a stored from wreg
  3523     023B  00F4               	movwf	Lcd_Write_Char@a
  3524     023C                     l1466:
  3525                           
  3526                           ;gsmg_c.c: 110: void Lcd_Write_Char(char a);gsmg_c.c: 112: {;gsmg_c.c: 113:     char tem
      +                          p,y;;gsmg_c.c: 114:     temp = a&0x0F;
  3527     023C  0874               	movf	Lcd_Write_Char@a,w
  3528     023D  390F               	andlw	15
  3529     023E  00F2               	movwf	Lcd_Write_Char@temp
  3530                           
  3531                           ;gsmg_c.c: 115:     y = a&0xF0;
  3532     023F  0874               	movf	Lcd_Write_Char@a,w
  3533     0240  39F0               	andlw	240
  3534     0241  00F3               	movwf	Lcd_Write_Char@y
  3535     0242                     l1468:
  3536                           
  3537                           ;gsmg_c.c: 116:     RC0 = 1;
  3538     0242  1283               	bcf	3,5	;RP0=0, select bank0
  3539     0243  1303               	bcf	3,6	;RP1=0, select bank0
  3540     0244  1407               	bsf	7,0	;volatile
  3541     0245                     l1470:
  3542                           
  3543                           ;gsmg_c.c: 117:     Lcd_Port(y>>4);
  3544     0245  0873               	movf	Lcd_Write_Char@y,w
  3545     0246  00F1               	movwf	??_Lcd_Write_Char
  3546     0247  3004               	movlw	4
  3547     0248                     u1245:
  3548     0248  1003               	clrc
  3549     0249  0CF1               	rrf	??_Lcd_Write_Char,f
  3550     024A  3EFF               	addlw	-1
  3551     024B  1D03               	skipz
  3552     024C  2A48               	goto	u1245
  3553     024D  0871               	movf	??_Lcd_Write_Char,w
  3554     024E  120A  118A  21CA  120A  118A  	fcall	_Lcd_Port
  3555     0253                     l1472:
  3556                           
  3557                           ;gsmg_c.c: 118:     RC3 = 1;
  3558     0253  1283               	bcf	3,5	;RP0=0, select bank0
  3559     0254  1303               	bcf	3,6	;RP1=0, select bank0
  3560     0255  1587               	bsf	7,3	;volatile
  3561     0256                     l1474:
  3562                           
  3563                           ;gsmg_c.c: 119:     _delay((unsigned long)((40)*(4000000/4000000.0)));
  3564     0256  300D               	movlw	13
  3565     0257  00F1               	movwf	??_Lcd_Write_Char
  3566     0258                     u1577:
  3567     0258  0BF1               	decfsz	??_Lcd_Write_Char,f
  3568     0259  2A58               	goto	u1577
  3569     025A                     l1476:
  3570                           
  3571                           ;gsmg_c.c: 120:     RC3 = 0;
  3572     025A  1283               	bcf	3,5	;RP0=0, select bank0
  3573     025B  1303               	bcf	3,6	;RP1=0, select bank0
  3574     025C  1187               	bcf	7,3	;volatile
  3575     025D                     l1478:
  3576                           
  3577                           ;gsmg_c.c: 121:     Lcd_Port(temp);
  3578     025D  0872               	movf	Lcd_Write_Char@temp,w
  3579     025E  120A  118A  21CA  120A  118A  	fcall	_Lcd_Port
  3580     0263                     l1480:
  3581                           
  3582                           ;gsmg_c.c: 122:     RC3 = 1;
  3583     0263  1283               	bcf	3,5	;RP0=0, select bank0
  3584     0264  1303               	bcf	3,6	;RP1=0, select bank0
  3585     0265  1587               	bsf	7,3	;volatile
  3586     0266                     l1482:
  3587                           
  3588                           ;gsmg_c.c: 123:     _delay((unsigned long)((40)*(4000000/4000000.0)));
  3589     0266  300D               	movlw	13
  3590     0267  00F1               	movwf	??_Lcd_Write_Char
  3591     0268                     u1587:
  3592     0268  0BF1               	decfsz	??_Lcd_Write_Char,f
  3593     0269  2A68               	goto	u1587
  3594     026A                     l1484:
  3595                           
  3596                           ;gsmg_c.c: 124:     RC3 = 0;
  3597     026A  1283               	bcf	3,5	;RP0=0, select bank0
  3598     026B  1303               	bcf	3,6	;RP1=0, select bank0
  3599     026C  1187               	bcf	7,3	;volatile
  3600     026D                     l95:
  3601     026D  0008               	return
  3602     026E                     __end_of_Lcd_Write_Char:
  3603                           
  3604                           	psect	text20
  3605     02E6                     __ptext20:	
  3606 ;; *************** function _Lcd_Set_Cursor *****************
  3607 ;; Defined at:
  3608 ;;		line 71 in file "gsmg_c.c"
  3609 ;; Parameters:    Size  Location     Type
  3610 ;;  a               1    wreg     unsigned char 
  3611 ;;  b               1    4[COMMON] unsigned char 
  3612 ;; Auto vars:     Size  Location     Type
  3613 ;;  a               1    6[COMMON] unsigned char 
  3614 ;;  temp            1    9[COMMON] unsigned char 
  3615 ;;  y               1    8[COMMON] unsigned char 
  3616 ;;  z               1    7[COMMON] unsigned char 
  3617 ;; Return value:  Size  Location     Type
  3618 ;;                  1    wreg      void 
  3619 ;; Registers used:
  3620 ;;		wreg, status,2, status,0, pclath, cstack
  3621 ;; Tracked objects:
  3622 ;;		On entry : 0/0
  3623 ;;		On exit  : 0/0
  3624 ;;		Unchanged: 0/0
  3625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3626 ;;      Params:         1       0       0       0       0
  3627 ;;      Locals:         4       0       0       0       0
  3628 ;;      Temps:          1       0       0       0       0
  3629 ;;      Totals:         6       0       0       0       0
  3630 ;;Total ram usage:        6 bytes
  3631 ;; Hardware stack levels used: 1
  3632 ;; Hardware stack levels required when called: 2
  3633 ;; This function calls:
  3634 ;;		_Lcd_Cmd
  3635 ;; This function is called by:
  3636 ;;		_baslangic
  3637 ;;		_motor
  3638 ;;		_main
  3639 ;; This function uses a non-reentrant model
  3640 ;;
  3641                           
  3642     02E6                     _Lcd_Set_Cursor:	
  3643                           ;psect for function _Lcd_Set_Cursor
  3644                           
  3645                           
  3646                           ;incstack = 0
  3647                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  3648                           ;Lcd_Set_Cursor@a stored from wreg
  3649     02E6  00F6               	movwf	Lcd_Set_Cursor@a
  3650     02E7                     l1528:
  3651                           
  3652                           ;gsmg_c.c: 71: void Lcd_Set_Cursor(char a, char b);gsmg_c.c: 73: {;gsmg_c.c: 74:     cha
      +                          r temp,z,y;;gsmg_c.c: 75:     if(a == 1)
  3653     02E7  0376               	decf	Lcd_Set_Cursor@a,w
  3654     02E8  1D03               	btfss	3,2
  3655     02E9  2AEB               	goto	u1291
  3656     02EA  2AEC               	goto	u1290
  3657     02EB                     u1291:
  3658     02EB  2B09               	goto	l1538
  3659     02EC                     u1290:
  3660     02EC                     l1530:
  3661                           
  3662                           ;gsmg_c.c: 76:         {;gsmg_c.c: 77:          temp = 0x80 + b - 1;
  3663     02EC  0874               	movf	Lcd_Set_Cursor@b,w
  3664     02ED  3E7F               	addlw	127
  3665     02EE  00F9               	movwf	Lcd_Set_Cursor@temp
  3666                           
  3667                           ;gsmg_c.c: 78:         z = temp>>4;
  3668     02EF  0879               	movf	Lcd_Set_Cursor@temp,w
  3669     02F0  00F5               	movwf	??_Lcd_Set_Cursor
  3670     02F1  3004               	movlw	4
  3671     02F2                     u1305:
  3672     02F2  1003               	clrc
  3673     02F3  0CF5               	rrf	??_Lcd_Set_Cursor,f
  3674     02F4  3EFF               	addlw	-1
  3675     02F5  1D03               	skipz
  3676     02F6  2AF2               	goto	u1305
  3677     02F7  0875               	movf	??_Lcd_Set_Cursor,w
  3678     02F8  00F7               	movwf	Lcd_Set_Cursor@z
  3679     02F9                     l1532:
  3680                           
  3681                           ;gsmg_c.c: 79:         y = temp & 0x0F;
  3682     02F9  0879               	movf	Lcd_Set_Cursor@temp,w
  3683     02FA  390F               	andlw	15
  3684     02FB  00F8               	movwf	Lcd_Set_Cursor@y
  3685     02FC                     l1534:
  3686                           
  3687                           ;gsmg_c.c: 80:         Lcd_Cmd(z);
  3688     02FC  0877               	movf	Lcd_Set_Cursor@z,w
  3689     02FD  120A  118A  213C  120A  118A  	fcall	_Lcd_Cmd
  3690     0302                     l1536:
  3691                           
  3692                           ;gsmg_c.c: 81:         Lcd_Cmd(y);
  3693     0302  0878               	movf	Lcd_Set_Cursor@y,w
  3694     0303  120A  118A  213C  120A  118A  	fcall	_Lcd_Cmd
  3695                           
  3696                           ;gsmg_c.c: 82:     }
  3697     0308  2B2B               	goto	l89
  3698     0309                     l1538:
  3699     0309  3002               	movlw	2
  3700     030A  0676               	xorwf	Lcd_Set_Cursor@a,w
  3701     030B  1D03               	btfss	3,2
  3702     030C  2B0E               	goto	u1311
  3703     030D  2B0F               	goto	u1310
  3704     030E                     u1311:
  3705     030E  2B2B               	goto	l89
  3706     030F                     u1310:
  3707     030F                     l1540:
  3708                           
  3709                           ;gsmg_c.c: 84:     {;gsmg_c.c: 85:         temp = 0xC0 + b - 1;
  3710     030F  0874               	movf	Lcd_Set_Cursor@b,w
  3711     0310  3EBF               	addlw	191
  3712     0311  00F9               	movwf	Lcd_Set_Cursor@temp
  3713                           
  3714                           ;gsmg_c.c: 86:         z = temp>>4;
  3715     0312  0879               	movf	Lcd_Set_Cursor@temp,w
  3716     0313  00F5               	movwf	??_Lcd_Set_Cursor
  3717     0314  3004               	movlw	4
  3718     0315                     u1325:
  3719     0315  1003               	clrc
  3720     0316  0CF5               	rrf	??_Lcd_Set_Cursor,f
  3721     0317  3EFF               	addlw	-1
  3722     0318  1D03               	skipz
  3723     0319  2B15               	goto	u1325
  3724     031A  0875               	movf	??_Lcd_Set_Cursor,w
  3725     031B  00F7               	movwf	Lcd_Set_Cursor@z
  3726     031C                     l1542:
  3727                           
  3728                           ;gsmg_c.c: 87:         y = temp & 0x0F;
  3729     031C  0879               	movf	Lcd_Set_Cursor@temp,w
  3730     031D  390F               	andlw	15
  3731     031E  00F8               	movwf	Lcd_Set_Cursor@y
  3732     031F                     l1544:
  3733                           
  3734                           ;gsmg_c.c: 88:         Lcd_Cmd(z);
  3735     031F  0877               	movf	Lcd_Set_Cursor@z,w
  3736     0320  120A  118A  213C  120A  118A  	fcall	_Lcd_Cmd
  3737     0325                     l1546:
  3738                           
  3739                           ;gsmg_c.c: 89:         Lcd_Cmd(y);
  3740     0325  0878               	movf	Lcd_Set_Cursor@y,w
  3741     0326  120A  118A  213C  120A  118A  	fcall	_Lcd_Cmd
  3742     032B                     l89:
  3743     032B  0008               	return
  3744     032C                     __end_of_Lcd_Set_Cursor:
  3745                           
  3746                           	psect	text21
  3747     011E                     __ptext21:	
  3748 ;; *************** function _Lcd_Clear *****************
  3749 ;; Defined at:
  3750 ;;		line 66 in file "gsmg_c.c"
  3751 ;; Parameters:    Size  Location     Type
  3752 ;;		None
  3753 ;; Auto vars:     Size  Location     Type
  3754 ;;		None
  3755 ;; Return value:  Size  Location     Type
  3756 ;;                  1    wreg      void 
  3757 ;; Registers used:
  3758 ;;		wreg, status,2, status,0, pclath, cstack
  3759 ;; Tracked objects:
  3760 ;;		On entry : 0/0
  3761 ;;		On exit  : 0/0
  3762 ;;		Unchanged: 0/0
  3763 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3764 ;;      Params:         0       0       0       0       0
  3765 ;;      Locals:         0       0       0       0       0
  3766 ;;      Temps:          0       0       0       0       0
  3767 ;;      Totals:         0       0       0       0       0
  3768 ;;Total ram usage:        0 bytes
  3769 ;; Hardware stack levels used: 1
  3770 ;; Hardware stack levels required when called: 2
  3771 ;; This function calls:
  3772 ;;		_Lcd_Cmd
  3773 ;; This function is called by:
  3774 ;;		_baslangic
  3775 ;; This function uses a non-reentrant model
  3776 ;;
  3777                           
  3778     011E                     _Lcd_Clear:	
  3779                           ;psect for function _Lcd_Clear
  3780                           
  3781     011E                     l1526:	
  3782                           ;incstack = 0
  3783                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  3784                           
  3785                           
  3786                           ;gsmg_c.c: 68:     Lcd_Cmd(0);
  3787     011E  3000               	movlw	0
  3788     011F  120A  118A  213C  120A  118A  	fcall	_Lcd_Cmd
  3789                           
  3790                           ;gsmg_c.c: 69:     Lcd_Cmd(1);
  3791     0124  3001               	movlw	1
  3792     0125  120A  118A  213C  120A  118A  	fcall	_Lcd_Cmd
  3793     012A                     l83:
  3794     012A  0008               	return
  3795     012B                     __end_of_Lcd_Clear:
  3796                           
  3797                           	psect	text22
  3798     047F                     __ptext22:	
  3799 ;; *************** function _Lcd_Init *****************
  3800 ;; Defined at:
  3801 ;;		line 92 in file "gsmg_c.c"
  3802 ;; Parameters:    Size  Location     Type
  3803 ;;		None
  3804 ;; Auto vars:     Size  Location     Type
  3805 ;;		None
  3806 ;; Return value:  Size  Location     Type
  3807 ;;                  1    wreg      void 
  3808 ;; Registers used:
  3809 ;;		wreg, status,2, status,0, pclath, cstack
  3810 ;; Tracked objects:
  3811 ;;		On entry : 0/0
  3812 ;;		On exit  : 0/0
  3813 ;;		Unchanged: 0/0
  3814 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3815 ;;      Params:         0       0       0       0       0
  3816 ;;      Locals:         0       0       0       0       0
  3817 ;;      Temps:          2       0       0       0       0
  3818 ;;      Totals:         2       0       0       0       0
  3819 ;;Total ram usage:        2 bytes
  3820 ;; Hardware stack levels used: 1
  3821 ;; Hardware stack levels required when called: 2
  3822 ;; This function calls:
  3823 ;;		_Lcd_Cmd
  3824 ;;		_Lcd_Port
  3825 ;; This function is called by:
  3826 ;;		_main
  3827 ;; This function uses a non-reentrant model
  3828 ;;
  3829                           
  3830     047F                     _Lcd_Init:	
  3831                           ;psect for function _Lcd_Init
  3832                           
  3833     047F                     l1574:	
  3834                           ;incstack = 0
  3835                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  3836                           
  3837                           
  3838                           ;gsmg_c.c: 95:     Lcd_Port(0x00);
  3839     047F  3000               	movlw	0
  3840     0480  120A  118A  21CA  120A  118A  	fcall	_Lcd_Port
  3841     0485                     l1576:
  3842                           
  3843                           ;gsmg_c.c: 96:     _delay((unsigned long)((20)*(4000000/4000.0)));
  3844     0485  301A               	movlw	26
  3845     0486  00F5               	movwf	??_Lcd_Init+1
  3846     0487  30F8               	movlw	248
  3847     0488  00F4               	movwf	??_Lcd_Init
  3848     0489                     u1597:
  3849     0489  0BF4               	decfsz	??_Lcd_Init,f
  3850     048A  2C89               	goto	u1597
  3851     048B  0BF5               	decfsz	??_Lcd_Init+1,f
  3852     048C  2C89               	goto	u1597
  3853     048D  0000               	nop
  3854     048E                     l1578:
  3855                           
  3856                           ;gsmg_c.c: 97:     Lcd_Cmd(0x03);
  3857     048E  3003               	movlw	3
  3858     048F  120A  118A  213C  120A  118A  	fcall	_Lcd_Cmd
  3859                           
  3860                           ;gsmg_c.c: 98:    _delay((unsigned long)((5)*(4000000/4000.0)));
  3861     0494  3007               	movlw	7
  3862     0495  00F5               	movwf	??_Lcd_Init+1
  3863     0496  307D               	movlw	125
  3864     0497  00F4               	movwf	??_Lcd_Init
  3865     0498                     u1607:
  3866     0498  0BF4               	decfsz	??_Lcd_Init,f
  3867     0499  2C98               	goto	u1607
  3868     049A  0BF5               	decfsz	??_Lcd_Init+1,f
  3869     049B  2C98               	goto	u1607
  3870     049C                     l1580:
  3871                           
  3872                           ;gsmg_c.c: 99:     Lcd_Cmd(0x03);
  3873     049C  3003               	movlw	3
  3874     049D  120A  118A  213C  120A  118A  	fcall	_Lcd_Cmd
  3875     04A2                     l1582:
  3876                           
  3877                           ;gsmg_c.c: 100:    _delay((unsigned long)((11)*(4000000/4000.0)));
  3878     04A2  300F               	movlw	15
  3879     04A3  00F5               	movwf	??_Lcd_Init+1
  3880     04A4  3047               	movlw	71
  3881     04A5  00F4               	movwf	??_Lcd_Init
  3882     04A6                     u1617:
  3883     04A6  0BF4               	decfsz	??_Lcd_Init,f
  3884     04A7  2CA6               	goto	u1617
  3885     04A8  0BF5               	decfsz	??_Lcd_Init+1,f
  3886     04A9  2CA6               	goto	u1617
  3887     04AA  2CAB               	nop2
  3888                           
  3889                           ;gsmg_c.c: 101:     Lcd_Cmd(0x03);
  3890     04AB  3003               	movlw	3
  3891     04AC  120A  118A  213C  120A  118A  	fcall	_Lcd_Cmd
  3892                           
  3893                           ;gsmg_c.c: 102:     Lcd_Cmd(0x02);
  3894     04B1  3002               	movlw	2
  3895     04B2  120A  118A  213C  120A  118A  	fcall	_Lcd_Cmd
  3896                           
  3897                           ;gsmg_c.c: 103:     Lcd_Cmd(0x02);
  3898     04B7  3002               	movlw	2
  3899     04B8  120A  118A  213C  120A  118A  	fcall	_Lcd_Cmd
  3900                           
  3901                           ;gsmg_c.c: 104:     Lcd_Cmd(0x08);
  3902     04BD  3008               	movlw	8
  3903     04BE  120A  118A  213C  120A  118A  	fcall	_Lcd_Cmd
  3904                           
  3905                           ;gsmg_c.c: 105:     Lcd_Cmd(0x00);
  3906     04C3  3000               	movlw	0
  3907     04C4  120A  118A  213C  120A  118A  	fcall	_Lcd_Cmd
  3908                           
  3909                           ;gsmg_c.c: 106:     Lcd_Cmd(0x0C);
  3910     04C9  300C               	movlw	12
  3911     04CA  120A  118A  213C  120A  118A  	fcall	_Lcd_Cmd
  3912                           
  3913                           ;gsmg_c.c: 107:     Lcd_Cmd(0x00);
  3914     04CF  3000               	movlw	0
  3915     04D0  120A  118A  213C  120A  118A  	fcall	_Lcd_Cmd
  3916                           
  3917                           ;gsmg_c.c: 108:     Lcd_Cmd(0x06);
  3918     04D5  3006               	movlw	6
  3919     04D6  120A  118A  213C  120A  118A  	fcall	_Lcd_Cmd
  3920     04DB                     l92:
  3921     04DB  0008               	return
  3922     04DC                     __end_of_Lcd_Init:
  3923                           
  3924                           	psect	text23
  3925     013C                     __ptext23:	
  3926 ;; *************** function _Lcd_Cmd *****************
  3927 ;; Defined at:
  3928 ;;		line 57 in file "gsmg_c.c"
  3929 ;; Parameters:    Size  Location     Type
  3930 ;;  a               1    wreg     unsigned char 
  3931 ;; Auto vars:     Size  Location     Type
  3932 ;;  a               1    3[COMMON] unsigned char 
  3933 ;; Return value:  Size  Location     Type
  3934 ;;                  1    wreg      void 
  3935 ;; Registers used:
  3936 ;;		wreg, status,2, status,0, pclath, cstack
  3937 ;; Tracked objects:
  3938 ;;		On entry : 0/0
  3939 ;;		On exit  : 0/0
  3940 ;;		Unchanged: 0/0
  3941 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3942 ;;      Params:         0       0       0       0       0
  3943 ;;      Locals:         1       0       0       0       0
  3944 ;;      Temps:          2       0       0       0       0
  3945 ;;      Totals:         3       0       0       0       0
  3946 ;;Total ram usage:        3 bytes
  3947 ;; Hardware stack levels used: 1
  3948 ;; Hardware stack levels required when called: 1
  3949 ;; This function calls:
  3950 ;;		_Lcd_Port
  3951 ;; This function is called by:
  3952 ;;		_Lcd_Clear
  3953 ;;		_Lcd_Set_Cursor
  3954 ;;		_Lcd_Init
  3955 ;; This function uses a non-reentrant model
  3956 ;;
  3957                           
  3958     013C                     _Lcd_Cmd:	
  3959                           ;psect for function _Lcd_Cmd
  3960                           
  3961                           
  3962                           ;incstack = 0
  3963                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  3964                           ;Lcd_Cmd@a stored from wreg
  3965     013C  00F3               	movwf	Lcd_Cmd@a
  3966     013D                     l1456:
  3967                           
  3968                           ;gsmg_c.c: 57: void Lcd_Cmd(char a);gsmg_c.c: 58: {;gsmg_c.c: 59:     RC0 = 0;
  3969     013D  1283               	bcf	3,5	;RP0=0, select bank0
  3970     013E  1303               	bcf	3,6	;RP1=0, select bank0
  3971     013F  1007               	bcf	7,0	;volatile
  3972     0140                     l1458:
  3973                           
  3974                           ;gsmg_c.c: 60:     Lcd_Port(a);
  3975     0140  0873               	movf	Lcd_Cmd@a,w
  3976     0141  120A  118A  21CA  120A  118A  	fcall	_Lcd_Port
  3977     0146                     l1460:
  3978                           
  3979                           ;gsmg_c.c: 61:     RC3 = 1;
  3980     0146  1283               	bcf	3,5	;RP0=0, select bank0
  3981     0147  1303               	bcf	3,6	;RP1=0, select bank0
  3982     0148  1587               	bsf	7,3	;volatile
  3983     0149                     l1462:
  3984                           
  3985                           ;gsmg_c.c: 62:      _delay((unsigned long)((4)*(4000000/4000.0)));
  3986     0149  3006               	movlw	6
  3987     014A  00F2               	movwf	??_Lcd_Cmd+1
  3988     014B  3030               	movlw	48
  3989     014C  00F1               	movwf	??_Lcd_Cmd
  3990     014D                     u1627:
  3991     014D  0BF1               	decfsz	??_Lcd_Cmd,f
  3992     014E  294D               	goto	u1627
  3993     014F  0BF2               	decfsz	??_Lcd_Cmd+1,f
  3994     0150  294D               	goto	u1627
  3995     0151  0000               	nop
  3996     0152                     l1464:
  3997                           
  3998                           ;gsmg_c.c: 63:      RC3 = 0;
  3999     0152  1283               	bcf	3,5	;RP0=0, select bank0
  4000     0153  1303               	bcf	3,6	;RP1=0, select bank0
  4001     0154  1187               	bcf	7,3	;volatile
  4002     0155                     l80:
  4003     0155  0008               	return
  4004     0156                     __end_of_Lcd_Cmd:
  4005                           
  4006                           	psect	text24
  4007     01CA                     __ptext24:	
  4008 ;; *************** function _Lcd_Port *****************
  4009 ;; Defined at:
  4010 ;;		line 38 in file "gsmg_c.c"
  4011 ;; Parameters:    Size  Location     Type
  4012 ;;  a               1    wreg     unsigned char 
  4013 ;; Auto vars:     Size  Location     Type
  4014 ;;  a               1    0[COMMON] unsigned char 
  4015 ;; Return value:  Size  Location     Type
  4016 ;;                  1    wreg      void 
  4017 ;; Registers used:
  4018 ;;		wreg
  4019 ;; Tracked objects:
  4020 ;;		On entry : 0/0
  4021 ;;		On exit  : 0/0
  4022 ;;		Unchanged: 0/0
  4023 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4024 ;;      Params:         0       0       0       0       0
  4025 ;;      Locals:         1       0       0       0       0
  4026 ;;      Temps:          0       0       0       0       0
  4027 ;;      Totals:         1       0       0       0       0
  4028 ;;Total ram usage:        1 bytes
  4029 ;; Hardware stack levels used: 1
  4030 ;; This function calls:
  4031 ;;		Nothing
  4032 ;; This function is called by:
  4033 ;;		_Lcd_Cmd
  4034 ;;		_Lcd_Init
  4035 ;;		_Lcd_Write_Char
  4036 ;; This function uses a non-reentrant model
  4037 ;;
  4038                           
  4039     01CA                     _Lcd_Port:	
  4040                           ;psect for function _Lcd_Port
  4041                           
  4042                           
  4043                           ;incstack = 0
  4044                           ; Regs used in _Lcd_Port: [wreg]
  4045                           ;Lcd_Port@a stored from wreg
  4046     01CA  00F0               	movwf	Lcd_Port@a
  4047     01CB                     l1388:
  4048                           
  4049                           ;gsmg_c.c: 39:     if(a & 1)
  4050     01CB  1C70               	btfss	Lcd_Port@a,0
  4051     01CC  29CE               	goto	u1101
  4052     01CD  29CF               	goto	u1100
  4053     01CE                     u1101:
  4054     01CE  29D3               	goto	l69
  4055     01CF                     u1100:
  4056     01CF                     l1390:
  4057                           
  4058                           ;gsmg_c.c: 40:         RD4 = 1;
  4059     01CF  1283               	bcf	3,5	;RP0=0, select bank0
  4060     01D0  1303               	bcf	3,6	;RP1=0, select bank0
  4061     01D1  1608               	bsf	8,4	;volatile
  4062     01D2  29D6               	goto	l70
  4063     01D3                     l69:	
  4064                           ;gsmg_c.c: 41:     else
  4065                           
  4066                           
  4067                           ;gsmg_c.c: 42:         RD4 = 0;
  4068     01D3  1283               	bcf	3,5	;RP0=0, select bank0
  4069     01D4  1303               	bcf	3,6	;RP1=0, select bank0
  4070     01D5  1208               	bcf	8,4	;volatile
  4071     01D6                     l70:
  4072                           
  4073                           ;gsmg_c.c: 43:     if(a & 2)
  4074     01D6  1CF0               	btfss	Lcd_Port@a,1
  4075     01D7  29D9               	goto	u1111
  4076     01D8  29DA               	goto	u1110
  4077     01D9                     u1111:
  4078     01D9  29DC               	goto	l71
  4079     01DA                     u1110:
  4080     01DA                     l1392:
  4081                           
  4082                           ;gsmg_c.c: 44:         RD5 = 1;
  4083     01DA  1688               	bsf	8,5	;volatile
  4084     01DB  29DD               	goto	l72
  4085     01DC                     l71:	
  4086                           ;gsmg_c.c: 45:     else
  4087                           
  4088                           
  4089                           ;gsmg_c.c: 46:         RD5 = 0;
  4090     01DC  1288               	bcf	8,5	;volatile
  4091     01DD                     l72:
  4092                           
  4093                           ;gsmg_c.c: 47:     if(a & 4)
  4094     01DD  1D70               	btfss	Lcd_Port@a,2
  4095     01DE  29E0               	goto	u1121
  4096     01DF  29E1               	goto	u1120
  4097     01E0                     u1121:
  4098     01E0  29E3               	goto	l73
  4099     01E1                     u1120:
  4100     01E1                     l1394:
  4101                           
  4102                           ;gsmg_c.c: 48:         RD6 = 1;
  4103     01E1  1708               	bsf	8,6	;volatile
  4104     01E2  29E4               	goto	l74
  4105     01E3                     l73:	
  4106                           ;gsmg_c.c: 49:     else
  4107                           
  4108                           
  4109                           ;gsmg_c.c: 50:         RD6 = 0;
  4110     01E3  1308               	bcf	8,6	;volatile
  4111     01E4                     l74:
  4112                           
  4113                           ;gsmg_c.c: 51:     if(a & 8)
  4114     01E4  1DF0               	btfss	Lcd_Port@a,3
  4115     01E5  29E7               	goto	u1131
  4116     01E6  29E8               	goto	u1130
  4117     01E7                     u1131:
  4118     01E7  29EA               	goto	l75
  4119     01E8                     u1130:
  4120     01E8                     l1396:
  4121                           
  4122                           ;gsmg_c.c: 52:         RD7 = 1;
  4123     01E8  1788               	bsf	8,7	;volatile
  4124     01E9  29EB               	goto	l77
  4125     01EA                     l75:	
  4126                           ;gsmg_c.c: 53:     else
  4127                           
  4128                           
  4129                           ;gsmg_c.c: 54:         RD7 = 0;
  4130     01EA  1388               	bcf	8,7	;volatile
  4131     01EB                     l77:
  4132     01EB  0008               	return
  4133     01EC                     __end_of_Lcd_Port:
  4134     007E                     btemp	set	126	;btemp
  4135     007E                     wtemp0	set	126
  4136                           
  4137                           	psect	idloc
  4138                           
  4139                           ;Config register IDLOC0 @ 0x2000
  4140                           ;	unspecified, using default values
  4141     2000                     	org	8192
  4142     2000  3FFF               	dw	16383
  4143                           
  4144                           ;Config register IDLOC1 @ 0x2001
  4145                           ;	unspecified, using default values
  4146     2001                     	org	8193
  4147     2001  3FFF               	dw	16383
  4148                           
  4149                           ;Config register IDLOC2 @ 0x2002
  4150                           ;	unspecified, using default values
  4151     2002                     	org	8194
  4152     2002  3FFF               	dw	16383
  4153                           
  4154                           ;Config register IDLOC3 @ 0x2003
  4155                           ;	unspecified, using default values
  4156     2003                     	org	8195
  4157     2003  3FFF               	dw	16383
  4158                           
  4159                           	psect	config
  4160                           
  4161                           ;Config register CONFIG @ 0x2007
  4162                           ;	Oscillator Selection bits
  4163                           ;	FOSC = XT, XT oscillator
  4164                           ;	Watchdog Timer Enable bit
  4165                           ;	WDTE = OFF, WDT disabled
  4166                           ;	Power-up Timer Enable bit
  4167                           ;	PWRTE = OFF, PWRT disabled
  4168                           ;	Brown-out Reset Enable bit
  4169                           ;	BOREN = ON, BOR enabled
  4170                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  4171                           ;	LVP = ON, RB3/PGM pin has PGM function; low-voltage programming enabled
  4172                           ;	Data EEPROM Memory Code Protection bit
  4173                           ;	CPD = OFF, Data EEPROM code protection off
  4174                           ;	Flash Program Memory Write Enable bits
  4175                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  4176                           ;	In-Circuit Debugger Mode bit
  4177                           ;	DEBUG = 0x1, unprogrammed default
  4178                           ;	Flash Program Memory Code Protection bit
  4179                           ;	CP = OFF, Code protection off
  4180     2007                     	org	8199
  4181     2007  3FF9               	dw	16377

Data Sizes:
    Strings     51
    Constant    0
    Data        2
    BSS         37
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     72      79
    BANK1            80      0      32
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    dtoa@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    f$.$buffer	PTR unsigned char  size(1) Largest target is 0

    f$.$source	PTR const unsigned char  size(1) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    fputc@fp$.$buffer	PTR unsigned char  size(1) Largest target is 0

    fputc@fp$.$source	PTR const unsigned char  size(1) Largest target is 0

    fputs@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    fputs@s	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK1[32]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 16
		 -> main@yuzde_veri(BANK0[16]), STR_1(CODE[14]), STR_2(CODE[15]), STR_3(CODE[4]), 
		 -> STR_4(CODE[4]), STR_5(CODE[5]), STR_6(CODE[5]), 

    pad@buf	PTR unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK1[32]), 

    pad@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    read_prec_or_width@ap	PTR PTR void [1] size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), 

    read_prec_or_width@fmt	PTR PTR const unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(BANK0[1]), 

    S560$buffer	PTR unsigned char  size(1) Largest target is 0

    S560$source	PTR const unsigned char  size(1) Largest target is 0

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 4
		 -> STR_7(CODE[4]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 16
		 -> main@yuzde_veri(BANK0[16]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(1) Largest target is 4
		 -> STR_7(CODE[4]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(BANK0[1]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 4
		 -> STR_7(CODE[4]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 4
		 -> STR_7(CODE[4]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(BANK0[11]), 


Critical Paths under _main in COMMON

    _main->_motor
    _read_prec_or_width->___wmul
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___awmod
    _motor->_Lcd_Write_String
    _baslangic->_Lcd_Write_String
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                22    22      0   12679
                                             50 BANK0     22    22      0
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                             ___wmul
                          _baslangic
                              _motor
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             19    16      3    6110
                                             33 BANK0     17    14      3
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             4     2      2    5800
                                             29 BANK0      4     2      2
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           12    10      2    5487
                                             19 BANK0     10     8      2
                               _dtoa
                              _fputc
                 _read_prec_or_width
 ---------------------------------------------------------------------------------
 (4) _read_prec_or_width                                   6     4      2     685
                                              6 COMMON     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     396
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                11     9      2    3581
                                              8 BANK0     11     9      2
                            ___awdiv
                            ___awmod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                  7     4      3    2043
                                             11 COMMON     3     0      3
                                              4 BANK0      4     4      0
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     6      1     997
                                              8 COMMON     3     2      1
                                              0 BANK0      4     4      0
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                8     5      3     682
                                              0 COMMON     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     142
                                              6 COMMON     4     2      2
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4     448
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4     452
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _motor                                                6     2      4    2344
                                             12 COMMON     2     2      0
                                              0 BANK0      4     0      4
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                           _duty_sag
                           _duty_sol
 ---------------------------------------------------------------------------------
 (2) _duty_sol                                             4     2      2     196
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (2) _duty_sag                                             4     2      2     196
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _baslangic                                            3     3      0    1822
                                              0 BANK0      3     3      0
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_String                                     7     5      2     800
                                              5 COMMON     7     5      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (3) _Lcd_Write_Char                                       4     4      0     178
                                              1 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _Lcd_Set_Cursor                                       6     5      1     912
                                              4 COMMON     6     5      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     198
                                              4 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              3     3      0     110
                                              1 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (4) _Lcd_Port                                             1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   ___wmul
   _baslangic
     _Lcd_Clear
       _Lcd_Cmd
     _Lcd_Set_Cursor
     _Lcd_Write_String
   _motor
     _Lcd_Set_Cursor
     _Lcd_Write_String
     _duty_sag
     _duty_sol
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _dtoa
           ___awdiv
           ___awmod
           _abs
             ___awmod (ARG)
           _pad
             _fputc
               _putch
             _fputs
               _fputc
         _fputc
         _read_prec_or_width
           ___wmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      20       7       40.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     48      4F       5       98.8%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      7D      12        0.0%
ABS                  0      0      7D       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Sat May 25 14:23:24 2024

                         pc 0002                          l70 01D6                          l71 01DC  
                        l72 01DD                          l80 0155                          l73 01E3  
                        l74 01E4                          l75 01EA                          l83 012A  
                        l92 04DB                          l77 01EB                          l69 01D3  
                        l95 026D                          l89 032B                ___awdiv@sign 0075  
                        fsr 0004         ___wmul@multiplicand 0072                         l101 02E5  
                       l110 02A3                         l104 016F                         l130 0768  
                       l107 0189                         l115 0542                         l123 0764  
                       l124 0744                         l141 0797                         l135 0793  
                       l232 01F8                         l136 078A                         l129 0786  
                       l234 0210                         l720 0377                         l385 05A9  
                       l715 0341                         l723 066C                         l398 047E  
                       l718 0369                         l734 06EE                         l742 0425  
                       l750 0640                         l727 066A                         l763 013B  
                       l756 01C9                         l775 03CD                         l783 023A  
                       l695 01A8                         l786 0113                         _RB0 0030  
                       _RB1 0031                         _RC0 0038                         _RC3 003B  
                       _RB6 0036                         _RB7 0037                         _RD4 0044  
                       _RD5 0045                         _RD6 0046                         _RD7 0047  
                       _PR2 0092                         u800 03B6                         u801 03B5  
                       u810 023A                         u811 0239                         u900 0576  
                       u820 01F2                         u901 0575                         u805 03B2  
                       u821 01F1                         u920 0587                         u921 0586  
                       u770 037D                         u850 020C                         u915 0577  
                       u771 037C                         u851 020B                         u835 01F9  
                       u940 059B                         u860 0548                         u780 0382  
                       u941 059A                         u925 0583                         u861 0547  
                       u781 0381                         u845 0200                         u950 05A0  
                       u870 0553                         u790 0398                         u951 059F  
                       u935 058F                         u871 0552                         u791 0397  
                       u880 0564                         u960 042B                         u881 0563  
                       u961 042A                         u970 0436                         u971 0435  
                       u980 0441                         u981 0440                         u895 0568  
                       u995 0445                         _abs 012B                         _pad 032C  
                       fsr0 0004                         indf 0000                ___awmod@sign 0075  
                      ?_abs 0076                        l1300 0564                        l1310 0587  
                      l1302 0567                        l1320 05A0                        l1312 058D  
                      l1304 056E                        l1400 0646                        l1322 05A5  
                      l1314 058E                        l1306 0572                        l1330 042B  
                      l1250 0382                        l1410 0666                        l1402 0651  
                      l1316 0595                        l1308 0576                        l1340 0441  
                      l1332 0430                        l1252 0389                        l1260 0214  
                      l1420 069A                        l1412 0670                        l1404 0656  
                      l1500 05E0                        l1318 059B                        l1350 045D  
                      l1342 0444                        l1334 0432                        l1326 0426  
                      l1254 0398                        l1246 0378                        l1262 0217  
                      l1430 06CE                        l1422 06A0                        l1414 0674  
                      l1406 065C                        l1270 01EE                        l1510 060F  
                      l1502 05E5                        l1600 04FE                        l1360 047A  
                      l1352 0463                        l1344 044B                        l1336 0436  
                      l1328 0427                        l1256 03B6                        l1248 037D  
                      l1264 0225                        l1432 06D5                        l1416 067A  
                      l1424 06B3                        l1408 0661                        l1272 01F2  
                      l1440 03CF                        l1512 0614                        l1504 05EA  
                      l1520 0629                        l1530 02EC                        l1610 0531  
                      l1602 0506                        l1290 054F                        l1282 0543  
                      l1354 046A                        l1346 044F                        l1338 043B  
                      l1266 022D                        l1370 033F                        l1434 06DB  
                      l1426 06C1                        l1418 0697                        l1274 01FF  
                      l1450 0410                        l1442 03D1                        l1506 05F6  
                      l1460 0146                        l1540 030F                        l1532 02F9  
                      l1612 0539                        l1604 050F                        l1292 0553  
                      l1284 0544                        l1348 0453                        l1356 0470  
                      l1380 012B                        l1372 0346                        l1364 032F  
                      l1436 06E1                        l1428 06C9                        l1276 0206  
                      l1268 01EC                        l1452 0421                        l1444 03E0  
                      l1516 061F                        l1508 0602                        l1620 0195  
                      l1700 07C6                        l1390 01CF                        l1462 0149  
                      l1526 011E                        l1542 031C                        l1534 02FC  
                      l1470 0245                        l1550 02A7                        l1606 0517  
                      l1294 0558                        l1286 0548                        l1358 0475  
                      l1382 012F                        l1374 0353                        l1366 0333  
                      l1278 020C                        l1446 03F4                        l1622 019F  
                      l1614 018D                        l1702 07CF                        l1630 06F5  
                      l1392 01DA                        l1464 0152                        l1456 013D  
                      l1544 031F                        l1536 0302                        l1528 02E7  
                      l1480 0263                        l1472 0253                        l1552 02C3  
                      l1560 0170                        l1608 0528                        l1296 055C  
                      l1288 054D                        l1384 0130                        l1376 035B  
                      l1368 033B                        l1448 0409                        l1616 0191  
                      l1640 0702                        l1632 06F8                        l1394 01E1  
                      l1458 0140                        l1546 0325                        l1538 0309  
                      l1482 0266                        l1474 0256                        l1466 023C  
                      l1554 02C9                        l1562 017D                        l1298 055E  
                      l1378 036F                        l1490 05C2                        l1570 01C7  
                      l1618 0193                        l1650 0707                        l1642 0703  
                      l1634 06F9                        l1626 06EF                        l1396 01E8  
                      l1388 01CB                        l1580 049C                        l1484 026A  
                      l1476 025A                        l1468 0242                        l1548 02A4  
                      l1556 0156                        l1492 05C9                        l1564 01AC  
                      l1660 071C                        l1652 0708                        l1644 0704  
                      l1636 06FA                        l1628 06F3                        l1582 04A2  
                      l1574 047F                        l1478 025D                        l1590 0290  
                      l1558 0163                        l1398 0644                        l1494 05CD  
                      l1486 05AD                        l1566 01AF                        l1662 0724  
                      l1654 0709                        l1646 0705                        l1638 06FF  
                      l1576 0485                        l1592 029E                        l1584 026E  
                      l1496 05DB                        l1488 05BC                        l1568 01B9  
                      l1680 076C                        l1672 0748                        l1664 072D  
                      l1656 070D                        l1648 0706                        l1578 048E  
                      l1586 0276                        l1594 04DC                        l1498 05DF  
                      l1682 0774                        l1674 0750                        l1666 0735  
                      l1658 0712                        l1588 027F                        l1596 04E4  
                      l1692 079B                        l1684 0781                        l1676 075D  
                      l1668 073E                        l1598 04F5                        l1694 079D  
                      l1696 07B2                        l1688 078E                        l1698 07BE  
                      ?_pad 007B                        STR_1 0022                        STR_2 0013  
                      STR_3 003E                        STR_4 003A                        STR_5 0035  
                      STR_6 0030                        STR_7 0042                        u1000 0453  
                      u1001 0452                        u1010 045D                        u1011 045C  
                      u1100 01CF                        u1101 01CE                        u1110 01DA  
                      u1030 0470                        u1111 01D9                        u1031 046F  
                      u1015 0459                        u1120 01E1                        u1040 0475  
                      u1200 06CE                        u1121 01E0                        u1041 0474  
                      u1025 0464                        u1201 06CD                        u1130 01E8  
                      u1050 0333                        u1210 06D5                        u1131 01E7  
                      u1051 0332                        u1211 06D4                        u1060 033F  
                      u1140 064B                        u1220 03E0                        u1061 033E  
                      u1141 0649                        u1221 03DF                        u1310 030F  
                      u1070 0369                        u1150 064C                        u1230 0421  
                      u1311 030E                        u1071 0368                        u1231 0420  
                      u1080 036F                        u1160 0656                        u1400 01C7  
                      u1305 02F2                        u1081 036E                        u1161 0655  
                      u1401 01C6                        u1330 02B1                        u1410 04E4  
                      u1090 012F                        u1170 0661                        u1250 05BC  
                      u1411 04E3                        u1091 012E                        u1075 0365  
                      u1171 0660                        u1251 05BB                        u1340 02D3  
                      u1420 0517                        u1180 06C1                        u1260 05DF  
                      u1500 078E                        u1325 0315                        u1245 0248  
                      u1421 0516                        u1181 06C0                        u1261 05DE  
                      u1501 078D                        u1350 02E5                        u1190 06C9  
                      u1270 05F6                        u1510 0797                        u1430 0744  
                      u1351 02E4                        u1191 06C8                        u1271 05F5  
                      u1511 0796                        u1431 0743                        u1360 0160  
                      u1280 0602                        u1520 079B                        u1440 0748  
                      u1361 015C                        u1185 06BD                        u1281 0601  
                      u1521 079A                        u1441 0747                        u1290 02EC  
                      u1450 075D                        u1291 02EB                        u1451 075C  
                      u1380 017A                        u1460 0768                        u1381 0176  
                      u1461 0767                        u1374 0163                        u1470 076C  
                      u1607 0498                        u1471 076B                        u1455 0759  
                      u1480 0781                        u1617 04A6                        u1481 0780  
                      u1537 0718                        u1394 017D                        u1490 078A  
                      u1627 014D                        u1547 04F9                        u1491 0789  
                      u1557 052C                        u1485 077D                        u1567 0298  
                      u1577 0258                        u1587 0268                        u1597 0489  
                      _TMR2 0011                        abs@a 0076           ?_Lcd_Write_String 0075  
                      _dbuf 00A0                        _main 06EF                        _dtoa 0641  
                      _prec 006A                        pad@i 0025                        pad@p 007C  
                      btemp 007E                        start 0000          ??_Lcd_Write_String 0077  
           __end_of_Lcd_Cmd 0156                       ??_abs 0078                       ??_pad 0024  
                     ?_main 0070                       ?_dtoa 0028                       _CCP1X 00BD  
                     _CCP1Y 00BC                       _CCP2X 00ED                       _CCP2Y 00EC  
           __end_of___awdiv 05AA             __end_of___awmod 047F             ___awdiv@divisor 0070  
           ___awdiv@counter 0074                vfpfcnvrt@fmt 0033                       _PORTB 0006  
                     _PORTC 0007                       _PORTD 0008                       _TRISB 0086  
                     _TRISC 0087                       _TRISD 0088                       _flags 006C  
       read_prec_or_width@c 0078         read_prec_or_width@n 0079                       _fputc 0378  
                     _fputs 0211                       _motor 04DC                       pad@fp 0027  
                     _width 0068                       _putch 0113                       dtoa@d 0028  
                     dtoa@i 0031                       dtoa@p 002F                       dtoa@s 0030  
                     dtoa@w 002D                       pclath 000A                       status 0003  
                     wtemp0 007E             __end_of_sprintf 01A9            __end_of_Lcd_Init 04DC  
          __end_of_Lcd_Port 01EC             __initialization 07E2                __end_of_main 07E2  
              __end_of_dtoa 06EF                      ??_main 0052                      ??_dtoa 007E  
__end_of_read_prec_or_width 0426                      _CCP1M2 00BA                      _CCP1M3 00BB  
                    _CCP2M2 00EA                      _CCP2M3 00EB                      ?_fputc 0070  
                    ?_fputs 0078                      _CCPR1L 0015                      _CCPR2L 001B  
          ___awdiv@dividend 0072                      ?_motor 0020                      ?_putch 0070  
                 ??_Lcd_Cmd 0071                      _TMR2ON 0092                vfprintf@cfmt 0040  
                    ___wmul 01EC                   ??___awdiv 0074                   ??___awmod 0074  
      read_prec_or_width@ap 0076            ___awdiv@quotient 0076             ___awmod@divisor 0070  
          __end_of_duty_sag 0170             ___awmod@counter 0074            __end_of_duty_sol 018A  
                    pad@buf 007B                      dtoa@fp 002C                      fputc@c 0070  
                    fputs@c 0020                      fputs@i 0021                      fputs@s 0023  
                    putch@c 0070            __end_of_vfprintf 01CA                   ??_sprintf 0044  
           Lcd_Set_Cursor@a 0076             Lcd_Set_Cursor@b 0074             Lcd_Set_Cursor@y 0078  
           Lcd_Set_Cursor@z 0077     __end_of__initialization 07FC           __end_of_Lcd_Clear 012B  
            __pcstackCOMMON 0070                __pidataBANK0 0114               __end_of_fputc 03CE  
             __end_of_fputs 023B               __end_of_motor 0543               __end_of_putch 0114  
               duty_sag@pwm 0070              _Lcd_Set_Cursor 02E6                 duty_sol@pwm 0070  
                 ?_Lcd_Init 0070                   ?_Lcd_Port 0070                     ??_fputc 0073  
                   ??_fputs 0079                     ??_motor 007C                     ??_putch 0070  
                __pbssBANK0 0068                  __pbssBANK1 00A0                  __pmaintext 06EF  
                   ?___wmul 0070      __end_of_Lcd_Set_Cursor 032C                     _T2CKPS0 0090  
                   _T2CKPS1 0091                  ??_Lcd_Init 0074                  ??_Lcd_Port 0070  
         __end_of_baslangic 02A4                  __stringtab 0003              _Lcd_Write_Char 023B  
                   _Lcd_Cmd 013C                   ?_duty_sag 0070                   ?_duty_sol 0070  
                   ___awdiv 0543                     ___awmod 0426                   ?_vfprintf 003D  
           ?_Lcd_Set_Cursor 0074                     __ptext1 018A                     __ptext2 01A9  
                   __ptext3 05AA                     __ptext4 03CE                     __ptext5 01EC  
                   __ptext6 0641                     __ptext7 032C                     __ptext8 0211  
                   __ptext9 0378       read_prec_or_width@fmt 007B            ___awmod@dividend 0072  
                   main@hiz 0064                     _sprintf 018A                     clrloop0 0117  
    __end_of_Lcd_Write_Char 026E        end_of_initialization 07FC                     fputc@fp 0072  
                   fputs@fp 0078          _read_prec_or_width 03CE                  ??_duty_sag 0072  
                ??_duty_sol 0072           __end_of_vfpfcnvrt 0641         ?_read_prec_or_width 0076  
          vfpfcnvrt@convarg 0037                   Lcd_Port@a 0070                  ??_vfprintf 007E  
      ??_read_prec_or_width 0078             ?_Lcd_Write_Char 0070           Lcd_Write_String@a 0075  
         Lcd_Write_String@i 007A                   _Lcd_Clear 011E                 vfpfcnvrt@ap 0034  
               vfpfcnvrt@cp 003C                 vfpfcnvrt@fp 003B              __end_of___wmul 0211  
          _Lcd_Write_String 02A4         start_initialization 07E2              main@yuzde_veri 0054  
               __end_of_abs 013C                 __end_of_pad 0378                 vfprintf@fmt 003D  
                ?_Lcd_Clear 0070                    ??___wmul 0074                 __pdataBANK0 006D  
           Lcd_Write_Char@a 0074             Lcd_Write_Char@y 0073                   ___latbits 0002  
             __pcstackBANK0 0020                    ?_Lcd_Cmd 0070                   _baslangic 026E  
          ??_Lcd_Set_Cursor 0075                    ?___awdiv 0070                    ?___awmod 0070  
                 __pstrings 0003                    ?_sprintf 0041              ___wmul@product 0074  
                motor@sayac 0020                  ?_baslangic 0070                   clear_ram0 0116  
                 _sayac_hiz 006D                    Lcd_Cmd@a 0073                 ??_Lcd_Clear 0074  
                 _vfpfcnvrt 05AA                 __stringbase 0012           ___wmul@multiplier 0070  
          ??_Lcd_Write_Char 0071                   main@sayac 0066                    _Lcd_Init 047F  
                  _Lcd_Port 01CA    __end_of_Lcd_Write_String 02E6                  vfprintf@ap 003E  
                vfprintf@fp 003F                  ?_vfpfcnvrt 0033          __end_of__stringtab 0013  
                sprintf@fmt 0041                    _dtoa$639 002A                    __ptext10 0113  
                  __ptext11 012B                    __ptext20 02E6                    __ptext12 0426  
                  __ptext21 011E                    __ptext13 0543                    __ptext22 047F  
                  __ptext14 04DC                    __ptext23 013C                    __ptext15 0170  
                  __ptext24 01CA                    __ptext16 0156                    __ptext17 026E  
                  __ptext18 02A4                    __ptext19 023B                 ??_baslangic 0020  
                  _duty_sag 0156                    _duty_sol 0170                    _vfprintf 01A9  
        Lcd_Write_Char@temp 0072                   sprintf@ap 0045                   stringcode 000D  
                  motor@hiz 0022                 ??_vfpfcnvrt 0035          Lcd_Set_Cursor@temp 0079  
                  sprintf@f 0047                    sprintf@s 0046                    stringdir 000D  
                  stringtab 0003  
